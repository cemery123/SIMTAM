
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_verilog rtl.v; synth; write_verilog -noattr syn_yosys.v' --

1. Executing Verilog-2005 frontend: rtl.v
Parsing Verilog input from `rtl.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\top.$proc$rtl.v:69$1'.
Cleaned up 1 empty switch.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$rtl.v:69$1 in module top.
Removed a total of 0 dead cases.

2.2.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\top.$proc$rtl.v:39$181'.
  Set init value: \reg5 = 21'000000000000000000000
Found init rule in `\top.$proc$rtl.v:38$180'.
  Set init value: \reg6 = 15'000000000000000
Found init rule in `\top.$proc$rtl.v:37$179'.
  Set init value: \reg7 = 13'0000000000000
Found init rule in `\top.$proc$rtl.v:36$178'.
  Set init value: \reg8 = 19'0000000000000000000
Found init rule in `\top.$proc$rtl.v:35$177'.
  Set init value: \reg9 = 22'0000000000000000000000
Found init rule in `\top.$proc$rtl.v:34$176'.
  Set init value: \reg10 = 8'00000000
Found init rule in `\top.$proc$rtl.v:33$175'.
  Set init value: \reg11 = 13'0000000000000
Found init rule in `\top.$proc$rtl.v:32$174'.
  Set init value: \reg12 = 12'000000000000
Found init rule in `\top.$proc$rtl.v:31$173'.
  Set init value: \reg13 = 4'0000
Found init rule in `\top.$proc$rtl.v:30$172'.
  Set init value: \reg14 = 8'00000000
Found init rule in `\top.$proc$rtl.v:29$171'.
  Set init value: \reg15 = 19'0000000000000000000
Found init rule in `\top.$proc$rtl.v:28$170'.
  Set init value: \reg16 = 20'00000000000000000000
Found init rule in `\top.$proc$rtl.v:27$169'.
  Set init value: \reg17 = 16'0000000000000000
Found init rule in `\top.$proc$rtl.v:26$168'.
  Set init value: \reg18 = 19'0000000000000000000
Found init rule in `\top.$proc$rtl.v:25$167'.
  Set init value: \reg19 = 21'000000000000000000000
Found init rule in `\top.$proc$rtl.v:22$166'.
  Set init value: \reg22 = 11'00000000000

2.2.4. Executing PROC_ARST pass (detect async resets in processes).

2.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\top.$proc$rtl.v:39$181'.
     1/1: $1\reg5[20:0]
Creating decoders for process `\top.$proc$rtl.v:38$180'.
     1/1: $1\reg6[14:0]
Creating decoders for process `\top.$proc$rtl.v:37$179'.
     1/1: $1\reg7[12:0]
Creating decoders for process `\top.$proc$rtl.v:36$178'.
     1/1: $1\reg8[18:0]
Creating decoders for process `\top.$proc$rtl.v:35$177'.
     1/1: $1\reg9[21:0]
Creating decoders for process `\top.$proc$rtl.v:34$176'.
     1/1: $1\reg10[7:0]
Creating decoders for process `\top.$proc$rtl.v:33$175'.
     1/1: $1\reg11[12:0]
Creating decoders for process `\top.$proc$rtl.v:32$174'.
     1/1: $1\reg12[11:0]
Creating decoders for process `\top.$proc$rtl.v:31$173'.
     1/1: $1\reg13[3:0]
Creating decoders for process `\top.$proc$rtl.v:30$172'.
     1/1: $1\reg14[7:0]
Creating decoders for process `\top.$proc$rtl.v:29$171'.
     1/1: $1\reg15[18:0]
Creating decoders for process `\top.$proc$rtl.v:28$170'.
     1/1: $1\reg16[19:0]
Creating decoders for process `\top.$proc$rtl.v:27$169'.
     1/1: $1\reg17[15:0]
Creating decoders for process `\top.$proc$rtl.v:26$168'.
     1/1: $1\reg18[18:0]
Creating decoders for process `\top.$proc$rtl.v:25$167'.
     1/1: $1\reg19[20:0]
Creating decoders for process `\top.$proc$rtl.v:22$166'.
     1/1: $1\reg22[10:0]
Creating decoders for process `\top.$proc$rtl.v:156$97'.
     1/1: $0\reg22[10:0]
Creating decoders for process `\top.$proc$rtl.v:69$1'.
     1/15: $0\reg8[18:0]
     2/15: $0\reg7[12:0]
     3/15: $0\reg6[14:0]
     4/15: $0\reg5[20:0]
     5/15: $0\reg9[21:0]
     6/15: $0\reg10[7:0]
     7/15: $0\reg11[12:0]
     8/15: $0\reg12[11:0]
     9/15: $0\reg13[3:0]
    10/15: $0\reg14[7:0]
    11/15: $0\reg15[18:0]
    12/15: $0\reg16[19:0]
    13/15: $0\reg17[15:0]
    14/15: $0\reg18[18:0]
    15/15: $0\reg19[20:0]

2.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\top.\reg22' using process `\top.$proc$rtl.v:156$97'.
  created $dff cell `$procdff$239' with positive edge clock.
Creating register for signal `\top.\reg19' using process `\top.$proc$rtl.v:69$1'.
  created $dff cell `$procdff$240' with positive edge clock.
Creating register for signal `\top.\reg18' using process `\top.$proc$rtl.v:69$1'.
  created $dff cell `$procdff$241' with positive edge clock.
Creating register for signal `\top.\reg17' using process `\top.$proc$rtl.v:69$1'.
  created $dff cell `$procdff$242' with positive edge clock.
Creating register for signal `\top.\reg16' using process `\top.$proc$rtl.v:69$1'.
  created $dff cell `$procdff$243' with positive edge clock.
Creating register for signal `\top.\reg15' using process `\top.$proc$rtl.v:69$1'.
  created $dff cell `$procdff$244' with positive edge clock.
Creating register for signal `\top.\reg14' using process `\top.$proc$rtl.v:69$1'.
  created $dff cell `$procdff$245' with positive edge clock.
Creating register for signal `\top.\reg13' using process `\top.$proc$rtl.v:69$1'.
  created $dff cell `$procdff$246' with positive edge clock.
Creating register for signal `\top.\reg12' using process `\top.$proc$rtl.v:69$1'.
  created $dff cell `$procdff$247' with positive edge clock.
Creating register for signal `\top.\reg11' using process `\top.$proc$rtl.v:69$1'.
  created $dff cell `$procdff$248' with positive edge clock.
Creating register for signal `\top.\reg10' using process `\top.$proc$rtl.v:69$1'.
  created $dff cell `$procdff$249' with positive edge clock.
Creating register for signal `\top.\reg9' using process `\top.$proc$rtl.v:69$1'.
  created $dff cell `$procdff$250' with positive edge clock.
Creating register for signal `\top.\reg8' using process `\top.$proc$rtl.v:69$1'.
  created $dff cell `$procdff$251' with positive edge clock.
Creating register for signal `\top.\reg7' using process `\top.$proc$rtl.v:69$1'.
  created $dff cell `$procdff$252' with positive edge clock.
Creating register for signal `\top.\reg6' using process `\top.$proc$rtl.v:69$1'.
  created $dff cell `$procdff$253' with positive edge clock.
Creating register for signal `\top.\reg5' using process `\top.$proc$rtl.v:69$1'.
  created $dff cell `$procdff$254' with positive edge clock.

2.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `top.$proc$rtl.v:39$181'.
Removing empty process `top.$proc$rtl.v:38$180'.
Removing empty process `top.$proc$rtl.v:37$179'.
Removing empty process `top.$proc$rtl.v:36$178'.
Removing empty process `top.$proc$rtl.v:35$177'.
Removing empty process `top.$proc$rtl.v:34$176'.
Removing empty process `top.$proc$rtl.v:33$175'.
Removing empty process `top.$proc$rtl.v:32$174'.
Removing empty process `top.$proc$rtl.v:31$173'.
Removing empty process `top.$proc$rtl.v:30$172'.
Removing empty process `top.$proc$rtl.v:29$171'.
Removing empty process `top.$proc$rtl.v:28$170'.
Removing empty process `top.$proc$rtl.v:27$169'.
Removing empty process `top.$proc$rtl.v:26$168'.
Removing empty process `top.$proc$rtl.v:25$167'.
Removing empty process `top.$proc$rtl.v:22$166'.
Removing empty process `top.$proc$rtl.v:156$97'.
Found and cleaned up 3 empty switches in `\top.$proc$rtl.v:69$1'.
Removing empty process `top.$proc$rtl.v:69$1'.
Cleaned up 3 empty switches.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~14 debug messages>

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 24 unused cells and 116 unused wires.
<suppressed ~49 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~25 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New input vector for $reduce_or cell $reduce_or$rtl.v:93$26: { \reg7 [0] \reg7 [1] \reg7 [2] \reg7 [3] \reg7 [4] \reg7 [5] \reg7 [6] \reg7 [7] \reg7 [8] \reg7 [9] \reg7 [10] \reg7 [11] \reg7 [12] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:85$13: { $ternary$rtl.v:85$12_Y [0] $ternary$rtl.v:85$12_Y [1] $ternary$rtl.v:85$12_Y [2] $ternary$rtl.v:85$12_Y [3] $ternary$rtl.v:85$12_Y [4] $ternary$rtl.v:85$12_Y [5] $ternary$rtl.v:85$12_Y [6] $ternary$rtl.v:85$12_Y [7] $ternary$rtl.v:85$12_Y [8] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:75$3: { \reg5 [0] \reg5 [1] \reg5 [2] \reg5 [3] \reg5 [4] \reg5 [5] \reg5 [6] \reg5 [7] \reg5 [8] \reg5 [9] \reg5 [10] \reg5 [11] \reg5 [12] \reg5 [13] \reg5 [14] \reg5 [15] \reg5 [16] \reg5 [17] \reg5 [18] \reg5 [19] \reg5 [20] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:169$116: { \wire23 [0] \wire23 [1] \wire23 [2] \wire23 [3] \wire23 [4] \wire23 [5] \wire23 [6] \wire23 [7] \wire23 [8] \wire23 [9] \wire23 [10] \wire23 [11] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:129$53: { \reg12 [0] \reg12 [1] \reg12 [2] \reg12 [3] \reg12 [4] \reg12 [5] \reg12 [6] \reg12 [7] \reg12 [8] \reg12 [9] \reg12 [10] \reg12 [11] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:85$7: { \wire4 [0] \wire4 [1] \wire4 [2] \wire4 [3] \wire4 [4] \wire4 [5] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:130$57: { \reg5 [0] \reg5 [1] \reg5 [2] \reg5 [3] \reg5 [4] \reg5 [5] \reg5 [6] \reg5 [7] \reg5 [8] \reg5 [9] \reg5 [10] \reg5 [11] \reg5 [12] \reg5 [13] \reg5 [14] \reg5 [15] \reg5 [16] \reg5 [17] \reg5 [18] \reg5 [19] \reg5 [20] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:121$42: { \reg7 [0] \reg7 [1] \reg7 [2] \reg7 [3] \reg7 [4] \reg7 [5] \reg7 [6] \reg7 [7] \reg7 [8] \reg7 [9] \reg7 [10] \reg7 [11] \reg7 [12] }
  Optimizing cells in module \top.
Performed a total of 8 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.6.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~25 debug messages>

2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.6.16. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 4 bits (of 17) from mux cell top.$ternary$rtl.v:77$5 ($mux).
Removed top 3 bits (of 9) from port A of cell top.$sub$rtl.v:85$11 ($sub).
Removed top 3 bits (of 9) from port B of cell top.$sub$rtl.v:85$11 ($sub).
Removed top 4 bits (of 8) from mux cell top.$ternary$rtl.v:87$18 ($mux).
Removed top 5 bits (of 13) from port A of cell top.$sub$rtl.v:93$23 ($sub).
Removed top 18 bits (of 26) from mux cell top.$ternary$rtl.v:93$29 ($mux).
Removed top 21 bits (of 22) from port A of cell top.$shr$rtl.v:111$33 ($shr).
Removed top 1 bits (of 16) from mux cell top.$ternary$rtl.v:125$47 ($mux).
Removed top 12 bits (of 16) from mux cell top.$ternary$rtl.v:125$52 ($mux).
Removed top 1 bits (of 16) from port A of cell top.$sub$rtl.v:125$48 ($sub).
Removed top 12 bits (of 16) from port Y of cell top.$neg$rtl.v:125$49 ($neg).
Removed top 12 bits (of 16) from port A of cell top.$neg$rtl.v:125$49 ($neg).
Removed top 2 bits (of 6) from port A of cell top.$lt$rtl.v:134$71 ($lt).
Removed top 7 bits (of 8) from port B of cell top.$xor$rtl.v:134$72 ($xor).
Removed top 29 bits (of 41) from port A of cell top.$neg$rtl.v:143$79 ($neg).
Removed top 22 bits (of 41) from mux cell top.$ternary$rtl.v:144$84 ($mux).
Removed top 8 bits (of 17) from port B of cell top.$le$rtl.v:155$95 ($le).
Removed top 19 bits (of 20) from port A of cell top.$sshl$rtl.v:155$96 ($sshl).
Removed top 7 bits (of 19) from port Y of cell top.$sub$rtl.v:160$100 ($sub).
Removed top 7 bits (of 19) from port A of cell top.$sub$rtl.v:160$100 ($sub).
Removed top 7 bits (of 19) from port B of cell top.$sub$rtl.v:160$100 ($sub).
Removed top 38 bits (of 39) from port A of cell top.$or$rtl.v:164$106 ($or).
Removed top 15 bits (of 19) from mux cell top.$ternary$rtl.v:166$111 ($mux).
Removed top 15 bits (of 19) from mux cell top.$ternary$rtl.v:166$108 ($mux).
Removed top 20 bits (of 21) from port B of cell top.$mul$rtl.v:169$115 ($mul).
Removed top 18 bits (of 20) from port A of cell top.$not$rtl.v:170$121 ($not).
Removed top 9 bits (of 10) from port A of cell top.$sshr$rtl.v:170$122 ($sshr).
Removed top 6 bits (of 22) from port B of cell top.$ge$rtl.v:172$130 ($ge).
Removed top 19 bits (of 20) from mux cell top.$ternary$rtl.v:173$133 ($mux).
Removed top 5 bits (of 20) from mux cell top.$ternary$rtl.v:173$136 ($mux).
Removed top 11 bits (of 13) from mux cell top.$procmux$192 ($mux).
Removed top 14 bits (of 16) from mux cell top.$procmux$225 ($mux).
Removed top 10 bits (of 11) from FF cell top.$procdff$239 ($dff).
Removed top 15 bits (of 19) from FF cell top.$procdff$251 ($dff).
Removed top 2 bits (of 13) from FF cell top.$procdff$252 ($dff).
Removed top 19 bits (of 21) from FF cell top.$procdff$254 ($dff).
Removed top 2 bits (of 13) from mux cell top.$ternary$rtl.v:77$5 ($mux).
Removed top 4 bits (of 8) from port Y of cell top.$shl$rtl.v:87$16 ($shl).
Removed top 2 bits (of 13) from port B of cell top.$sub$rtl.v:93$23 ($sub).
Removed top 18 bits (of 26) from mux cell top.$ternary$rtl.v:93$25 ($mux).
Removed top 19 bits (of 21) from port A of cell top.$not$rtl.v:112$36 ($not).
Removed top 12 bits (of 16) from port Y of cell top.$sub$rtl.v:125$48 ($sub).
Removed top 11 bits (of 15) from port A of cell top.$sub$rtl.v:125$48 ($sub).
Removed top 12 bits (of 16) from port B of cell top.$sub$rtl.v:125$48 ($sub).
Removed top 2 bits (of 13) from mux cell top.$ternary$rtl.v:130$61 ($mux).
Removed top 22 bits (of 41) from mux cell top.$ternary$rtl.v:143$80 ($mux).
Removed top 34 bits (of 41) from mux cell top.$ternary$rtl.v:144$82 ($mux).
Removed top 2 bits (of 13) from port B of cell top.$add$rtl.v:155$90 ($add).
Removed top 15 bits (of 39) from mux cell top.$ternary$rtl.v:164$105 ($mux).
Removed top 19 bits (of 21) from port A of cell top.$mul$rtl.v:169$115 ($mul).
Removed top 18 bits (of 21) from port Y of cell top.$mul$rtl.v:169$115 ($mul).
Removed top 2 bits (of 3) from port A of cell top.$not$rtl.v:174$139 ($not).
Removed top 2 bits (of 8) from mux cell top.$procmux$186 ($mux).
Removed top 9 bits (of 13) from mux cell top.$procmux$195 ($mux).
Removed top 5 bits (of 13) from port Y of cell top.$sub$rtl.v:93$23 ($sub).
Removed top 3 bits (of 11) from port B of cell top.$sub$rtl.v:93$23 ($sub).
Removed top 11 bits (of 15) from mux cell top.$ternary$rtl.v:125$47 ($mux).
Removed top 2 bits (of 13) from port B of cell top.$sshl$rtl.v:130$62 ($sshl).
Removed top 22 bits (of 41) from port Y of cell top.$neg$rtl.v:143$79 ($neg).
Removed top 11 bits (of 15) from mux cell top.$ternary$rtl.v:125$46 ($mux).
Removed top 2 bits (of 8) from mux cell top.$procmux$189 ($mux).
Removed top 2 bits (of 8) from wire top.$0\reg10[7:0].
Removed top 9 bits (of 13) from wire top.$0\reg11[12:0].
Removed top 10 bits (of 11) from wire top.$0\reg22[10:0].
Removed top 38 bits (of 39) from wire top.$logic_and$rtl.v:163$102_Y.
Removed top 14 bits (of 15) from wire top.$logic_not$rtl.v:130$58_Y.
Removed top 20 bits (of 21) from wire top.$logic_not$rtl.v:169$117_Y.
Removed top 7 bits (of 8) from wire top.$lt$rtl.v:134$71_Y.
Removed top 18 bits (of 21) from wire top.$mul$rtl.v:169$115_Y.
Removed top 12 bits (of 16) from wire top.$neg$rtl.v:125$49_Y.
Removed top 2 bits (of 8) from wire top.$procmux$186_Y.
Removed top 14 bits (of 16) from wire top.$procmux$225_Y.
Removed top 8 bits (of 9) from wire top.$reduce_and$rtl.v:85$7_Y.
Removed top 7 bits (of 8) from wire top.$reduce_xor$rtl.v:87$15_Y.
Removed top 4 bits (of 8) from wire top.$shl$rtl.v:87$16_Y.
Removed top 12 bits (of 16) from wire top.$sub$rtl.v:125$48_Y.
Removed top 5 bits (of 13) from wire top.$sub$rtl.v:93$23_Y.
Removed top 11 bits (of 15) from wire top.$ternary$rtl.v:125$46_Y.
Removed top 12 bits (of 16) from wire top.$ternary$rtl.v:125$47_Y.
Removed top 15 bits (of 39) from wire top.$ternary$rtl.v:164$105_Y.
Removed top 15 bits (of 19) from wire top.$ternary$rtl.v:166$108_Y.
Removed top 19 bits (of 20) from wire top.$ternary$rtl.v:173$133_Y.
Removed top 5 bits (of 20) from wire top.$ternary$rtl.v:173$136_Y.
Removed top 6 bits (of 17) from wire top.$ternary$rtl.v:77$5_Y.
Removed top 4 bits (of 8) from wire top.$ternary$rtl.v:87$18_Y.
Removed top 5 bits (of 14) from wire top.wire24.
Removed top 3 bits (of 12) from wire top.wire28.
Removed top 2 bits (of 4) from wire top.wire30.

2.8. Executing PEEPOPT pass (run peephole optimizers).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 29 unused wires.
<suppressed ~1 debug messages>

2.10. Executing TECHMAP pass (map to technology primitives).

2.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~116 debug messages>

2.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $add$rtl.v:155$90 ($add).
  creating $macc model for $mul$rtl.v:169$115 ($mul).
  creating $macc model for $neg$rtl.v:125$49 ($neg).
  creating $macc model for $neg$rtl.v:143$79 ($neg).
  creating $macc model for $sub$rtl.v:125$48 ($sub).
  creating $macc model for $sub$rtl.v:160$100 ($sub).
  creating $macc model for $sub$rtl.v:85$11 ($sub).
  creating $macc model for $sub$rtl.v:93$23 ($sub).
  merging $macc model for $sub$rtl.v:125$48 into $neg$rtl.v:125$49.
  creating $alu model for $macc $sub$rtl.v:85$11.
  creating $alu model for $macc $sub$rtl.v:160$100.
  creating $alu model for $macc $sub$rtl.v:93$23.
  creating $alu model for $macc $neg$rtl.v:143$79.
  creating $alu model for $macc $neg$rtl.v:125$49.
  creating $alu model for $macc $add$rtl.v:155$90.
  creating $macc cell for $mul$rtl.v:169$115: $auto$alumacc.cc:354:replace_macc$282
  creating $alu model for $ge$rtl.v:172$130 ($ge): new $alu
  creating $alu model for $gt$rtl.v:90$19 ($gt): new $alu
  creating $alu model for $le$rtl.v:153$85 ($le): new $alu
  creating $alu model for $le$rtl.v:155$95 ($le): new $alu
  creating $alu model for $lt$rtl.v:134$71 ($lt): new $alu
  creating $alu model for $lt$rtl.v:164$103 ($lt): new $alu
  creating $alu cell for $lt$rtl.v:164$103: $auto$alumacc.cc:474:replace_alu$289
  creating $alu cell for $lt$rtl.v:134$71: $auto$alumacc.cc:474:replace_alu$300
  creating $alu cell for $le$rtl.v:155$95: $auto$alumacc.cc:474:replace_alu$307
  creating $alu cell for $le$rtl.v:153$85: $auto$alumacc.cc:474:replace_alu$320
  creating $alu cell for $gt$rtl.v:90$19: $auto$alumacc.cc:474:replace_alu$329
  creating $alu cell for $ge$rtl.v:172$130: $auto$alumacc.cc:474:replace_alu$340
  creating $alu cell for $add$rtl.v:155$90: $auto$alumacc.cc:474:replace_alu$349
  creating $alu cell for $neg$rtl.v:125$49: $auto$alumacc.cc:474:replace_alu$352
  creating $alu cell for $neg$rtl.v:143$79: $auto$alumacc.cc:474:replace_alu$355
  creating $alu cell for $sub$rtl.v:93$23: $auto$alumacc.cc:474:replace_alu$358
  creating $alu cell for $sub$rtl.v:160$100: $auto$alumacc.cc:474:replace_alu$361
  creating $alu cell for $sub$rtl.v:85$11: $auto$alumacc.cc:474:replace_alu$364
  created 12 $alu and 1 $macc cells.

2.12. Executing SHARE pass (SAT-based resource sharing).
Found 5 cells in module top that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$rtl.v:170$122 ($sshr):
    Found 1 activation_patterns using ctrl signal $reduce_bool$rtl.v:173$137_Y.
    No candidates found.
  Analyzing resource sharing options for $sshl$rtl.v:171$126 ($sshl):
    Found 1 activation_patterns using ctrl signal $reduce_bool$rtl.v:173$137_Y.
    No candidates found.
  Analyzing resource sharing options for $sshl$rtl.v:130$62 ($sshl):
    Found 1 activation_patterns using ctrl signal { $procmux$184_CMP $reduce_bool$rtl.v:131$66_Y }.
    No candidates found.
  Analyzing resource sharing options for $shr$rtl.v:131$63 ($shr):
    Found 1 activation_patterns using ctrl signal { $procmux$184_CMP $reduce_bool$rtl.v:131$66_Y $reduce_bool$rtl.v:131$64_Y }.
    No candidates found.
  Analyzing resource sharing options for $shr$rtl.v:111$33 ($shr):
    Found 1 activation_patterns using ctrl signal $procmux$184_CMP.
    No candidates found.

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~4 debug messages>

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~25 debug messages>

2.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New input vector for $reduce_or cell $reduce_or$rtl.v:93$26: { \reg7 [0] \reg7 [1] \reg7 [2] \reg7 [3] \reg7 [4] \reg7 [5] \reg7 [6] \reg7 [7] \reg7 [8] \reg7 [9] \reg7 [10] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:75$3: { \reg5 [0] \reg5 [1] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$345: { $auto$alumacc.cc:490:replace_alu$341 [0] $auto$alumacc.cc:490:replace_alu$341 [1] $auto$alumacc.cc:490:replace_alu$341 [2] $auto$alumacc.cc:490:replace_alu$341 [3] $auto$alumacc.cc:490:replace_alu$341 [4] $auto$alumacc.cc:490:replace_alu$341 [5] $auto$alumacc.cc:490:replace_alu$341 [6] $auto$alumacc.cc:490:replace_alu$341 [7] $auto$alumacc.cc:490:replace_alu$341 [8] $auto$alumacc.cc:490:replace_alu$341 [9] $auto$alumacc.cc:490:replace_alu$341 [10] $auto$alumacc.cc:490:replace_alu$341 [11] $auto$alumacc.cc:490:replace_alu$341 [12] $auto$alumacc.cc:490:replace_alu$341 [13] $auto$alumacc.cc:490:replace_alu$341 [14] $auto$alumacc.cc:490:replace_alu$341 [15] $auto$alumacc.cc:490:replace_alu$341 [16] $auto$alumacc.cc:490:replace_alu$341 [17] $auto$alumacc.cc:490:replace_alu$341 [18] $auto$alumacc.cc:490:replace_alu$341 [19] $auto$alumacc.cc:490:replace_alu$341 [20] $auto$alumacc.cc:490:replace_alu$341 [21] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$292: { $auto$alumacc.cc:490:replace_alu$290 [0] $auto$alumacc.cc:490:replace_alu$290 [1] $auto$alumacc.cc:490:replace_alu$290 [2] $auto$alumacc.cc:490:replace_alu$290 [3] $auto$alumacc.cc:490:replace_alu$290 [4] $auto$alumacc.cc:490:replace_alu$290 [5] $auto$alumacc.cc:490:replace_alu$290 [6] $auto$alumacc.cc:490:replace_alu$290 [7] $auto$alumacc.cc:490:replace_alu$290 [8] $auto$alumacc.cc:490:replace_alu$290 [9] $auto$alumacc.cc:490:replace_alu$290 [10] $auto$alumacc.cc:490:replace_alu$290 [11] $auto$alumacc.cc:490:replace_alu$290 [12] $auto$alumacc.cc:490:replace_alu$290 [13] $auto$alumacc.cc:490:replace_alu$290 [14] $auto$alumacc.cc:490:replace_alu$290 [15] $auto$alumacc.cc:490:replace_alu$290 [16] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$310: { $auto$alumacc.cc:490:replace_alu$308 [0] $auto$alumacc.cc:490:replace_alu$308 [1] $auto$alumacc.cc:490:replace_alu$308 [2] $auto$alumacc.cc:490:replace_alu$308 [3] $auto$alumacc.cc:490:replace_alu$308 [4] $auto$alumacc.cc:490:replace_alu$308 [5] $auto$alumacc.cc:490:replace_alu$308 [6] $auto$alumacc.cc:490:replace_alu$308 [7] $auto$alumacc.cc:490:replace_alu$308 [8] $auto$alumacc.cc:490:replace_alu$308 [9] $auto$alumacc.cc:490:replace_alu$308 [10] $auto$alumacc.cc:490:replace_alu$308 [11] $auto$alumacc.cc:490:replace_alu$308 [12] $auto$alumacc.cc:490:replace_alu$308 [13] $auto$alumacc.cc:490:replace_alu$308 [14] $auto$alumacc.cc:490:replace_alu$308 [15] $auto$alumacc.cc:490:replace_alu$308 [16] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$325: { $auto$alumacc.cc:490:replace_alu$321 [0] $auto$alumacc.cc:490:replace_alu$321 [1] $auto$alumacc.cc:490:replace_alu$321 [2] $auto$alumacc.cc:490:replace_alu$321 [3] $auto$alumacc.cc:490:replace_alu$321 [4] $auto$alumacc.cc:490:replace_alu$321 [5] $auto$alumacc.cc:490:replace_alu$321 [6] $auto$alumacc.cc:490:replace_alu$321 [7] $auto$alumacc.cc:490:replace_alu$321 [8] $auto$alumacc.cc:490:replace_alu$321 [9] $auto$alumacc.cc:490:replace_alu$321 [10] $auto$alumacc.cc:490:replace_alu$321 [11] $auto$alumacc.cc:490:replace_alu$321 [12] $auto$alumacc.cc:490:replace_alu$321 [13] $auto$alumacc.cc:490:replace_alu$321 [14] $auto$alumacc.cc:490:replace_alu$321 [15] $auto$alumacc.cc:490:replace_alu$321 [16] $auto$alumacc.cc:490:replace_alu$321 [17] $auto$alumacc.cc:490:replace_alu$321 [18] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$332: { $auto$alumacc.cc:490:replace_alu$330 [0] $auto$alumacc.cc:490:replace_alu$330 [1] $auto$alumacc.cc:490:replace_alu$330 [2] $auto$alumacc.cc:490:replace_alu$330 [3] $auto$alumacc.cc:490:replace_alu$330 [4] $auto$alumacc.cc:490:replace_alu$330 [5] $auto$alumacc.cc:490:replace_alu$330 [6] $auto$alumacc.cc:490:replace_alu$330 [7] }
  Optimizing cells in module \top.
Performed a total of 7 changes.

2.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 11 unused wires.
<suppressed ~2 debug messages>

2.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.13.9. Rerunning OPT passes. (Maybe there is more to do..)

2.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~25 debug messages>

2.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.13.16. Finished OPT passes. (There is nothing left to do.)

2.14. Executing FSM pass (extract and optimize FSM).

2.14.1. Executing FSM_DETECT pass (finding FSMs in design).

2.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.15.5. Finished fast OPT passes.

2.16. Executing MEMORY pass.

2.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~61 debug messages>

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 7 unused cells and 26 unused wires.
<suppressed ~9 debug messages>

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $procmux$219:
      Old ports: A={ 16'0000000000000000 \reg8 [3:0] }, B={ $logic_not$rtl.v:134$73_Y $logic_not$rtl.v:134$73_Y $logic_not$rtl.v:134$73_Y $logic_not$rtl.v:134$73_Y $logic_not$rtl.v:134$73_Y $logic_not$rtl.v:134$73_Y $logic_not$rtl.v:134$73_Y $logic_not$rtl.v:134$73_Y $logic_not$rtl.v:134$73_Y $logic_not$rtl.v:134$73_Y $logic_not$rtl.v:134$73_Y $logic_not$rtl.v:134$73_Y $logic_not$rtl.v:134$73_Y $logic_not$rtl.v:134$73_Y $logic_not$rtl.v:134$73_Y $logic_not$rtl.v:134$73_Y $logic_not$rtl.v:134$73_Y $logic_not$rtl.v:134$73_Y $logic_not$rtl.v:134$73_Y $logic_not$rtl.v:134$73_Y }, Y=$procmux$219_Y
      New ports: A={ 1'0 \reg8 [3:0] }, B={ $logic_not$rtl.v:134$73_Y $logic_not$rtl.v:134$73_Y $logic_not$rtl.v:134$73_Y $logic_not$rtl.v:134$73_Y $logic_not$rtl.v:134$73_Y }, Y=$procmux$219_Y [4:0]
      New connections: $procmux$219_Y [19:5] = { $procmux$219_Y [4] $procmux$219_Y [4] $procmux$219_Y [4] $procmux$219_Y [4] $procmux$219_Y [4] $procmux$219_Y [4] $procmux$219_Y [4] $procmux$219_Y [4] $procmux$219_Y [4] $procmux$219_Y [4] $procmux$219_Y [4] $procmux$219_Y [4] $procmux$219_Y [4] $procmux$219_Y [4] $procmux$219_Y [4] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:112$39:
      Old ports: A={ 19'1111111111111111111 $auto$opt_expr.cc:189:group_cell_inputs$367 }, B={ 15'000000000000000 \wire4 }, Y=$ternary$rtl.v:112$39_Y
      New ports: A={ 5'11111 $auto$opt_expr.cc:189:group_cell_inputs$367 }, B={ 1'0 \wire4 }, Y=$ternary$rtl.v:112$39_Y [6:0]
      New connections: $ternary$rtl.v:112$39_Y [20:7] = { $ternary$rtl.v:112$39_Y [6] $ternary$rtl.v:112$39_Y [6] $ternary$rtl.v:112$39_Y [6] $ternary$rtl.v:112$39_Y [6] $ternary$rtl.v:112$39_Y [6] $ternary$rtl.v:112$39_Y [6] $ternary$rtl.v:112$39_Y [6] $ternary$rtl.v:112$39_Y [6] $ternary$rtl.v:112$39_Y [6] $ternary$rtl.v:112$39_Y [6] $ternary$rtl.v:112$39_Y [6] $ternary$rtl.v:112$39_Y [6] $ternary$rtl.v:112$39_Y [6] $ternary$rtl.v:112$39_Y [6] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:144$82:
      Old ports: A=7'1000001, B={ 3'000 \reg8 [3:0] }, Y=$ternary$rtl.v:144$82_Y [6:0]
      New ports: A=5'10001, B={ 1'0 \reg8 [3:0] }, Y={ $ternary$rtl.v:144$82_Y [6] $ternary$rtl.v:144$82_Y [3:0] }
      New connections: $ternary$rtl.v:144$82_Y [5:4] = 2'00
    Consolidated identical input bits for $mux cell $ternary$rtl.v:169$119:
      Old ports: A={ 20'00000000000000000000 $auto$wreduce.cc:455:run$260 [0] }, B={ 18'000000000000000000 $auto$wreduce.cc:455:run$262 [2:0] }, Y=$ternary$rtl.v:169$119_Y
      New ports: A={ 2'00 $auto$wreduce.cc:455:run$260 [0] }, B=$auto$wreduce.cc:455:run$262 [2:0], Y=$ternary$rtl.v:169$119_Y [2:0]
      New connections: $ternary$rtl.v:169$119_Y [20:3] = 18'000000000000000000
    Consolidated identical input bits for $mux cell $ternary$rtl.v:173$138:
      Old ports: A={ 5'00000 $auto$wreduce.cc:455:run$276 [14:0] }, B={ 18'111111111111111111 $auto$opt_expr.cc:189:group_cell_inputs$386 }, Y=\wire27
      New ports: A={ 1'0 $auto$wreduce.cc:455:run$276 [14:0] }, B={ 14'11111111111111 $auto$opt_expr.cc:189:group_cell_inputs$386 }, Y=\wire27 [15:0]
      New connections: \wire27 [19:16] = { \wire27 [15] \wire27 [15] \wire27 [15] \wire27 [15] }
  Optimizing cells in module \top.
Performed a total of 5 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

2.20.9. Rerunning OPT passes. (Maybe there is more to do..)

2.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

2.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.20.16. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_xor.
Using template $paramod$constmap:a378acfacb2c922b23f2bd99e063fa658a140dcf$paramod$ef1bbbff3af1c59b8c1f6b94d75f5c7037ee4f25\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $not.
Using template $paramod$constmap:c9dd14aa8b7328e7927cf5f48c971dc9efc65ddb$paramod$42a6d0467df7ecaf5d871c849bf59adc92910a49\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using extmapper simplemap for cells of type $reduce_xnor.
Using extmapper maccmap for cells of type $macc.
  add \reg5 [1:0] * \wire2 [0] (2x1 bits, unsigned)
Using extmapper simplemap for cells of type $xnor.
Using template $paramod$constmap:18f23f55710f8f8ba51905bd29cfbd164d12691c$paramod$e01e217ccd3905e9c5beae80e9709c201c807442\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod$constmap:6c79aec13baa62aa30d0e938488e864532d353f2$paramod$2cab378ddf3cfac6c914e4164a547716b4014a78\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod$constmap:6564282b150bc9018bc0eec41421d4975aedede3$paramod$3e78d85ad9285b48774a103201ef3b9f61a66182\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=6\Y_WIDTH=9 for cells of type $alu.
Using template $paramod$constmap:ec5f8ce056e9aa4caad9c36e3be15ce07cca460b$paramod$e48586eb9d0527461925f2036d3a9e50f8c21e4c\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:f97907d98ce3f6090d86882d79ce94d75a56be30$paramod$755a9da52eed6bf7c2b3013cc5c7b6b847e6050a\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=12\B_WIDTH=12\Y_WIDTH=12 for cells of type $alu.
Using template $paramod$constmap:f5598b838d5441b9585148b07271211dbe246f61$paramod$7b1da69add147f4330001a3c0a5916592ebe4d77\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=12\Y_WIDTH=19 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=11\B_WIDTH=17\Y_WIDTH=17 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=22\Y_WIDTH=22 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=17\B_WIDTH=19\Y_WIDTH=19 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=4\B_WIDTH=6\Y_WIDTH=6 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=9\B_WIDTH=17\Y_WIDTH=17 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_90_lcu\WIDTH=9 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=12 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=8 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=19 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=4 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=17 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=22 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=6 for cells of type $lcu.
No more expansions possible.
<suppressed ~3658 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~496 debug messages>

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~645 debug messages>
Removed a total of 215 cells.

2.22.3. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$simplemap.cc:420:simplemap_dff$3524 ($_DFF_P_) from module top.
Replaced 1 DFF cells.

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 188 unused cells and 562 unused wires.
<suppressed ~189 debug messages>

2.22.5. Rerunning OPT passes. (Removed registers in this run.)

2.22.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~42 debug messages>

2.22.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

2.22.8. Executing OPT_RMDFF pass (remove dff with constant values).

2.22.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 84 unused cells and 35 unused wires.
<suppressed ~85 debug messages>

2.22.10. Finished fast OPT passes.

2.23. Executing ABC pass (technology mapping using ABC).

2.23.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 1705 gates and 1924 wires to a netlist network with 217 inputs and 191 outputs.

2.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       16
ABC RESULTS:            ANDNOT cells:      200
ABC RESULTS:              AOI3 cells:       86
ABC RESULTS:              AOI4 cells:        4
ABC RESULTS:               MUX cells:      273
ABC RESULTS:              NAND cells:       51
ABC RESULTS:               NOR cells:       94
ABC RESULTS:               NOT cells:       90
ABC RESULTS:              OAI3 cells:       65
ABC RESULTS:              OAI4 cells:        2
ABC RESULTS:                OR cells:      310
ABC RESULTS:             ORNOT cells:       67
ABC RESULTS:              XNOR cells:       34
ABC RESULTS:               XOR cells:      107
ABC RESULTS:        internal signals:     1516
ABC RESULTS:           input signals:      217
ABC RESULTS:          output signals:      191
Removing temp directory.

2.24. Executing OPT pass (performing simple optimizations).

2.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~65 debug messages>

2.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 2 unused cells and 850 unused wires.
<suppressed ~3 debug messages>

2.24.5. Finished fast OPT passes.

2.25. Executing HIERARCHY pass (managing design hierarchy).

2.26. Printing statistics.

=== top ===

   Number of wires:               1252
   Number of wire bits:           2112
   Number of public wires:          34
   Number of public wire bits:     754
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1571
     $_ANDNOT_                     200
     $_AND_                         16
     $_AOI3_                        86
     $_AOI4_                         4
     $_DFF_P_                      174
     $_MUX_                        273
     $_NAND_                        51
     $_NOR_                         94
     $_NOT_                         88
     $_OAI3_                        65
     $_OAI4_                         2
     $_ORNOT_                       67
     $_OR_                         310
     $_XNOR_                        34
     $_XOR_                        107

2.27. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

3. Executing Verilog backend.
Dumping module `\top'.

End of script. Logfile hash: 4ab72c198c
CPU: user 1.45s system 0.01s, MEM: 36.39 MB total, 28.77 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 18% 17x proc (0 sec), 14% 25x opt_clean (0 sec), ...
