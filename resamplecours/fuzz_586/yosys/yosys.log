
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_verilog rtl.v; synth; write_verilog -noattr syn_yosys.v' --

1. Executing Verilog-2005 frontend: rtl.v
Parsing Verilog input from `rtl.v' to AST representation.
Generating RTLIL representation for module `\top'.
Generating RTLIL representation for module `\module35'.
Generating RTLIL representation for module `\module156'.
Generating RTLIL representation for module `\module85'.
Generating RTLIL representation for module `\module56'.
Successfully finished Verilog frontend.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).
Mapping positional arguments of cell module35.modinst171 (module156).
Mapping positional arguments of cell top.modinst177 (module35).
Warning: Resizing cell port module35.modinst171.y from 15 bits to 91 bits.
Warning: Resizing cell port module35.modinst171.wire159 from 20 bits to 12 bits.
Warning: Resizing cell port module35.modinst171.wire158 from 7 bits to 3 bits.
Warning: Resizing cell port module35.modinst153.wire86 from 19 bits to 3 bits.
Warning: Resizing cell port module35.modinst153.wire90 from 16 bits to 7 bits.
Warning: Resizing cell port module35.modinst153.y from 8 bits to 684 bits.
Warning: Resizing cell port module35.modinst84.wire60 from 19 bits to 11 bits.
Warning: Resizing cell port module35.modinst84.y from 9 bits to 288 bits.
Warning: Resizing cell port module35.modinst84.wire57 from 7 bits to 4 bits.
Warning: Resizing cell port top.modinst177.y from 17 bits to 302 bits.
Warning: Resizing cell port top.modinst177.wire36 from 18 bits to 15 bits.
Warning: Resizing cell port top.modinst177.wire38 from 17 bits to 13 bits.
Warning: Resizing cell port top.modinst177.wire39 from 19 bits to 16 bits.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 7 switch rules as full_case in process $proc$rtl.v:776$712 in module module85.
Marked 1 switch rules as full_case in process $proc$rtl.v:735$644 in module module85.
Marked 5 switch rules as full_case in process $proc$rtl.v:654$540 in module module85.
Marked 4 switch rules as full_case in process $proc$rtl.v:390$382 in module module35.
Marked 4 switch rules as full_case in process $proc$rtl.v:236$185 in module top.
Marked 5 switch rules as full_case in process $proc$rtl.v:124$16 in module top.
Removed a total of 0 dead cases.

2.2.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\module85.$proc$rtl.v:588$981'.
  Set init value: \reg93 = 17'00000000000000000
Found init rule in `\module85.$proc$rtl.v:587$980'.
  Set init value: \reg94 = 15'000000000000000
Found init rule in `\module85.$proc$rtl.v:586$979'.
  Set init value: \reg95 = 14'00000000000000
Found init rule in `\module85.$proc$rtl.v:585$978'.
  Set init value: \reg96 = 15'000000000000000
Found init rule in `\module85.$proc$rtl.v:584$977'.
  Set init value: \reg97 = 12'000000000000
Found init rule in `\module85.$proc$rtl.v:583$976'.
  Set init value: \reg98 = 18'000000000000000000
Found init rule in `\module85.$proc$rtl.v:582$975'.
  Set init value: \reg99 = 19'0000000000000000000
Found init rule in `\module85.$proc$rtl.v:581$974'.
  Set init value: \reg100 = 3'000
Found init rule in `\module85.$proc$rtl.v:580$973'.
  Set init value: \reg101 = 14'00000000000000
Found init rule in `\module85.$proc$rtl.v:579$972'.
  Set init value: \reg102 = 16'0000000000000000
Found init rule in `\module85.$proc$rtl.v:578$971'.
  Set init value: \reg103 = 17'00000000000000000
Found init rule in `\module85.$proc$rtl.v:577$970'.
  Set init value: \reg104 = 16'0000000000000000
Found init rule in `\module85.$proc$rtl.v:576$969'.
  Set init value: \reg105 = 13'0000000000000
Found init rule in `\module85.$proc$rtl.v:575$968'.
  Set init value: \reg106 = 5'00000
Found init rule in `\module85.$proc$rtl.v:571$967'.
  Set init value: \reg110 = 10'0000000000
Found init rule in `\module85.$proc$rtl.v:570$966'.
  Set init value: \reg111 = 12'000000000000
Found init rule in `\module85.$proc$rtl.v:569$965'.
  Set init value: \reg112 = 9'000000000
Found init rule in `\module85.$proc$rtl.v:568$964'.
  Set init value: \reg113 = 15'000000000000000
Found init rule in `\module85.$proc$rtl.v:567$963'.
  Set init value: \reg114 = 7'0000000
Found init rule in `\module85.$proc$rtl.v:563$962'.
  Set init value: \reg118 = 11'00000000000
Found init rule in `\module85.$proc$rtl.v:562$961'.
  Set init value: \reg119 = 16'0000000000000000
Found init rule in `\module85.$proc$rtl.v:561$960'.
  Set init value: \reg120 = 10'0000000000
Found init rule in `\module85.$proc$rtl.v:560$959'.
  Set init value: \reg121 = 11'00000000000
Found init rule in `\module85.$proc$rtl.v:559$958'.
  Set init value: \reg122 = 10'0000000000
Found init rule in `\module85.$proc$rtl.v:558$957'.
  Set init value: \reg123 = 13'0000000000000
Found init rule in `\module85.$proc$rtl.v:557$956'.
  Set init value: \reg124 = 16'0000000000000000
Found init rule in `\module85.$proc$rtl.v:556$955'.
  Set init value: \reg125 = 19'0000000000000000000
Found init rule in `\module85.$proc$rtl.v:555$954'.
  Set init value: \reg126 = 7'0000000
Found init rule in `\module85.$proc$rtl.v:554$953'.
  Set init value: \reg127 = 15'000000000000000
Found init rule in `\module85.$proc$rtl.v:553$952'.
  Set init value: \reg128 = 9'000000000
Found init rule in `\module85.$proc$rtl.v:552$951'.
  Set init value: \reg129 = 8'00000000
Found init rule in `\module85.$proc$rtl.v:551$950'.
  Set init value: \reg130 = 11'00000000000
Found init rule in `\module85.$proc$rtl.v:550$949'.
  Set init value: \reg131 = 9'000000000
Found init rule in `\module85.$proc$rtl.v:549$948'.
  Set init value: \reg132 = 18'000000000000000000
Found init rule in `\module85.$proc$rtl.v:548$947'.
  Set init value: \reg133 = 13'0000000000000
Found init rule in `\module85.$proc$rtl.v:547$946'.
  Set init value: \reg134 = 5'00000
Found init rule in `\module85.$proc$rtl.v:546$945'.
  Set init value: \reg135 = 17'00000000000000000
Found init rule in `\module85.$proc$rtl.v:545$944'.
  Set init value: \reg136 = 15'000000000000000
Found init rule in `\module85.$proc$rtl.v:544$943'.
  Set init value: \reg137 = 5'00000
Found init rule in `\module85.$proc$rtl.v:536$942'.
  Set init value: \reg145 = 20'00000000000000000000
Found init rule in `\module85.$proc$rtl.v:535$941'.
  Set init value: \reg146 = 3'000
Found init rule in `\module156.$proc$rtl.v:486$539'.
  Set init value: \reg166 = 17'00000000000000000
Found init rule in `\module156.$proc$rtl.v:485$538'.
  Set init value: \reg167 = 8'00000000
Found init rule in `\module35.$proc$rtl.v:363$520'.
  Set init value: \reg55 = 7'0000000
Found init rule in `\module35.$proc$rtl.v:362$519'.
  Set init value: \reg54 = 13'0000000000000
Found init rule in `\module35.$proc$rtl.v:361$518'.
  Set init value: \reg53 = 15'000000000000000
Found init rule in `\module35.$proc$rtl.v:360$517'.
  Set init value: \reg52 = 18'000000000000000000
Found init rule in `\module35.$proc$rtl.v:359$516'.
  Set init value: \reg51 = 6'000000
Found init rule in `\module35.$proc$rtl.v:358$515'.
  Set init value: \reg50 = 20'00000000000000000000
Found init rule in `\module35.$proc$rtl.v:357$514'.
  Set init value: \reg49 = 16'0000000000000000
Found init rule in `\module35.$proc$rtl.v:356$513'.
  Set init value: \reg48 = 19'0000000000000000000
Found init rule in `\module35.$proc$rtl.v:355$512'.
  Set init value: \reg47 = 9'000000000
Found init rule in `\module35.$proc$rtl.v:354$511'.
  Set init value: \reg46 = 8'00000000
Found init rule in `\module35.$proc$rtl.v:353$510'.
  Set init value: \reg45 = 8'00000000
Found init rule in `\module35.$proc$rtl.v:352$509'.
  Set init value: \reg44 = 19'0000000000000000000
Found init rule in `\module35.$proc$rtl.v:351$508'.
  Set init value: \reg43 = 7'0000000
Found init rule in `\module35.$proc$rtl.v:350$507'.
  Set init value: \reg42 = 21'000000000000000000000
Found init rule in `\module35.$proc$rtl.v:349$506'.
  Set init value: \reg41 = 19'0000000000000000000
Found init rule in `\module35.$proc$rtl.v:348$505'.
  Set init value: \reg40 = 22'0000000000000000000000
Found init rule in `\top.$proc$rtl.v:58$381'.
  Set init value: \reg10 = 6'000000
Found init rule in `\top.$proc$rtl.v:57$380'.
  Set init value: \reg11 = 4'0000
Found init rule in `\top.$proc$rtl.v:56$379'.
  Set init value: \reg12 = 8'00000000
Found init rule in `\top.$proc$rtl.v:55$378'.
  Set init value: \reg13 = 7'0000000
Found init rule in `\top.$proc$rtl.v:54$377'.
  Set init value: \reg14 = 13'0000000000000
Found init rule in `\top.$proc$rtl.v:53$376'.
  Set init value: \reg15 = 3'000
Found init rule in `\top.$proc$rtl.v:52$375'.
  Set init value: \reg16 = 15'000000000000000
Found init rule in `\top.$proc$rtl.v:51$374'.
  Set init value: \reg17 = 14'00000000000000
Found init rule in `\top.$proc$rtl.v:50$373'.
  Set init value: \reg18 = 6'000000
Found init rule in `\top.$proc$rtl.v:49$372'.
  Set init value: \reg19 = 5'00000
Found init rule in `\top.$proc$rtl.v:48$371'.
  Set init value: \reg20 = 10'0000000000
Found init rule in `\top.$proc$rtl.v:47$370'.
  Set init value: \reg21 = 13'0000000000000
Found init rule in `\top.$proc$rtl.v:46$369'.
  Set init value: \reg22 = 22'0000000000000000000000
Found init rule in `\top.$proc$rtl.v:45$368'.
  Set init value: \reg23 = 8'00000000
Found init rule in `\top.$proc$rtl.v:44$367'.
  Set init value: \reg24 = 12'000000000000
Found init rule in `\top.$proc$rtl.v:43$366'.
  Set init value: \reg25 = 12'000000000000
Found init rule in `\top.$proc$rtl.v:42$365'.
  Set init value: \reg26 = 16'0000000000000000
Found init rule in `\top.$proc$rtl.v:41$364'.
  Set init value: \reg27 = 8'00000000
Found init rule in `\top.$proc$rtl.v:36$363'.
  Set init value: \reg32 = 5'00000
Found init rule in `\top.$proc$rtl.v:35$362'.
  Set init value: \reg33 = 7'0000000
Found init rule in `\top.$proc$rtl.v:32$361'.
  Set init value: \reg178 = 12'000000000000
Found init rule in `\top.$proc$rtl.v:31$360'.
  Set init value: \reg179 = 12'000000000000
Found init rule in `\top.$proc$rtl.v:30$359'.
  Set init value: \reg180 = 4'0000
Found init rule in `\top.$proc$rtl.v:29$358'.
  Set init value: \reg181 = 20'00000000000000000000
Found init rule in `\top.$proc$rtl.v:28$357'.
  Set init value: \reg182 = 19'0000000000000000000
Found init rule in `\top.$proc$rtl.v:27$356'.
  Set init value: \reg183 = 3'000
Found init rule in `\top.$proc$rtl.v:26$355'.
  Set init value: \reg184 = 13'0000000000000
Found init rule in `\top.$proc$rtl.v:25$354'.
  Set init value: \reg185 = 11'00000000000
Found init rule in `\top.$proc$rtl.v:24$353'.
  Set init value: \reg186 = 9'000000000
Found init rule in `\top.$proc$rtl.v:23$352'.
  Set init value: \reg187 = 5'00000
Found init rule in `\top.$proc$rtl.v:22$351'.
  Set init value: \reg188 = 11'00000000000
Found init rule in `\top.$proc$rtl.v:21$350'.
  Set init value: \reg189 = 5'00000
Found init rule in `\top.$proc$rtl.v:20$349'.
  Set init value: \reg190 = 6'000000
Found init rule in `\top.$proc$rtl.v:19$348'.
  Set init value: \reg191 = 9'000000000
Found init rule in `\top.$proc$rtl.v:18$347'.
  Set init value: \reg192 = 20'00000000000000000000
Found init rule in `\top.$proc$rtl.v:17$346'.
  Set init value: \reg193 = 12'000000000000
Found init rule in `\top.$proc$rtl.v:14$345'.
  Set init value: \reg196 = 9'000000000
Found init rule in `\top.$proc$rtl.v:13$344'.
  Set init value: \reg197 = 9'000000000

2.2.4. Executing PROC_ARST pass (detect async resets in processes).

2.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\module85.$proc$rtl.v:588$981'.
     1/1: $1\reg93[16:0]
Creating decoders for process `\module85.$proc$rtl.v:587$980'.
     1/1: $1\reg94[14:0]
Creating decoders for process `\module85.$proc$rtl.v:586$979'.
     1/1: $1\reg95[13:0]
Creating decoders for process `\module85.$proc$rtl.v:585$978'.
     1/1: $1\reg96[14:0]
Creating decoders for process `\module85.$proc$rtl.v:584$977'.
     1/1: $1\reg97[11:0]
Creating decoders for process `\module85.$proc$rtl.v:583$976'.
     1/1: $1\reg98[17:0]
Creating decoders for process `\module85.$proc$rtl.v:582$975'.
     1/1: $1\reg99[18:0]
Creating decoders for process `\module85.$proc$rtl.v:581$974'.
     1/1: $1\reg100[2:0]
Creating decoders for process `\module85.$proc$rtl.v:580$973'.
     1/1: $1\reg101[13:0]
Creating decoders for process `\module85.$proc$rtl.v:579$972'.
     1/1: $1\reg102[15:0]
Creating decoders for process `\module85.$proc$rtl.v:578$971'.
     1/1: $1\reg103[16:0]
Creating decoders for process `\module85.$proc$rtl.v:577$970'.
     1/1: $1\reg104[15:0]
Creating decoders for process `\module85.$proc$rtl.v:576$969'.
     1/1: $1\reg105[12:0]
Creating decoders for process `\module85.$proc$rtl.v:575$968'.
     1/1: $1\reg106[4:0]
Creating decoders for process `\module85.$proc$rtl.v:571$967'.
     1/1: $1\reg110[9:0]
Creating decoders for process `\module85.$proc$rtl.v:570$966'.
     1/1: $1\reg111[11:0]
Creating decoders for process `\module85.$proc$rtl.v:569$965'.
     1/1: $1\reg112[8:0]
Creating decoders for process `\module85.$proc$rtl.v:568$964'.
     1/1: $1\reg113[14:0]
Creating decoders for process `\module85.$proc$rtl.v:567$963'.
     1/1: $1\reg114[6:0]
Creating decoders for process `\module85.$proc$rtl.v:563$962'.
     1/1: $1\reg118[10:0]
Creating decoders for process `\module85.$proc$rtl.v:562$961'.
     1/1: $1\reg119[15:0]
Creating decoders for process `\module85.$proc$rtl.v:561$960'.
     1/1: $1\reg120[9:0]
Creating decoders for process `\module85.$proc$rtl.v:560$959'.
     1/1: $1\reg121[10:0]
Creating decoders for process `\module85.$proc$rtl.v:559$958'.
     1/1: $1\reg122[9:0]
Creating decoders for process `\module85.$proc$rtl.v:558$957'.
     1/1: $1\reg123[12:0]
Creating decoders for process `\module85.$proc$rtl.v:557$956'.
     1/1: $1\reg124[15:0]
Creating decoders for process `\module85.$proc$rtl.v:556$955'.
     1/1: $1\reg125[18:0]
Creating decoders for process `\module85.$proc$rtl.v:555$954'.
     1/1: $1\reg126[6:0]
Creating decoders for process `\module85.$proc$rtl.v:554$953'.
     1/1: $1\reg127[14:0]
Creating decoders for process `\module85.$proc$rtl.v:553$952'.
     1/1: $1\reg128[8:0]
Creating decoders for process `\module85.$proc$rtl.v:552$951'.
     1/1: $1\reg129[7:0]
Creating decoders for process `\module85.$proc$rtl.v:551$950'.
     1/1: $1\reg130[10:0]
Creating decoders for process `\module85.$proc$rtl.v:550$949'.
     1/1: $1\reg131[8:0]
Creating decoders for process `\module85.$proc$rtl.v:549$948'.
     1/1: $1\reg132[17:0]
Creating decoders for process `\module85.$proc$rtl.v:548$947'.
     1/1: $1\reg133[12:0]
Creating decoders for process `\module85.$proc$rtl.v:547$946'.
     1/1: $1\reg134[4:0]
Creating decoders for process `\module85.$proc$rtl.v:546$945'.
     1/1: $1\reg135[16:0]
Creating decoders for process `\module85.$proc$rtl.v:545$944'.
     1/1: $1\reg136[14:0]
Creating decoders for process `\module85.$proc$rtl.v:544$943'.
     1/1: $1\reg137[4:0]
Creating decoders for process `\module85.$proc$rtl.v:536$942'.
     1/1: $1\reg145[19:0]
Creating decoders for process `\module85.$proc$rtl.v:535$941'.
     1/1: $1\reg146[2:0]
Creating decoders for process `\module85.$proc$rtl.v:914$926'.
     1/2: $0\reg146[2:0]
     2/2: $0\reg145[19:0]
Creating decoders for process `\module85.$proc$rtl.v:776$712'.
     1/20: $0\reg127[14:0]
     2/20: $0\reg119[15:0]
     3/20: $0\reg118[10:0]
     4/20: $0\reg120[9:0]
     5/20: $0\reg121[10:0]
     6/20: $0\reg122[9:0]
     7/20: $0\reg123[12:0]
     8/20: $0\reg124[15:0]
     9/20: $0\reg125[18:0]
    10/20: $0\reg126[6:0]
    11/20: $0\reg128[8:0]
    12/20: $0\reg129[7:0]
    13/20: $0\reg130[10:0]
    14/20: $0\reg131[8:0]
    15/20: $0\reg132[17:0]
    16/20: $0\reg133[12:0]
    17/20: $0\reg134[4:0]
    18/20: $0\reg135[16:0]
    19/20: $0\reg136[14:0]
    20/20: $0\reg137[4:0]
Creating decoders for process `\module85.$proc$rtl.v:735$644'.
     1/5: $0\reg111[11:0]
     2/5: $0\reg110[9:0]
     3/5: $0\reg112[8:0]
     4/5: $0\reg113[14:0]
     5/5: $0\reg114[6:0]
Creating decoders for process `\module85.$proc$rtl.v:654$540'.
     1/14: $0\reg93[16:0]
     2/14: $0\reg94[14:0]
     3/14: $0\reg95[13:0]
     4/14: $0\reg96[14:0]
     5/14: $0\reg97[11:0]
     6/14: $0\reg98[17:0]
     7/14: $0\reg99[18:0]
     8/14: $0\reg100[2:0]
     9/14: $0\reg101[13:0]
    10/14: $0\reg102[15:0]
    11/14: $0\reg103[16:0]
    12/14: $0\reg104[15:0]
    13/14: $0\reg105[12:0]
    14/14: $0\reg106[4:0]
Creating decoders for process `\module156.$proc$rtl.v:486$539'.
     1/1: $1\reg166[16:0]
Creating decoders for process `\module156.$proc$rtl.v:485$538'.
     1/1: $1\reg167[7:0]
Creating decoders for process `\module156.$proc$rtl.v:512$537'.
     1/2: $0\reg167[7:0]
     2/2: $0\reg166[16:0]
Creating decoders for process `\module35.$proc$rtl.v:363$520'.
     1/1: $1\reg55[6:0]
Creating decoders for process `\module35.$proc$rtl.v:362$519'.
     1/1: $1\reg54[12:0]
Creating decoders for process `\module35.$proc$rtl.v:361$518'.
     1/1: $1\reg53[14:0]
Creating decoders for process `\module35.$proc$rtl.v:360$517'.
     1/1: $1\reg52[17:0]
Creating decoders for process `\module35.$proc$rtl.v:359$516'.
     1/1: $1\reg51[5:0]
Creating decoders for process `\module35.$proc$rtl.v:358$515'.
     1/1: $1\reg50[19:0]
Creating decoders for process `\module35.$proc$rtl.v:357$514'.
     1/1: $1\reg49[15:0]
Creating decoders for process `\module35.$proc$rtl.v:356$513'.
     1/1: $1\reg48[18:0]
Creating decoders for process `\module35.$proc$rtl.v:355$512'.
     1/1: $1\reg47[8:0]
Creating decoders for process `\module35.$proc$rtl.v:354$511'.
     1/1: $1\reg46[7:0]
Creating decoders for process `\module35.$proc$rtl.v:353$510'.
     1/1: $1\reg45[7:0]
Creating decoders for process `\module35.$proc$rtl.v:352$509'.
     1/1: $1\reg44[18:0]
Creating decoders for process `\module35.$proc$rtl.v:351$508'.
     1/1: $1\reg43[6:0]
Creating decoders for process `\module35.$proc$rtl.v:350$507'.
     1/1: $1\reg42[20:0]
Creating decoders for process `\module35.$proc$rtl.v:349$506'.
     1/1: $1\reg41[18:0]
Creating decoders for process `\module35.$proc$rtl.v:348$505'.
     1/1: $1\reg40[21:0]
Creating decoders for process `\module35.$proc$rtl.v:390$382'.
     1/16: $0\reg55[6:0]
     2/16: $0\reg54[12:0]
     3/16: $0\reg53[14:0]
     4/16: $0\reg52[17:0]
     5/16: $0\reg51[5:0]
     6/16: $0\reg50[19:0]
     7/16: $0\reg49[15:0]
     8/16: $0\reg48[18:0]
     9/16: $0\reg47[8:0]
    10/16: $0\reg46[7:0]
    11/16: $0\reg45[7:0]
    12/16: $0\reg44[18:0]
    13/16: $0\reg43[6:0]
    14/16: $0\reg42[20:0]
    15/16: $0\reg41[18:0]
    16/16: $0\reg40[21:0]
Creating decoders for process `\top.$proc$rtl.v:58$381'.
     1/1: $1\reg10[5:0]
Creating decoders for process `\top.$proc$rtl.v:57$380'.
     1/1: $1\reg11[3:0]
Creating decoders for process `\top.$proc$rtl.v:56$379'.
     1/1: $1\reg12[7:0]
Creating decoders for process `\top.$proc$rtl.v:55$378'.
     1/1: $1\reg13[6:0]
Creating decoders for process `\top.$proc$rtl.v:54$377'.
     1/1: $1\reg14[12:0]
Creating decoders for process `\top.$proc$rtl.v:53$376'.
     1/1: $1\reg15[2:0]
Creating decoders for process `\top.$proc$rtl.v:52$375'.
     1/1: $1\reg16[14:0]
Creating decoders for process `\top.$proc$rtl.v:51$374'.
     1/1: $1\reg17[13:0]
Creating decoders for process `\top.$proc$rtl.v:50$373'.
     1/1: $1\reg18[5:0]
Creating decoders for process `\top.$proc$rtl.v:49$372'.
     1/1: $1\reg19[4:0]
Creating decoders for process `\top.$proc$rtl.v:48$371'.
     1/1: $1\reg20[9:0]
Creating decoders for process `\top.$proc$rtl.v:47$370'.
     1/1: $1\reg21[12:0]
Creating decoders for process `\top.$proc$rtl.v:46$369'.
     1/1: $1\reg22[21:0]
Creating decoders for process `\top.$proc$rtl.v:45$368'.
     1/1: $1\reg23[7:0]
Creating decoders for process `\top.$proc$rtl.v:44$367'.
     1/1: $1\reg24[11:0]
Creating decoders for process `\top.$proc$rtl.v:43$366'.
     1/1: $1\reg25[11:0]
Creating decoders for process `\top.$proc$rtl.v:42$365'.
     1/1: $1\reg26[15:0]
Creating decoders for process `\top.$proc$rtl.v:41$364'.
     1/1: $1\reg27[7:0]
Creating decoders for process `\top.$proc$rtl.v:36$363'.
     1/1: $1\reg32[4:0]
Creating decoders for process `\top.$proc$rtl.v:35$362'.
     1/1: $1\reg33[6:0]
Creating decoders for process `\top.$proc$rtl.v:32$361'.
     1/1: $1\reg178[11:0]
Creating decoders for process `\top.$proc$rtl.v:31$360'.
     1/1: $1\reg179[11:0]
Creating decoders for process `\top.$proc$rtl.v:30$359'.
     1/1: $1\reg180[3:0]
Creating decoders for process `\top.$proc$rtl.v:29$358'.
     1/1: $1\reg181[19:0]
Creating decoders for process `\top.$proc$rtl.v:28$357'.
     1/1: $1\reg182[18:0]
Creating decoders for process `\top.$proc$rtl.v:27$356'.
     1/1: $1\reg183[2:0]
Creating decoders for process `\top.$proc$rtl.v:26$355'.
     1/1: $1\reg184[12:0]
Creating decoders for process `\top.$proc$rtl.v:25$354'.
     1/1: $1\reg185[10:0]
Creating decoders for process `\top.$proc$rtl.v:24$353'.
     1/1: $1\reg186[8:0]
Creating decoders for process `\top.$proc$rtl.v:23$352'.
     1/1: $1\reg187[4:0]
Creating decoders for process `\top.$proc$rtl.v:22$351'.
     1/1: $1\reg188[10:0]
Creating decoders for process `\top.$proc$rtl.v:21$350'.
     1/1: $1\reg189[4:0]
Creating decoders for process `\top.$proc$rtl.v:20$349'.
     1/1: $1\reg190[5:0]
Creating decoders for process `\top.$proc$rtl.v:19$348'.
     1/1: $1\reg191[8:0]
Creating decoders for process `\top.$proc$rtl.v:18$347'.
     1/1: $1\reg192[19:0]
Creating decoders for process `\top.$proc$rtl.v:17$346'.
     1/1: $1\reg193[11:0]
Creating decoders for process `\top.$proc$rtl.v:14$345'.
     1/1: $1\reg196[8:0]
Creating decoders for process `\top.$proc$rtl.v:13$344'.
     1/1: $1\reg197[8:0]
Creating decoders for process `\top.$proc$rtl.v:321$327'.
     1/2: $0\reg197[8:0]
     2/2: $0\reg196[8:0]
Creating decoders for process `\top.$proc$rtl.v:236$185'.
     1/16: $0\reg179[11:0]
     2/16: $0\reg178[11:0]
     3/16: $0\reg180[3:0]
     4/16: $0\reg181[19:0]
     5/16: $0\reg182[18:0]
     6/16: $0\reg183[2:0]
     7/16: $0\reg184[12:0]
     8/16: $0\reg185[10:0]
     9/16: $0\reg186[8:0]
    10/16: $0\reg187[4:0]
    11/16: $0\reg188[10:0]
    12/16: $0\reg189[4:0]
    13/16: $0\reg190[5:0]
    14/16: $0\reg191[8:0]
    15/16: $0\reg192[19:0]
    16/16: $0\reg193[11:0]
Creating decoders for process `\top.$proc$rtl.v:228$180'.
     1/2: $0\reg33[6:0]
     2/2: $0\reg32[4:0]
Creating decoders for process `\top.$proc$rtl.v:124$16'.
     1/18: $0\reg19[4:0]
     2/18: $0\reg10[5:0]
     3/18: $0\reg11[3:0]
     4/18: $0\reg12[7:0]
     5/18: $0\reg13[6:0]
     6/18: $0\reg14[12:0]
     7/18: $0\reg15[2:0]
     8/18: $0\reg16[14:0]
     9/18: $0\reg17[13:0]
    10/18: $0\reg18[5:0]
    11/18: $0\reg20[9:0]
    12/18: $0\reg21[12:0]
    13/18: $0\reg22[21:0]
    14/18: $0\reg23[7:0]
    15/18: $0\reg24[11:0]
    16/18: $0\reg25[11:0]
    17/18: $0\reg26[15:0]
    18/18: $0\reg27[7:0]

2.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\module85.\reg145' using process `\module85.$proc$rtl.v:914$926'.
  created $dff cell `$procdff$1450' with positive edge clock.
Creating register for signal `\module85.\reg146' using process `\module85.$proc$rtl.v:914$926'.
  created $dff cell `$procdff$1451' with positive edge clock.
Creating register for signal `\module85.\reg137' using process `\module85.$proc$rtl.v:776$712'.
  created $dff cell `$procdff$1452' with positive edge clock.
Creating register for signal `\module85.\reg136' using process `\module85.$proc$rtl.v:776$712'.
  created $dff cell `$procdff$1453' with positive edge clock.
Creating register for signal `\module85.\reg135' using process `\module85.$proc$rtl.v:776$712'.
  created $dff cell `$procdff$1454' with positive edge clock.
Creating register for signal `\module85.\reg134' using process `\module85.$proc$rtl.v:776$712'.
  created $dff cell `$procdff$1455' with positive edge clock.
Creating register for signal `\module85.\reg133' using process `\module85.$proc$rtl.v:776$712'.
  created $dff cell `$procdff$1456' with positive edge clock.
Creating register for signal `\module85.\reg132' using process `\module85.$proc$rtl.v:776$712'.
  created $dff cell `$procdff$1457' with positive edge clock.
Creating register for signal `\module85.\reg131' using process `\module85.$proc$rtl.v:776$712'.
  created $dff cell `$procdff$1458' with positive edge clock.
Creating register for signal `\module85.\reg130' using process `\module85.$proc$rtl.v:776$712'.
  created $dff cell `$procdff$1459' with positive edge clock.
Creating register for signal `\module85.\reg129' using process `\module85.$proc$rtl.v:776$712'.
  created $dff cell `$procdff$1460' with positive edge clock.
Creating register for signal `\module85.\reg128' using process `\module85.$proc$rtl.v:776$712'.
  created $dff cell `$procdff$1461' with positive edge clock.
Creating register for signal `\module85.\reg127' using process `\module85.$proc$rtl.v:776$712'.
  created $dff cell `$procdff$1462' with positive edge clock.
Creating register for signal `\module85.\reg126' using process `\module85.$proc$rtl.v:776$712'.
  created $dff cell `$procdff$1463' with positive edge clock.
Creating register for signal `\module85.\reg125' using process `\module85.$proc$rtl.v:776$712'.
  created $dff cell `$procdff$1464' with positive edge clock.
Creating register for signal `\module85.\reg124' using process `\module85.$proc$rtl.v:776$712'.
  created $dff cell `$procdff$1465' with positive edge clock.
Creating register for signal `\module85.\reg123' using process `\module85.$proc$rtl.v:776$712'.
  created $dff cell `$procdff$1466' with positive edge clock.
Creating register for signal `\module85.\reg122' using process `\module85.$proc$rtl.v:776$712'.
  created $dff cell `$procdff$1467' with positive edge clock.
Creating register for signal `\module85.\reg121' using process `\module85.$proc$rtl.v:776$712'.
  created $dff cell `$procdff$1468' with positive edge clock.
Creating register for signal `\module85.\reg120' using process `\module85.$proc$rtl.v:776$712'.
  created $dff cell `$procdff$1469' with positive edge clock.
Creating register for signal `\module85.\reg119' using process `\module85.$proc$rtl.v:776$712'.
  created $dff cell `$procdff$1470' with positive edge clock.
Creating register for signal `\module85.\reg118' using process `\module85.$proc$rtl.v:776$712'.
  created $dff cell `$procdff$1471' with positive edge clock.
Creating register for signal `\module85.\reg114' using process `\module85.$proc$rtl.v:735$644'.
  created $dff cell `$procdff$1472' with positive edge clock.
Creating register for signal `\module85.\reg113' using process `\module85.$proc$rtl.v:735$644'.
  created $dff cell `$procdff$1473' with positive edge clock.
Creating register for signal `\module85.\reg112' using process `\module85.$proc$rtl.v:735$644'.
  created $dff cell `$procdff$1474' with positive edge clock.
Creating register for signal `\module85.\reg111' using process `\module85.$proc$rtl.v:735$644'.
  created $dff cell `$procdff$1475' with positive edge clock.
Creating register for signal `\module85.\reg110' using process `\module85.$proc$rtl.v:735$644'.
  created $dff cell `$procdff$1476' with positive edge clock.
Creating register for signal `\module85.\reg106' using process `\module85.$proc$rtl.v:654$540'.
  created $dff cell `$procdff$1477' with positive edge clock.
Creating register for signal `\module85.\reg105' using process `\module85.$proc$rtl.v:654$540'.
  created $dff cell `$procdff$1478' with positive edge clock.
Creating register for signal `\module85.\reg104' using process `\module85.$proc$rtl.v:654$540'.
  created $dff cell `$procdff$1479' with positive edge clock.
Creating register for signal `\module85.\reg103' using process `\module85.$proc$rtl.v:654$540'.
  created $dff cell `$procdff$1480' with positive edge clock.
Creating register for signal `\module85.\reg102' using process `\module85.$proc$rtl.v:654$540'.
  created $dff cell `$procdff$1481' with positive edge clock.
Creating register for signal `\module85.\reg101' using process `\module85.$proc$rtl.v:654$540'.
  created $dff cell `$procdff$1482' with positive edge clock.
Creating register for signal `\module85.\reg100' using process `\module85.$proc$rtl.v:654$540'.
  created $dff cell `$procdff$1483' with positive edge clock.
Creating register for signal `\module85.\reg99' using process `\module85.$proc$rtl.v:654$540'.
  created $dff cell `$procdff$1484' with positive edge clock.
Creating register for signal `\module85.\reg98' using process `\module85.$proc$rtl.v:654$540'.
  created $dff cell `$procdff$1485' with positive edge clock.
Creating register for signal `\module85.\reg97' using process `\module85.$proc$rtl.v:654$540'.
  created $dff cell `$procdff$1486' with positive edge clock.
Creating register for signal `\module85.\reg96' using process `\module85.$proc$rtl.v:654$540'.
  created $dff cell `$procdff$1487' with positive edge clock.
Creating register for signal `\module85.\reg95' using process `\module85.$proc$rtl.v:654$540'.
  created $dff cell `$procdff$1488' with positive edge clock.
Creating register for signal `\module85.\reg94' using process `\module85.$proc$rtl.v:654$540'.
  created $dff cell `$procdff$1489' with positive edge clock.
Creating register for signal `\module85.\reg93' using process `\module85.$proc$rtl.v:654$540'.
  created $dff cell `$procdff$1490' with positive edge clock.
Creating register for signal `\module156.\reg167' using process `\module156.$proc$rtl.v:512$537'.
  created $dff cell `$procdff$1491' with positive edge clock.
Creating register for signal `\module156.\reg166' using process `\module156.$proc$rtl.v:512$537'.
  created $dff cell `$procdff$1492' with positive edge clock.
Creating register for signal `\module35.\reg40' using process `\module35.$proc$rtl.v:390$382'.
  created $dff cell `$procdff$1493' with positive edge clock.
Creating register for signal `\module35.\reg41' using process `\module35.$proc$rtl.v:390$382'.
  created $dff cell `$procdff$1494' with positive edge clock.
Creating register for signal `\module35.\reg42' using process `\module35.$proc$rtl.v:390$382'.
  created $dff cell `$procdff$1495' with positive edge clock.
Creating register for signal `\module35.\reg43' using process `\module35.$proc$rtl.v:390$382'.
  created $dff cell `$procdff$1496' with positive edge clock.
Creating register for signal `\module35.\reg44' using process `\module35.$proc$rtl.v:390$382'.
  created $dff cell `$procdff$1497' with positive edge clock.
Creating register for signal `\module35.\reg45' using process `\module35.$proc$rtl.v:390$382'.
  created $dff cell `$procdff$1498' with positive edge clock.
Creating register for signal `\module35.\reg46' using process `\module35.$proc$rtl.v:390$382'.
  created $dff cell `$procdff$1499' with positive edge clock.
Creating register for signal `\module35.\reg47' using process `\module35.$proc$rtl.v:390$382'.
  created $dff cell `$procdff$1500' with positive edge clock.
Creating register for signal `\module35.\reg48' using process `\module35.$proc$rtl.v:390$382'.
  created $dff cell `$procdff$1501' with positive edge clock.
Creating register for signal `\module35.\reg49' using process `\module35.$proc$rtl.v:390$382'.
  created $dff cell `$procdff$1502' with positive edge clock.
Creating register for signal `\module35.\reg50' using process `\module35.$proc$rtl.v:390$382'.
  created $dff cell `$procdff$1503' with positive edge clock.
Creating register for signal `\module35.\reg51' using process `\module35.$proc$rtl.v:390$382'.
  created $dff cell `$procdff$1504' with positive edge clock.
Creating register for signal `\module35.\reg52' using process `\module35.$proc$rtl.v:390$382'.
  created $dff cell `$procdff$1505' with positive edge clock.
Creating register for signal `\module35.\reg53' using process `\module35.$proc$rtl.v:390$382'.
  created $dff cell `$procdff$1506' with positive edge clock.
Creating register for signal `\module35.\reg54' using process `\module35.$proc$rtl.v:390$382'.
  created $dff cell `$procdff$1507' with positive edge clock.
Creating register for signal `\module35.\reg55' using process `\module35.$proc$rtl.v:390$382'.
  created $dff cell `$procdff$1508' with positive edge clock.
Creating register for signal `\top.\reg197' using process `\top.$proc$rtl.v:321$327'.
  created $dff cell `$procdff$1509' with positive edge clock.
Creating register for signal `\top.\reg196' using process `\top.$proc$rtl.v:321$327'.
  created $dff cell `$procdff$1510' with positive edge clock.
Creating register for signal `\top.\reg193' using process `\top.$proc$rtl.v:236$185'.
  created $dff cell `$procdff$1511' with positive edge clock.
Creating register for signal `\top.\reg192' using process `\top.$proc$rtl.v:236$185'.
  created $dff cell `$procdff$1512' with positive edge clock.
Creating register for signal `\top.\reg191' using process `\top.$proc$rtl.v:236$185'.
  created $dff cell `$procdff$1513' with positive edge clock.
Creating register for signal `\top.\reg190' using process `\top.$proc$rtl.v:236$185'.
  created $dff cell `$procdff$1514' with positive edge clock.
Creating register for signal `\top.\reg189' using process `\top.$proc$rtl.v:236$185'.
  created $dff cell `$procdff$1515' with positive edge clock.
Creating register for signal `\top.\reg188' using process `\top.$proc$rtl.v:236$185'.
  created $dff cell `$procdff$1516' with positive edge clock.
Creating register for signal `\top.\reg187' using process `\top.$proc$rtl.v:236$185'.
  created $dff cell `$procdff$1517' with positive edge clock.
Creating register for signal `\top.\reg186' using process `\top.$proc$rtl.v:236$185'.
  created $dff cell `$procdff$1518' with positive edge clock.
Creating register for signal `\top.\reg185' using process `\top.$proc$rtl.v:236$185'.
  created $dff cell `$procdff$1519' with positive edge clock.
Creating register for signal `\top.\reg184' using process `\top.$proc$rtl.v:236$185'.
  created $dff cell `$procdff$1520' with positive edge clock.
Creating register for signal `\top.\reg183' using process `\top.$proc$rtl.v:236$185'.
  created $dff cell `$procdff$1521' with positive edge clock.
Creating register for signal `\top.\reg182' using process `\top.$proc$rtl.v:236$185'.
  created $dff cell `$procdff$1522' with positive edge clock.
Creating register for signal `\top.\reg181' using process `\top.$proc$rtl.v:236$185'.
  created $dff cell `$procdff$1523' with positive edge clock.
Creating register for signal `\top.\reg180' using process `\top.$proc$rtl.v:236$185'.
  created $dff cell `$procdff$1524' with positive edge clock.
Creating register for signal `\top.\reg179' using process `\top.$proc$rtl.v:236$185'.
  created $dff cell `$procdff$1525' with positive edge clock.
Creating register for signal `\top.\reg178' using process `\top.$proc$rtl.v:236$185'.
  created $dff cell `$procdff$1526' with positive edge clock.
Creating register for signal `\top.\reg33' using process `\top.$proc$rtl.v:228$180'.
  created $dff cell `$procdff$1527' with positive edge clock.
Creating register for signal `\top.\reg32' using process `\top.$proc$rtl.v:228$180'.
  created $dff cell `$procdff$1528' with positive edge clock.
Creating register for signal `\top.\reg27' using process `\top.$proc$rtl.v:124$16'.
  created $dff cell `$procdff$1529' with positive edge clock.
Creating register for signal `\top.\reg26' using process `\top.$proc$rtl.v:124$16'.
  created $dff cell `$procdff$1530' with positive edge clock.
Creating register for signal `\top.\reg25' using process `\top.$proc$rtl.v:124$16'.
  created $dff cell `$procdff$1531' with positive edge clock.
Creating register for signal `\top.\reg24' using process `\top.$proc$rtl.v:124$16'.
  created $dff cell `$procdff$1532' with positive edge clock.
Creating register for signal `\top.\reg23' using process `\top.$proc$rtl.v:124$16'.
  created $dff cell `$procdff$1533' with positive edge clock.
Creating register for signal `\top.\reg22' using process `\top.$proc$rtl.v:124$16'.
  created $dff cell `$procdff$1534' with positive edge clock.
Creating register for signal `\top.\reg21' using process `\top.$proc$rtl.v:124$16'.
  created $dff cell `$procdff$1535' with positive edge clock.
Creating register for signal `\top.\reg20' using process `\top.$proc$rtl.v:124$16'.
  created $dff cell `$procdff$1536' with positive edge clock.
Creating register for signal `\top.\reg19' using process `\top.$proc$rtl.v:124$16'.
  created $dff cell `$procdff$1537' with positive edge clock.
Creating register for signal `\top.\reg18' using process `\top.$proc$rtl.v:124$16'.
  created $dff cell `$procdff$1538' with positive edge clock.
Creating register for signal `\top.\reg17' using process `\top.$proc$rtl.v:124$16'.
  created $dff cell `$procdff$1539' with positive edge clock.
Creating register for signal `\top.\reg16' using process `\top.$proc$rtl.v:124$16'.
  created $dff cell `$procdff$1540' with positive edge clock.
Creating register for signal `\top.\reg15' using process `\top.$proc$rtl.v:124$16'.
  created $dff cell `$procdff$1541' with positive edge clock.
Creating register for signal `\top.\reg14' using process `\top.$proc$rtl.v:124$16'.
  created $dff cell `$procdff$1542' with positive edge clock.
Creating register for signal `\top.\reg13' using process `\top.$proc$rtl.v:124$16'.
  created $dff cell `$procdff$1543' with positive edge clock.
Creating register for signal `\top.\reg12' using process `\top.$proc$rtl.v:124$16'.
  created $dff cell `$procdff$1544' with positive edge clock.
Creating register for signal `\top.\reg11' using process `\top.$proc$rtl.v:124$16'.
  created $dff cell `$procdff$1545' with positive edge clock.
Creating register for signal `\top.\reg10' using process `\top.$proc$rtl.v:124$16'.
  created $dff cell `$procdff$1546' with positive edge clock.

2.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `module85.$proc$rtl.v:588$981'.
Removing empty process `module85.$proc$rtl.v:587$980'.
Removing empty process `module85.$proc$rtl.v:586$979'.
Removing empty process `module85.$proc$rtl.v:585$978'.
Removing empty process `module85.$proc$rtl.v:584$977'.
Removing empty process `module85.$proc$rtl.v:583$976'.
Removing empty process `module85.$proc$rtl.v:582$975'.
Removing empty process `module85.$proc$rtl.v:581$974'.
Removing empty process `module85.$proc$rtl.v:580$973'.
Removing empty process `module85.$proc$rtl.v:579$972'.
Removing empty process `module85.$proc$rtl.v:578$971'.
Removing empty process `module85.$proc$rtl.v:577$970'.
Removing empty process `module85.$proc$rtl.v:576$969'.
Removing empty process `module85.$proc$rtl.v:575$968'.
Removing empty process `module85.$proc$rtl.v:571$967'.
Removing empty process `module85.$proc$rtl.v:570$966'.
Removing empty process `module85.$proc$rtl.v:569$965'.
Removing empty process `module85.$proc$rtl.v:568$964'.
Removing empty process `module85.$proc$rtl.v:567$963'.
Removing empty process `module85.$proc$rtl.v:563$962'.
Removing empty process `module85.$proc$rtl.v:562$961'.
Removing empty process `module85.$proc$rtl.v:561$960'.
Removing empty process `module85.$proc$rtl.v:560$959'.
Removing empty process `module85.$proc$rtl.v:559$958'.
Removing empty process `module85.$proc$rtl.v:558$957'.
Removing empty process `module85.$proc$rtl.v:557$956'.
Removing empty process `module85.$proc$rtl.v:556$955'.
Removing empty process `module85.$proc$rtl.v:555$954'.
Removing empty process `module85.$proc$rtl.v:554$953'.
Removing empty process `module85.$proc$rtl.v:553$952'.
Removing empty process `module85.$proc$rtl.v:552$951'.
Removing empty process `module85.$proc$rtl.v:551$950'.
Removing empty process `module85.$proc$rtl.v:550$949'.
Removing empty process `module85.$proc$rtl.v:549$948'.
Removing empty process `module85.$proc$rtl.v:548$947'.
Removing empty process `module85.$proc$rtl.v:547$946'.
Removing empty process `module85.$proc$rtl.v:546$945'.
Removing empty process `module85.$proc$rtl.v:545$944'.
Removing empty process `module85.$proc$rtl.v:544$943'.
Removing empty process `module85.$proc$rtl.v:536$942'.
Removing empty process `module85.$proc$rtl.v:535$941'.
Removing empty process `module85.$proc$rtl.v:914$926'.
Found and cleaned up 7 empty switches in `\module85.$proc$rtl.v:776$712'.
Removing empty process `module85.$proc$rtl.v:776$712'.
Found and cleaned up 1 empty switch in `\module85.$proc$rtl.v:735$644'.
Removing empty process `module85.$proc$rtl.v:735$644'.
Found and cleaned up 5 empty switches in `\module85.$proc$rtl.v:654$540'.
Removing empty process `module85.$proc$rtl.v:654$540'.
Removing empty process `module156.$proc$rtl.v:486$539'.
Removing empty process `module156.$proc$rtl.v:485$538'.
Removing empty process `module156.$proc$rtl.v:512$537'.
Removing empty process `module35.$proc$rtl.v:363$520'.
Removing empty process `module35.$proc$rtl.v:362$519'.
Removing empty process `module35.$proc$rtl.v:361$518'.
Removing empty process `module35.$proc$rtl.v:360$517'.
Removing empty process `module35.$proc$rtl.v:359$516'.
Removing empty process `module35.$proc$rtl.v:358$515'.
Removing empty process `module35.$proc$rtl.v:357$514'.
Removing empty process `module35.$proc$rtl.v:356$513'.
Removing empty process `module35.$proc$rtl.v:355$512'.
Removing empty process `module35.$proc$rtl.v:354$511'.
Removing empty process `module35.$proc$rtl.v:353$510'.
Removing empty process `module35.$proc$rtl.v:352$509'.
Removing empty process `module35.$proc$rtl.v:351$508'.
Removing empty process `module35.$proc$rtl.v:350$507'.
Removing empty process `module35.$proc$rtl.v:349$506'.
Removing empty process `module35.$proc$rtl.v:348$505'.
Found and cleaned up 4 empty switches in `\module35.$proc$rtl.v:390$382'.
Removing empty process `module35.$proc$rtl.v:390$382'.
Removing empty process `top.$proc$rtl.v:58$381'.
Removing empty process `top.$proc$rtl.v:57$380'.
Removing empty process `top.$proc$rtl.v:56$379'.
Removing empty process `top.$proc$rtl.v:55$378'.
Removing empty process `top.$proc$rtl.v:54$377'.
Removing empty process `top.$proc$rtl.v:53$376'.
Removing empty process `top.$proc$rtl.v:52$375'.
Removing empty process `top.$proc$rtl.v:51$374'.
Removing empty process `top.$proc$rtl.v:50$373'.
Removing empty process `top.$proc$rtl.v:49$372'.
Removing empty process `top.$proc$rtl.v:48$371'.
Removing empty process `top.$proc$rtl.v:47$370'.
Removing empty process `top.$proc$rtl.v:46$369'.
Removing empty process `top.$proc$rtl.v:45$368'.
Removing empty process `top.$proc$rtl.v:44$367'.
Removing empty process `top.$proc$rtl.v:43$366'.
Removing empty process `top.$proc$rtl.v:42$365'.
Removing empty process `top.$proc$rtl.v:41$364'.
Removing empty process `top.$proc$rtl.v:36$363'.
Removing empty process `top.$proc$rtl.v:35$362'.
Removing empty process `top.$proc$rtl.v:32$361'.
Removing empty process `top.$proc$rtl.v:31$360'.
Removing empty process `top.$proc$rtl.v:30$359'.
Removing empty process `top.$proc$rtl.v:29$358'.
Removing empty process `top.$proc$rtl.v:28$357'.
Removing empty process `top.$proc$rtl.v:27$356'.
Removing empty process `top.$proc$rtl.v:26$355'.
Removing empty process `top.$proc$rtl.v:25$354'.
Removing empty process `top.$proc$rtl.v:24$353'.
Removing empty process `top.$proc$rtl.v:23$352'.
Removing empty process `top.$proc$rtl.v:22$351'.
Removing empty process `top.$proc$rtl.v:21$350'.
Removing empty process `top.$proc$rtl.v:20$349'.
Removing empty process `top.$proc$rtl.v:19$348'.
Removing empty process `top.$proc$rtl.v:18$347'.
Removing empty process `top.$proc$rtl.v:17$346'.
Removing empty process `top.$proc$rtl.v:14$345'.
Removing empty process `top.$proc$rtl.v:13$344'.
Removing empty process `top.$proc$rtl.v:321$327'.
Found and cleaned up 4 empty switches in `\top.$proc$rtl.v:236$185'.
Removing empty process `top.$proc$rtl.v:236$185'.
Removing empty process `top.$proc$rtl.v:228$180'.
Found and cleaned up 5 empty switches in `\top.$proc$rtl.v:124$16'.
Removing empty process `top.$proc$rtl.v:124$16'.
Cleaned up 26 empty switches.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module module56.
<suppressed ~10 debug messages>
Optimizing module module85.
<suppressed ~51 debug messages>
Optimizing module module156.
<suppressed ~1 debug messages>
Optimizing module module35.
<suppressed ~12 debug messages>
Optimizing module top.
<suppressed ~32 debug messages>

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module56..
Finding unused cells or wires in module \module85..
Finding unused cells or wires in module \module156..
Finding unused cells or wires in module \module35..
Finding unused cells or wires in module \top..
Removed 76 unused cells and 627 unused wires.
<suppressed ~192 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
checking module module156..
checking module module35..
checking module module56..
checking module module85..
checking module top..
found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module156.
Optimizing module module35.
Optimizing module module56.
Optimizing module module85.
Optimizing module top.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module156'.
Finding identical cells in module `\module35'.
<suppressed ~15 debug messages>
Finding identical cells in module `\module56'.
Finding identical cells in module `\module85'.
<suppressed ~39 debug messages>
Finding identical cells in module `\top'.
<suppressed ~21 debug messages>
Removed a total of 25 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module156..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module35..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module56..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module85..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$1158.
    dead port 2/2 on $mux $procmux$1164.
    dead port 2/2 on $mux $procmux$1170.
    dead port 2/2 on $mux $procmux$1176.
    dead port 1/2 on $mux $ternary$rtl.v:683$556.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 5 multiplexer ports.
<suppressed ~181 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module156.
  Optimizing cells in module \module35.
    New input vector for $reduce_or cell $reduce_or$rtl.v:420$426: { \reg40 [0] \reg40 [1] \reg40 [2] \reg40 [3] \reg40 [4] \reg40 [5] \reg40 [6] \reg40 [7] \reg40 [8] \reg40 [9] \reg40 [10] \reg40 [11] \reg40 [12] \reg40 [13] \reg40 [14] \reg40 [15] \reg40 [16] \reg40 [17] \reg40 [18] \reg40 [19] \reg40 [20] \reg40 [21] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:407$404: { \wire39 [0] \wire39 [1] \wire39 [2] \wire39 [3] \wire39 [4] \wire39 [5] \wire39 [6] \wire39 [7] \wire39 [8] \wire39 [9] \wire39 [10] \wire39 [11] \wire39 [12] \wire39 [13] \wire39 [14] \wire39 [15] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:394$389: { \wire36 [0] \wire36 [1] \wire36 [2] \wire36 [3] \wire36 [4] \wire36 [5] \wire36 [6] \wire36 [7] \wire36 [8] \wire36 [9] \wire36 [10] \wire36 [11] \wire36 [12] \wire36 [13] \wire36 [14] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:467$498: { \wire36 [0] \wire36 [1] \wire36 [2] \wire36 [3] \wire36 [4] \wire36 [5] \wire36 [6] \wire36 [7] \wire36 [8] \wire36 [9] \wire36 [10] \wire36 [11] \wire36 [12] \wire36 [13] \wire36 [14] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:461$487: { \reg42 [4] \reg42 [5] \reg42 [6] \reg42 [7] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:458$476: { \wire38 [0] \wire38 [1] \wire38 [2] \wire38 [3] \wire38 [4] \wire38 [5] \wire38 [6] \wire38 [7] \wire38 [8] \wire38 [9] \wire38 [10] \wire38 [11] \wire38 [12] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:456$474: { \reg49 [0] \reg49 [1] \reg49 [2] \reg49 [3] \reg49 [4] \reg49 [5] \reg49 [6] \reg49 [7] \reg49 [8] \reg49 [9] \reg49 [10] \reg49 [11] \reg49 [12] \reg49 [13] \reg49 [14] \reg49 [15] }
  Optimizing cells in module \module35.
  Optimizing cells in module \module56.
    New input vector for $reduce_or cell $reduce_or$rtl.v:995$1009: { \wire57 [0] \wire57 [1] \wire57 [2] \wire57 [3] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:988$998: { \wire58 [0] \wire58 [1] \wire58 [2] \wire58 [3] \wire58 [4] \wire58 [5] \wire58 [6] \wire58 [7] \wire58 [8] \wire58 [9] \wire58 [10] \wire58 [11] \wire58 [12] \wire58 [13] \wire58 [14] \wire58 [15] \wire58 [16] \wire58 [17] \wire58 [18] \wire58 [19] \wire58 [20] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:980$984: { \wire61 [0] \wire61 [1] \wire61 [2] \wire61 [3] \wire61 [4] \wire61 [5] \wire61 [6] \wire61 [7] \wire61 [8] \wire61 [9] \wire61 [10] \wire61 [11] \wire61 [12] \wire61 [13] \wire61 [14] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:990$1004: { $sub$rtl.v:990$1003_Y [0] $sub$rtl.v:990$1003_Y [1] $sub$rtl.v:990$1003_Y [2] $sub$rtl.v:990$1003_Y [3] $sub$rtl.v:990$1003_Y [4] $sub$rtl.v:990$1003_Y [5] $sub$rtl.v:990$1003_Y [6] $sub$rtl.v:990$1003_Y [7] $sub$rtl.v:990$1003_Y [8] $sub$rtl.v:990$1003_Y [9] $sub$rtl.v:990$1003_Y [10] $sub$rtl.v:990$1003_Y [11] $sub$rtl.v:990$1003_Y [12] $sub$rtl.v:990$1003_Y [13] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:979$982: { \wire58 [0] \wire58 [1] \wire58 [2] \wire58 [3] \wire58 [4] \wire58 [5] \wire58 [6] \wire58 [7] \wire58 [8] \wire58 [9] \wire58 [10] \wire58 [11] \wire58 [12] \wire58 [13] \wire58 [14] \wire58 [15] \wire58 [16] \wire58 [17] \wire58 [18] \wire58 [19] \wire58 [20] }
  Optimizing cells in module \module56.
  Optimizing cells in module \module85.
    New input vector for $reduce_or cell $reduce_or$rtl.v:896$884: { \reg134 [0] \reg134 [1] \reg134 [2] \reg134 [3] \reg134 [4] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:835$803: { \reg125 [0] \reg125 [1] \reg125 [2] \reg125 [3] \reg125 [4] \reg125 [5] \reg125 [6] \reg125 [7] \reg125 [8] \reg125 [9] \reg125 [10] \reg125 [11] \reg125 [12] \reg125 [13] \reg125 [14] \reg125 [15] \reg125 [16] \reg125 [17] \reg125 [18] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:815$772: { \reg94 [0] \reg94 [1] \reg94 [2] \reg94 [3] \reg94 [4] \reg94 [5] \reg94 [6] \reg94 [7] \reg94 [8] \reg94 [9] \reg94 [10] \reg94 [11] \reg94 [12] \reg94 [13] \reg94 [14] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:780$724: { $not$rtl.v:780$723_Y [0] $not$rtl.v:780$723_Y [1] $not$rtl.v:780$723_Y [2] $not$rtl.v:780$723_Y [3] $not$rtl.v:780$723_Y [4] $not$rtl.v:780$723_Y [5] $not$rtl.v:780$723_Y [6] $not$rtl.v:780$723_Y [7] $not$rtl.v:780$723_Y [8] $not$rtl.v:780$723_Y [9] $not$rtl.v:780$723_Y [10] $not$rtl.v:780$723_Y [11] $not$rtl.v:780$723_Y [12] $not$rtl.v:780$723_Y [13] $not$rtl.v:780$723_Y [14] $not$rtl.v:780$723_Y [15] $not$rtl.v:780$723_Y [16] $not$rtl.v:780$723_Y [17] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:779$715: { \wire107 [0] \wire107 [1] \wire107 [2] \wire107 [3] \wire107 [4] \wire107 [5] \wire107 [6] \wire107 [7] \wire107 [8] \wire107 [9] \wire107 [10] \wire107 [11] \wire107 [12] \wire107 [13] \wire107 [14] \wire107 [18] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:733$637: { \reg99 [0] \reg99 [1] \reg99 [2] \reg99 [3] \reg99 [4] \reg99 [5] \reg99 [6] \reg99 [7] \reg99 [8] \reg99 [9] \reg99 [10] \reg99 [11] \reg99 [12] \reg99 [13] \reg99 [14] \reg99 [15] \reg99 [16] \reg99 [17] \reg99 [18] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:709$611: { \wire89 [0] \wire89 [1] \wire89 [2] \wire89 [3] \wire89 [4] \wire89 [5] \wire89 [6] \wire89 [7] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:704$600: { \reg98 [0] \reg98 [1] \reg98 [2] \reg98 [3] \reg98 [4] \reg98 [5] \reg98 [6] \reg98 [7] \reg98 [8] \reg98 [9] \reg98 [10] \reg98 [11] \reg98 [12] \reg98 [13] \reg98 [14] \reg98 [15] \reg98 [16] \reg98 [17] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:697$586: { \wire87 [0] \wire87 [1] \wire87 [2] \wire87 [3] \wire87 [4] \wire87 [5] \wire87 [6] \wire87 [7] \wire87 [8] \wire87 [9] \wire87 [10] \wire87 [11] \wire87 [12] \wire87 [13] \wire87 [14] \wire87 [15] \wire87 [16] \wire87 [17] \wire87 [18] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:696$584: { \reg100 [0] \reg100 [1] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:664$552: { $ternary$rtl.v:664$551_Y [0] $ternary$rtl.v:664$551_Y [1] $ternary$rtl.v:664$551_Y [2] $ternary$rtl.v:664$551_Y [3] $ternary$rtl.v:664$551_Y [4] $ternary$rtl.v:664$551_Y [5] $ternary$rtl.v:664$551_Y [6] $ternary$rtl.v:664$551_Y [7] $ternary$rtl.v:664$551_Y [8] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:843$819: { \reg101 [0] \reg101 [1] \reg101 [2] \reg101 [3] \reg101 [4] \reg101 [5] \reg101 [6] \reg101 [7] \reg101 [8] \reg101 [9] \reg101 [10] \reg101 [11] \reg101 [12] \reg101 [13] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:842$817: { \reg110 [0] \reg110 [1] \reg110 [2] \reg110 [3] \reg110 [4] \reg110 [5] \reg110 [6] \reg110 [7] \reg110 [8] \reg110 [9] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:836$805: { \reg125 [0] \reg125 [1] \reg125 [2] \reg125 [3] \reg125 [4] \reg125 [5] \reg125 [6] \reg125 [7] \reg125 [8] \reg125 [9] \reg125 [10] \reg125 [11] \reg125 [12] \reg125 [13] \reg125 [14] \reg125 [15] \reg125 [16] \reg125 [17] \reg125 [18] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:780$720: { $pos$rtl.v:780$719_Y [0] $pos$rtl.v:780$719_Y [1] $pos$rtl.v:780$719_Y [2] $pos$rtl.v:780$719_Y [3] $pos$rtl.v:780$719_Y [4] $pos$rtl.v:780$719_Y [5] $pos$rtl.v:780$719_Y [6] $pos$rtl.v:780$719_Y [7] $pos$rtl.v:780$719_Y [8] $pos$rtl.v:780$719_Y [9] $pos$rtl.v:780$719_Y [10] $pos$rtl.v:780$719_Y [11] $pos$rtl.v:780$719_Y [12] $pos$rtl.v:780$719_Y [13] $pos$rtl.v:780$719_Y [14] $pos$rtl.v:780$719_Y [15] $pos$rtl.v:780$719_Y [16] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:742$656: { $xnor$rtl.v:742$655_Y [0] $xnor$rtl.v:742$655_Y [1] $xnor$rtl.v:742$655_Y [2] $xnor$rtl.v:742$655_Y [3] $xnor$rtl.v:742$655_Y [4] $xnor$rtl.v:742$655_Y [5] $xnor$rtl.v:742$655_Y [6] $xnor$rtl.v:742$655_Y [7] $xnor$rtl.v:742$655_Y [8] $xnor$rtl.v:742$655_Y [9] $xnor$rtl.v:742$655_Y [10] $xnor$rtl.v:742$655_Y [11] $xnor$rtl.v:742$655_Y [12] $xnor$rtl.v:742$655_Y [13] $xnor$rtl.v:742$655_Y [14] $xnor$rtl.v:742$655_Y [15] $xnor$rtl.v:742$655_Y [16] $xnor$rtl.v:742$655_Y [17] $xnor$rtl.v:742$655_Y [18] $xnor$rtl.v:742$655_Y [19] }
  Optimizing cells in module \module85.
  Optimizing cells in module \top.
    New input vector for $reduce_or cell $reduce_or$rtl.v:315$317: { $or$rtl.v:315$316_Y [0] $or$rtl.v:315$316_Y [1] $or$rtl.v:315$316_Y [2] $or$rtl.v:315$316_Y [3] $or$rtl.v:315$316_Y [4] $or$rtl.v:315$316_Y [5] $or$rtl.v:315$316_Y [6] $or$rtl.v:315$316_Y [7] $or$rtl.v:315$316_Y [8] $or$rtl.v:315$316_Y [9] $or$rtl.v:315$316_Y [10] $or$rtl.v:315$316_Y [11] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:308$303: { $ternary$rtl.v:308$302_Y [0] $ternary$rtl.v:308$302_Y [1] $ternary$rtl.v:308$302_Y [2] $ternary$rtl.v:308$302_Y [3] $ternary$rtl.v:308$302_Y [4] $ternary$rtl.v:308$302_Y [5] $ternary$rtl.v:308$302_Y [6] $ternary$rtl.v:308$302_Y [7] $ternary$rtl.v:308$302_Y [8] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:238$187: { $shr$rtl.v:238$186_Y [0] $shr$rtl.v:238$186_Y [1] $shr$rtl.v:238$186_Y [2] $shr$rtl.v:238$186_Y [3] $shr$rtl.v:238$186_Y [4] $shr$rtl.v:238$186_Y [5] $shr$rtl.v:238$186_Y [6] $shr$rtl.v:238$186_Y [7] $shr$rtl.v:238$186_Y [8] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:234$183: { \reg15 [0] \reg15 [1] \reg15 [2] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:225$179: { \reg18 [0] \reg18 [1] \reg18 [2] \reg18 [3] \reg18 [4] \reg18 [5] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:203$139: { \reg11 [0] \reg11 [1] \reg11 [2] \reg11 [3] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:200$130: { \wire0 [5] \wire0 [6] \wire0 [7] \wire0 [8] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:176$97: { \reg18 [0] \reg18 [1] \reg18 [2] \reg18 [3] \reg18 [4] \reg18 [5] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:164$64: { \wire5 [2] \wire5 [3] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:160$55: { \reg18 [0] \reg18 [1] \reg18 [2] \reg18 [3] \reg18 [4] \reg18 [5] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:140$24: { \wire0 [0] \wire0 [1] \wire0 [2] \wire0 [3] \wire0 [4] \wire0 [5] \wire0 [6] \wire0 [7] \wire0 [8] \wire0 [9] \wire0 [10] \wire0 [11] \wire0 [12] \wire0 [13] \wire0 [14] \wire0 [15] \wire0 [16] \wire0 [17] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:128$18: { \wire2 [0] \wire2 [1] \wire2 [2] \wire2 [3] \wire2 [4] \wire2 [5] \wire2 [6] \wire2 [7] \wire2 [8] \wire2 [9] \wire2 [10] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:316$318: { \reg23 [0] \reg23 [1] \reg23 [2] \reg23 [3] \reg23 [4] \reg23 [5] \reg23 [6] \reg23 [7] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:315$314: { \reg180 [0] \reg180 [1] \reg180 [2] \reg180 [3] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:290$273: { $ternary$rtl.v:290$272_Y [0] $ternary$rtl.v:290$272_Y [1] $ternary$rtl.v:290$272_Y [2] $ternary$rtl.v:290$272_Y [3] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:275$243: { \reg180 [0] \reg180 [1] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:255$225: { \wire5 [0] \wire5 [1] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:201$135: { $ternary$rtl.v:201$134_Y [0] $ternary$rtl.v:201$134_Y [1] $ternary$rtl.v:201$134_Y [2] $ternary$rtl.v:201$134_Y [3] $ternary$rtl.v:201$134_Y [4] $ternary$rtl.v:201$134_Y [5] $ternary$rtl.v:201$134_Y [6] $ternary$rtl.v:201$134_Y [7] $ternary$rtl.v:201$134_Y [8] $ternary$rtl.v:201$134_Y [9] $ternary$rtl.v:201$134_Y [10] $ternary$rtl.v:201$134_Y [11] $ternary$rtl.v:201$134_Y [12] $ternary$rtl.v:201$134_Y [13] $ternary$rtl.v:201$134_Y [14] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:180$108: { \wire1 [0] \wire1 [1] \wire1 [2] \wire1 [3] \wire1 [4] \wire1 [5] \wire1 [6] \wire1 [7] \wire1 [8] \wire1 [9] \wire1 [10] \wire1 [11] \wire1 [12] \wire1 [13] \wire1 [14] \wire1 [15] \wire1 [16] $reduce_xnor$rtl.v:180$107_Y }
    New input vector for $reduce_and cell $reduce_and$rtl.v:177$104: { $ternary$rtl.v:177$103_Y [0] $ternary$rtl.v:177$103_Y [1] $ternary$rtl.v:177$103_Y [2] $ternary$rtl.v:177$103_Y [3] $ternary$rtl.v:177$103_Y [4] $ternary$rtl.v:177$103_Y [5] $ternary$rtl.v:177$103_Y [6] $ternary$rtl.v:177$103_Y [7] $ternary$rtl.v:177$103_Y [8] $ternary$rtl.v:177$103_Y [9] $ternary$rtl.v:177$103_Y [10] $ternary$rtl.v:177$103_Y [11] $ternary$rtl.v:177$103_Y [12] $ternary$rtl.v:177$103_Y [13] $ternary$rtl.v:177$103_Y [14] $ternary$rtl.v:177$103_Y [15] $ternary$rtl.v:177$103_Y [16] $ternary$rtl.v:177$103_Y [17] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:162$58: { \reg12 [0] \reg12 [1] \reg12 [2] \reg12 [3] \reg12 [4] \reg12 [5] \reg12 [6] \reg12 [7] }
  Optimizing cells in module \top.
Performed a total of 49 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module156'.
Finding identical cells in module `\module35'.
Finding identical cells in module `\module56'.
Finding identical cells in module `\module85'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.6. Executing OPT_RMDFF pass (remove dff with constant values).
Promoting init spec \reg145 = 20'00000000000000000000 to constant driver in module module85.
Promoting init spec \reg146 = 3'000 to constant driver in module module85.
Promoting init spec \reg197 = 9'000000000 to constant driver in module top.
Promoting init spec \reg196 = 9'000000000 to constant driver in module top.
Promoted 4 init specs to constant drivers.

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module156..
Finding unused cells or wires in module \module35..
Finding unused cells or wires in module \module56..
Finding unused cells or wires in module \module85..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 30 unused wires.
<suppressed ~3 debug messages>

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module156.
Optimizing module module35.
Optimizing module module56.
Optimizing module module85.
Optimizing module top.

2.6.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module156..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module35..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module56..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module85..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~181 debug messages>

2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module156.
  Optimizing cells in module \module35.
  Optimizing cells in module \module56.
  Optimizing cells in module \module85.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module156'.
Finding identical cells in module `\module35'.
Finding identical cells in module `\module56'.
Finding identical cells in module `\module85'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module156..
Finding unused cells or wires in module \module35..
Finding unused cells or wires in module \module56..
Finding unused cells or wires in module \module85..
Finding unused cells or wires in module \top..

2.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module156.
Optimizing module module35.
Optimizing module module56.
Optimizing module module85.
Optimizing module top.

2.6.16. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 11 bits (of 13) from port A of cell module156.$xnor$rtl.v:504$521 ($xnor).
Removed top 2 bits (of 13) from port B of cell module156.$xnor$rtl.v:504$521 ($xnor).
Removed top 4 bits (of 12) from port A of cell module156.$xor$rtl.v:505$522 ($xor).
Removed top 12 bits (of 21) from port B of cell module156.$or$rtl.v:508$526 ($or).
Removed top 12 bits (of 21) from mux cell module156.$ternary$rtl.v:509$529 ($mux).
Removed top 13 bits (of 21) from mux cell module156.$ternary$rtl.v:509$533 ($mux).
Removed top 3 bits (of 9) from port Y of cell module156.$xnor$rtl.v:510$535 ($xnor).
Removed top 11 bits (of 17) from port A of cell module156.$neg$rtl.v:511$536 ($neg).
Removed top 15 bits (of 17) from FF cell module156.$procdff$1492 ($dff).
Removed top 13 bits (of 21) from mux cell module156.$ternary$rtl.v:509$531 ($mux).
Removed top 13 bits (of 21) from port Y of cell module156.$or$rtl.v:508$526 ($or).
Removed top 13 bits (of 21) from port A of cell module156.$or$rtl.v:508$526 ($or).
Removed top 1 bits (of 9) from port B of cell module156.$or$rtl.v:508$526 ($or).
Removed top 1 bits (of 9) from mux cell module156.$ternary$rtl.v:509$529 ($mux).
Removed top 13 bits (of 21) from wire module156.$or$rtl.v:508$526_Y.
Removed top 13 bits (of 21) from wire module156.$ternary$rtl.v:509$529_Y.
Removed top 13 bits (of 21) from wire module156.$ternary$rtl.v:509$531_Y.
Removed top 3 bits (of 9) from wire module156.$xnor$rtl.v:510$535_Y.
Removed top 7 bits (of 13) from wire module156.wire162.
Removed top 1 bits (of 3) from wire module156.wire168.
Removed top 10 bits (of 13) from wire module156.wire169.
Removed top 4 bits (of 19) from port A of cell module35.$xor$rtl.v:414$417 ($xor).
Removed top 4 bits (of 19) from port Y of cell module35.$xor$rtl.v:414$417 ($xor).
Removed top 4 bits (of 19) from port A of cell module35.$neg$rtl.v:415$419 ($neg).
Removed top 8 bits (of 16) from port Y of cell module35.$shr$rtl.v:415$424 ($shr).
Removed top 15 bits (of 16) from port B of cell module35.$sub$rtl.v:422$433 ($sub).
Removed top 3 bits (of 19) from port B of cell module35.$mul$rtl.v:446$466 ($mul).
Removed top 13 bits (of 19) from port Y of cell module35.$mul$rtl.v:446$466 ($mul).
Removed top 1 bits (of 16) from port A of cell module35.$neg$rtl.v:459$481 ($neg).
Removed top 10 bits (of 19) from mux cell module35.$ternary$rtl.v:461$490 ($mux).
Removed top 18 bits (of 19) from port A of cell module35.$and$rtl.v:461$491 ($and).
Removed top 10 bits (of 19) from port B of cell module35.$and$rtl.v:461$491 ($and).
Removed top 10 bits (of 19) from port Y of cell module35.$and$rtl.v:461$491 ($and).
Removed top 10 bits (of 19) from port A of cell module35.$xor$rtl.v:461$495 ($xor).
Removed top 6 bits (of 19) from port Y of cell module35.$xor$rtl.v:461$495 ($xor).
Removed top 6 bits (of 19) from port B of cell module35.$xor$rtl.v:461$495 ($xor).
Removed top 20 bits (of 21) from mux cell module35.$procmux$1283 ($mux).
Removed top 14 bits (of 19) from mux cell module35.$procmux$1289 ($mux).
Removed top 5 bits (of 7) from FF cell module35.$procdff$1508 ($dff).
Removed top 6 bits (of 19) from port Y of cell module35.$neg$rtl.v:461$494 ($neg).
Removed top 6 bits (of 19) from port A of cell module35.$neg$rtl.v:461$494 ($neg).
Removed top 6 bits (of 19) from port Y of cell module35.$sshr$rtl.v:461$493 ($sshr).
Removed top 10 bits (of 19) from wire module35.$and$rtl.v:461$491_Y.
Removed top 18 bits (of 19) from wire module35.$eq$rtl.v:458$479_Y.
Removed top 7 bits (of 8) from wire module35.$logic_and$rtl.v:432$449_Y.
Removed top 18 bits (of 19) from wire module35.$logic_not$rtl.v:461$488_Y.
Removed top 13 bits (of 19) from wire module35.$mul$rtl.v:446$466_Y.
Removed top 6 bits (of 19) from wire module35.$neg$rtl.v:461$494_Y.
Removed top 20 bits (of 21) from wire module35.$procmux$1283_Y.
Removed top 14 bits (of 19) from wire module35.$procmux$1289_Y.
Removed top 15 bits (of 16) from wire module35.$reduce_xnor$rtl.v:422$432_Y.
Removed top 20 bits (of 21) from wire module35.$reduce_xnor$rtl.v:422$436_Y.
Removed top 8 bits (of 16) from wire module35.$shr$rtl.v:415$424_Y.
Removed top 6 bits (of 19) from wire module35.$sshr$rtl.v:461$493_Y.
Removed top 12 bits (of 19) from wire module35.$ternary$rtl.v:461$490_Y.
Removed top 4 bits (of 19) from wire module35.$xor$rtl.v:414$417_Y.
Removed top 16 bits (of 17) from wire module35.wire154.
Removed top 4 bits (of 21) from wire module35.wire172.
Removed top 21 bits (of 22) from wire module35.wire173.
Removed top 11 bits (of 15) from mux cell module56.$ternary$rtl.v:987$997 ($mux).
Removed top 13 bits (of 14) from port A of cell module56.$sub$rtl.v:990$1003 ($sub).
Removed top 13 bits (of 14) from port B of cell module56.$sub$rtl.v:990$1003 ($sub).
Removed top 5 bits (of 9) from port A of cell module56.$ge$rtl.v:1003$1020 ($ge).
Removed top 8 bits (of 9) from port B of cell module56.$ge$rtl.v:1003$1020 ($ge).
Removed top 4 bits (of 5) from mux cell module56.$ternary$rtl.v:1001$1018 ($mux).
Removed top 7 bits (of 9) from port A of cell module56.$eq$rtl.v:1003$1019 ($eq).
Removed top 5 bits (of 6) from port A of cell module56.$eq$rtl.v:1006$1023 ($eq).
Removed top 5 bits (of 6) from port B of cell module56.$eq$rtl.v:1006$1023 ($eq).
Removed top 14 bits (of 15) from port B of cell module56.$ne$rtl.v:1009$1024 ($ne).
Removed top 9 bits (of 21) from mux cell module56.$ternary$rtl.v:1009$1026 ($mux).
Removed top 15 bits (of 21) from port Y of cell module56.$not$rtl.v:1010$1027 ($not).
Removed top 15 bits (of 21) from port A of cell module56.$not$rtl.v:1010$1027 ($not).
Removed top 9 bits (of 21) from port Y of cell module56.$not$rtl.v:1009$1025 ($not).
Removed top 9 bits (of 21) from port A of cell module56.$not$rtl.v:1009$1025 ($not).
Removed top 20 bits (of 21) from wire module56.$logic_not$rtl.v:988$999_Y.
Removed top 20 bits (of 21) from wire module56.$ne$rtl.v:1009$1024_Y.
Removed top 9 bits (of 21) from wire module56.$not$rtl.v:1009$1025_Y.
Removed top 15 bits (of 21) from wire module56.$not$rtl.v:1010$1027_Y.
Removed top 11 bits (of 15) from wire module56.$ternary$rtl.v:987$997_Y.
Removed top 14 bits (of 15) from wire module56.wire61.
Removed top 21 bits (of 22) from wire module56.wire62.
Removed top 19 bits (of 20) from wire module56.wire65.
Removed top 12 bits (of 13) from wire module56.wire66.
Removed top 8 bits (of 17) from wire module56.wire69.
Removed top 7 bits (of 11) from wire module56.wire70.
Removed top 10 bits (of 11) from wire module56.wire71.
Removed top 17 bits (of 18) from wire module56.wire72.
Removed top 13 bits (of 14) from wire module56.wire75.
Removed top 12 bits (of 14) from wire module56.wire76.
Removed top 8 bits (of 9) from wire module56.wire77.
Removed top 16 bits (of 17) from wire module56.wire78.
Removed top 4 bits (of 5) from wire module56.wire79.
Removed top 8 bits (of 14) from wire module56.wire81.
Removed top 8 bits (of 10) from mux cell module85.$procmux$1043 ($mux).
Removed top 5 bits (of 9) from port B of cell module85.$or$rtl.v:659$545 ($or).
Removed top 8 bits (of 17) from mux cell module85.$ternary$rtl.v:660$548 ($mux).
Removed top 10 bits (of 12) from port A of cell module85.$neg$rtl.v:685$562 ($neg).
Removed top 5 bits (of 14) from mux cell module85.$ternary$rtl.v:695$583 ($mux).
Removed top 17 bits (of 19) from port A of cell module85.$neg$rtl.v:687$563 ($neg).
Removed top 6 bits (of 8) from port B of cell module85.$ge$rtl.v:688$567 ($ge).
Removed top 18 bits (of 19) from port A of cell module85.$gt$rtl.v:692$573 ($gt).
Removed top 1 bits (of 2) from port A of cell module85.$sub$rtl.v:692$575 ($sub).
Removed top 5 bits (of 8) from port A of cell module85.$shl$rtl.v:698$592 ($shl).
Removed top 7 bits (of 8) from port A of cell module85.$xnor$rtl.v:697$588 ($xnor).
Removed top 6 bits (of 8) from port B of cell module85.$xnor$rtl.v:697$588 ($xnor).
Removed top 1 bits (of 17) from mux cell module85.$ternary$rtl.v:707$608 ($mux).
Removed top 12 bits (of 17) from port Y of cell module85.$xnor$rtl.v:725$634 ($xnor).
Removed top 18 bits (of 19) from mux cell module85.$ternary$rtl.v:733$643 ($mux).
Removed top 5 bits (of 13) from mux cell module85.$ternary$rtl.v:740$652 ($mux).
Removed top 1 bits (of 13) from mux cell module85.$ternary$rtl.v:740$654 ($mux).
Removed top 17 bits (of 20) from port A of cell module85.$xnor$rtl.v:742$655 ($xnor).
Removed top 2 bits (of 16) from port A of cell module85.$add$rtl.v:743$657 ($add).
Removed top 2 bits (of 16) from port B of cell module85.$add$rtl.v:743$657 ($add).
Removed top 1 bits (of 16) from port Y of cell module85.$add$rtl.v:743$657 ($add).
Removed top 4 bits (of 19) from port Y of cell module85.$mul$rtl.v:741$659 ($mul).
Removed top 4 bits (of 19) from port B of cell module85.$le$rtl.v:741$660 ($le).
Removed top 7 bits (of 9) from port A of cell module85.$not$rtl.v:745$663 ($not).
Removed top 7 bits (of 19) from mux cell module85.$ternary$rtl.v:762$680 ($mux).
Removed top 17 bits (of 30) from port A of cell module85.$neg$rtl.v:764$685 ($neg).
Removed top 16 bits (of 30) from mux cell module85.$ternary$rtl.v:764$688 ($mux).
Removed top 8 bits (of 20) from mux cell module85.$ternary$rtl.v:769$696 ($mux).
Removed top 17 bits (of 20) from port A of cell module85.$neg$rtl.v:769$697 ($neg).
Removed top 11 bits (of 20) from mux cell module85.$ternary$rtl.v:769$702 ($mux).
Removed top 18 bits (of 32) from port A of cell module85.$ne$rtl.v:772$706 ($ne).
Removed top 19 bits (of 23) from mux cell module85.$ternary$rtl.v:775$711 ($mux).
Removed top 15 bits (of 16) from mux cell module85.$ternary$rtl.v:780$725 ($mux).
Removed top 2 bits (of 8) from port B of cell module85.$lt$rtl.v:788$737 ($lt).
Removed top 10 bits (of 11) from mux cell module85.$ternary$rtl.v:788$740 ($mux).
Removed top 9 bits (of 20) from port A of cell module85.$lt$rtl.v:794$748 ($lt).
Removed top 12 bits (of 19) from mux cell module85.$ternary$rtl.v:810$768 ($mux).
Removed top 1 bits (of 20) from port A of cell module85.$gt$rtl.v:814$778 ($gt).
Removed top 1 bits (of 15) from mux cell module85.$ternary$rtl.v:818$792 ($mux).
Removed top 2 bits (of 3) from port A of cell module85.$xnor$rtl.v:836$809 ($xnor).
Removed top 16 bits (of 30) from mux cell module85.$ternary$rtl.v:843$820 ($mux).
Removed top 16 bits (of 30) from mux cell module85.$ternary$rtl.v:843$822 ($mux).
Removed top 16 bits (of 30) from port A of cell module85.$gt$rtl.v:844$827 ($gt).
Removed top 16 bits (of 17) from port A of cell module85.$shr$rtl.v:851$830 ($shr).
Removed top 2 bits (of 9) from mux cell module85.$ternary$rtl.v:861$840 ($mux).
Removed top 6 bits (of 19) from mux cell module85.$ternary$rtl.v:877$856 ($mux).
Removed top 7 bits (of 17) from port A of cell module85.$and$rtl.v:879$857 ($and).
Removed top 6 bits (of 17) from port Y of cell module85.$and$rtl.v:879$857 ($and).
Removed top 14 bits (of 15) from port A of cell module85.$sshr$rtl.v:880$859 ($sshr).
Removed top 2 bits (of 18) from port B of cell module85.$add$rtl.v:886$861 ($add).
Removed top 11 bits (of 18) from port A of cell module85.$add$rtl.v:888$862 ($add).
Removed top 3 bits (of 18) from port B of cell module85.$add$rtl.v:888$862 ($add).
Removed top 2 bits (of 18) from port Y of cell module85.$add$rtl.v:888$862 ($add).
Removed top 10 bits (of 18) from port A of cell module85.$shr$rtl.v:891$873 ($shr).
Removed top 13 bits (of 18) from mux cell module85.$ternary$rtl.v:891$878 ($mux).
Removed top 9 bits (of 18) from port B of cell module85.$ne$rtl.v:901$894 ($ne).
Removed top 1 bits (of 15) from port B of cell module85.$eq$rtl.v:903$897 ($eq).
Removed top 18 bits (of 19) from mux cell module85.$ternary$rtl.v:903$899 ($mux).
Removed top 18 bits (of 19) from mux cell module85.$ternary$rtl.v:903$900 ($mux).
Removed top 7 bits (of 8) from mux cell module85.$ternary$rtl.v:908$910 ($mux).
Removed top 6 bits (of 7) from mux cell module85.$ternary$rtl.v:910$918 ($mux).
Removed top 1 bits (of 7) from mux cell module85.$ternary$rtl.v:912$925 ($mux).
Removed top 2 bits (of 9) from mux cell module85.$procmux$1076 ($mux).
Removed top 13 bits (of 15) from mux cell module85.$procmux$1148 ($mux).
Removed top 8 bits (of 17) from mux cell module85.$procmux$1154 ($mux).
Removed top 14 bits (of 15) from mux cell module85.$procmux$1160 ($mux).
Removed top 11 bits (of 19) from mux cell module85.$procmux$1184 ($mux).
Removed top 8 bits (of 16) from mux cell module85.$procmux$1197 ($mux).
Removed top 2 bits (of 9) from FF cell module85.$procdff$1461 ($dff).
Removed top 1 bits (of 15) from FF cell module85.$procdff$1462 ($dff).
Removed top 15 bits (of 16) from FF cell module85.$procdff$1470 ($dff).
Removed top 10 bits (of 11) from FF cell module85.$procdff$1471 ($dff).
Removed top 13 bits (of 15) from FF cell module85.$procdff$1473 ($dff).
Removed top 2 bits (of 10) from FF cell module85.$procdff$1476 ($dff).
Removed top 11 bits (of 19) from FF cell module85.$procdff$1484 ($dff).
Removed top 14 bits (of 15) from FF cell module85.$procdff$1489 ($dff).
Removed top 8 bits (of 17) from FF cell module85.$procdff$1490 ($dff).
Removed top 8 bits (of 17) from port A of cell module85.$neg$rtl.v:675$554 ($neg).
Removed top 8 bits (of 17) from port A of cell module85.$and$rtl.v:707$604 ($and).
Removed top 8 bits (of 17) from port Y of cell module85.$and$rtl.v:707$604 ($and).
Removed top 8 bits (of 17) from port A of cell module85.$mul$rtl.v:707$605 ($mul).
Removed top 7 bits (of 17) from port Y of cell module85.$mul$rtl.v:707$605 ($mul).
Removed top 7 bits (of 17) from port A of cell module85.$shl$rtl.v:717$623 ($shl).
Removed top 2 bits (of 10) from port B of cell module85.$le$rtl.v:751$665 ($le).
Removed top 2 bits (of 10) from port B of cell module85.$sshr$rtl.v:752$667 ($sshr).
Removed top 16 bits (of 30) from port Y of cell module85.$neg$rtl.v:764$685 ($neg).
Removed top 11 bits (of 20) from mux cell module85.$ternary$rtl.v:769$699 ($mux).
Removed top 13 bits (of 15) from port A of cell module85.$not$rtl.v:775$707 ($not).
Removed top 19 bits (of 23) from mux cell module85.$ternary$rtl.v:775$709 ($mux).
Removed top 11 bits (of 19) from port B of cell module85.$add$rtl.v:778$713 ($add).
Removed top 10 bits (of 19) from port Y of cell module85.$add$rtl.v:778$713 ($add).
Removed top 10 bits (of 19) from port A of cell module85.$le$rtl.v:778$714 ($le).
Removed top 11 bits (of 15) from mux cell module85.$ternary$rtl.v:783$728 ($mux).
Removed top 10 bits (of 11) from port A of cell module85.$shl$rtl.v:799$757 ($shl).
Removed top 8 bits (of 17) from mux cell module85.$ternary$rtl.v:813$771 ($mux).
Removed top 11 bits (of 19) from mux cell module85.$ternary$rtl.v:814$776 ($mux).
Removed top 7 bits (of 15) from mux cell module85.$ternary$rtl.v:817$786 ($mux).
Removed top 11 bits (of 19) from mux cell module85.$ternary$rtl.v:844$825 ($mux).
Removed top 6 bits (of 19) from mux cell module85.$ternary$rtl.v:877$854 ($mux).
Removed top 1 bits (of 15) from port B of cell module85.$lt$rtl.v:876$847 ($lt).
Removed top 5 bits (of 10) from port A of cell module85.$and$rtl.v:879$857 ($and).
Removed top 10 bits (of 11) from port B of cell module85.$and$rtl.v:879$857 ($and).
Removed top 6 bits (of 11) from port Y of cell module85.$and$rtl.v:879$857 ($and).
Removed top 13 bits (of 15) from port B of cell module85.$add$rtl.v:888$862 ($add).
Removed top 8 bits (of 16) from port Y of cell module85.$add$rtl.v:888$862 ($add).
Removed top 13 bits (of 18) from mux cell module85.$ternary$rtl.v:891$875 ($mux).
Removed top 5 bits (of 14) from mux cell module85.$procmux$1191 ($mux).
Removed top 3 bits (of 12) from mux cell module85.$ternary$rtl.v:769$696 ($mux).
Removed top 11 bits (of 15) from port Y of cell module85.$not$rtl.v:775$707 ($not).
Removed top 11 bits (of 19) from port A of cell module85.$gt$rtl.v:814$778 ($gt).
Removed top 3 bits (of 8) from port Y of cell module85.$add$rtl.v:888$862 ($add).
Removed top 2 bits (of 7) from port A of cell module85.$add$rtl.v:888$862 ($add).
Removed top 13 bits (of 18) from port Y of cell module85.$shr$rtl.v:891$873 ($shr).
Removed top 13 bits (of 15) from wire module85.$0\reg113[14:0].
Removed top 10 bits (of 11) from wire module85.$0\reg118[10:0].
Removed top 15 bits (of 16) from wire module85.$0\reg119[15:0].
Removed top 1 bits (of 15) from wire module85.$0\reg127[14:0].
Removed top 2 bits (of 9) from wire module85.$0\reg128[8:0].
Removed top 8 bits (of 17) from wire module85.$0\reg93[16:0].
Removed top 14 bits (of 15) from wire module85.$0\reg94[14:0].
Removed top 11 bits (of 19) from wire module85.$0\reg99[18:0].
Removed top 1 bits (of 16) from wire module85.$add$rtl.v:743$657_Y.
Removed top 13 bits (of 18) from wire module85.$add$rtl.v:888$862_Y.
Removed top 8 bits (of 17) from wire module85.$and$rtl.v:707$604_Y.
Removed top 12 bits (of 17) from wire module85.$and$rtl.v:879$857_Y.
Removed top 13 bits (of 14) from wire module85.$eq$rtl.v:695$580_Y.
Removed top 18 bits (of 19) from wire module85.$eq$rtl.v:903$897_Y.
Removed top 18 bits (of 19) from wire module85.$ge$rtl.v:688$567_Y.
Removed top 7 bits (of 8) from wire module85.$logic_and$rtl.v:908$905_Y.
Removed top 7 bits (of 8) from wire module85.$logic_not$rtl.v:697$587_Y.
Removed top 15 bits (of 16) from wire module85.$logic_not$rtl.v:780$721_Y.
Removed top 2 bits (of 3) from wire module85.$logic_not$rtl.v:835$804_Y.
Removed top 2 bits (of 3) from wire module85.$logic_not$rtl.v:836$806_Y.
Removed top 6 bits (of 7) from wire module85.$logic_not$rtl.v:909$911_Y.
Removed top 12 bits (of 13) from wire module85.$lt$rtl.v:709$618_Y.
Removed top 18 bits (of 19) from wire module85.$lt$rtl.v:877$852_Y.
Removed top 7 bits (of 17) from wire module85.$mul$rtl.v:707$605_Y.
Removed top 8 bits (of 10) from wire module85.$procmux$1043_Y.
Removed top 2 bits (of 9) from wire module85.$procmux$1073_Y.
Removed top 5 bits (of 14) from wire module85.$procmux$1191_Y.
Removed top 8 bits (of 16) from wire module85.$procmux$1197_Y.
Removed top 15 bits (of 16) from wire module85.$reduce_and$rtl.v:704$602_Y.
Removed top 29 bits (of 30) from wire module85.$reduce_and$rtl.v:843$819_Y.
Removed top 15 bits (of 16) from wire module85.$reduce_or$rtl.v:780$724_Y.
Removed top 18 bits (of 19) from wire module85.$reduce_xnor$rtl.v:692$572_Y.
Removed top 9 bits (of 10) from wire module85.$reduce_xnor$rtl.v:797$753_Y.
Removed top 10 bits (of 11) from wire module85.$reduce_xnor$rtl.v:799$761_Y.
Removed top 16 bits (of 17) from wire module85.$reduce_xnor$rtl.v:813$769_Y.
Removed top 14 bits (of 15) from wire module85.$reduce_xnor$rtl.v:880$858_Y.
Removed top 7 bits (of 8) from wire module85.$reduce_xor$rtl.v:819$796_Y.
Removed top 7 bits (of 8) from wire module85.$reduce_xor$rtl.v:908$908_Y.
Removed top 6 bits (of 7) from wire module85.$reduce_xor$rtl.v:910$916_Y.
Removed top 13 bits (of 18) from wire module85.$shr$rtl.v:891$873_Y.
Removed top 8 bits (of 17) from wire module85.$ternary$rtl.v:660$548_Y.
Removed top 5 bits (of 14) from wire module85.$ternary$rtl.v:695$583_Y.
Removed top 11 bits (of 15) from wire module85.$ternary$rtl.v:783$728_Y.
Removed top 10 bits (of 11) from wire module85.$ternary$rtl.v:788$740_Y.
Removed top 12 bits (of 19) from wire module85.$ternary$rtl.v:810$768_Y.
Removed top 8 bits (of 17) from wire module85.$ternary$rtl.v:813$771_Y.
Removed top 11 bits (of 19) from wire module85.$ternary$rtl.v:814$776_Y.
Removed top 7 bits (of 15) from wire module85.$ternary$rtl.v:817$786_Y.
Removed top 16 bits (of 30) from wire module85.$ternary$rtl.v:843$820_Y.
Removed top 16 bits (of 30) from wire module85.$ternary$rtl.v:843$822_Y.
Removed top 11 bits (of 19) from wire module85.$ternary$rtl.v:844$825_Y.
Removed top 6 bits (of 19) from wire module85.$ternary$rtl.v:877$854_Y.
Removed top 6 bits (of 19) from wire module85.$ternary$rtl.v:877$856_Y.
Removed top 13 bits (of 18) from wire module85.$ternary$rtl.v:891$878_Y.
Removed top 18 bits (of 19) from wire module85.$ternary$rtl.v:903$899_Y.
Removed top 18 bits (of 19) from wire module85.$ternary$rtl.v:903$900_Y.
Removed top 7 bits (of 8) from wire module85.$ternary$rtl.v:908$910_Y.
Removed top 6 bits (of 7) from wire module85.$ternary$rtl.v:910$918_Y.
Removed top 18 bits (of 19) from wire module85.wire108.
Removed top 3 bits (of 4) from wire module85.wire140.
Removed top 8 bits (of 17) from wire module85.wire142.
Removed top 6 bits (of 8) from wire module85.wire92.
Removed top 8 bits (of 9) from mux cell top.$ternary$rtl.v:121$9 ($mux).
Removed top 17 bits (of 18) from port B of cell top.$lt$rtl.v:121$7 ($lt).
Removed top 8 bits (of 9) from port A of cell top.$lt$rtl.v:122$12 ($lt).
Removed top 8 bits (of 9) from port A of cell top.$ne$rtl.v:123$15 ($ne).
Removed top 15 bits (of 16) from port A of cell top.$sub$rtl.v:141$28 ($sub).
Removed top 3 bits (of 4) from port A of cell top.$and$rtl.v:139$23 ($and).
Removed top 15 bits (of 16) from mux cell top.$ternary$rtl.v:142$35 ($mux).
Removed top 15 bits (of 19) from port B of cell top.$eq$rtl.v:142$33 ($eq).
Removed top 8 bits (of 16) from mux cell top.$ternary$rtl.v:142$36 ($mux).
Removed top 2 bits (of 5) from mux cell top.$ternary$rtl.v:146$41 ($mux).
Removed top 4 bits (of 11) from port A of cell top.$eq$rtl.v:144$37 ($eq).
Removed top 3 bits (of 9) from mux cell top.$ternary$rtl.v:153$49 ($mux).
Removed top 7 bits (of 13) from mux cell top.$ternary$rtl.v:158$51 ($mux).
Removed top 6 bits (of 7) from port A of cell top.$add$rtl.v:162$63 ($add).
Removed top 6 bits (of 7) from port B of cell top.$add$rtl.v:162$63 ($add).
Removed top 5 bits (of 7) from port Y of cell top.$add$rtl.v:162$63 ($add).
Removed top 12 bits (of 13) from mux cell top.$ternary$rtl.v:166$70 ($mux).
Removed top 6 bits (of 19) from mux cell top.$ternary$rtl.v:165$68 ($mux).
Removed top 12 bits (of 13) from port A of cell top.$ne$rtl.v:166$71 ($ne).
Removed top 12 bits (of 13) from port B of cell top.$ne$rtl.v:166$71 ($ne).
Removed top 5 bits (of 13) from mux cell top.$ternary$rtl.v:173$86 ($mux).
Removed top 8 bits (of 19) from port A of cell top.$mul$rtl.v:172$83 ($mul).
Removed top 11 bits (of 19) from port B of cell top.$mul$rtl.v:172$83 ($mul).
Removed top 6 bits (of 19) from mux cell top.$ternary$rtl.v:177$105 ($mux).
Removed top 3 bits (of 17) from port A of cell top.$not$rtl.v:175$96 ($not).
Removed top 17 bits (of 18) from port B of cell top.$ne$rtl.v:176$98 ($ne).
Removed top 6 bits (of 19) from mux cell top.$ternary$rtl.v:176$100 ($mux).
Removed top 4 bits (of 26) from mux cell top.$ternary$rtl.v:182$110 ($mux).
Removed top 12 bits (of 22) from mux cell top.$ternary$rtl.v:188$116 ($mux).
Removed top 7 bits (of 8) from port B of cell top.$xnor$rtl.v:200$131 ($xnor).
Removed top 12 bits (of 13) from port B of cell top.$ge$rtl.v:202$136 ($ge).
Removed top 1 bits (of 8) from mux cell top.$ternary$rtl.v:203$138 ($mux).
Removed top 11 bits (of 12) from port A of cell top.$neg$rtl.v:206$146 ($neg).
Removed top 2 bits (of 10) from port Y of cell top.$xor$rtl.v:207$149 ($xor).
Removed top 8 bits (of 19) from port B of cell top.$or$rtl.v:207$150 ($or).
Removed top 8 bits (of 19) from port Y of cell top.$or$rtl.v:207$150 ($or).
Removed top 2 bits (of 10) from port A of cell top.$sshr$rtl.v:207$151 ($sshr).
Removed top 8 bits (of 19) from port B of cell top.$sshr$rtl.v:207$151 ($sshr).
Removed top 17 bits (of 18) from port B of cell top.$le$rtl.v:219$173 ($le).
Removed top 8 bits (of 16) from port Y of cell top.$xnor$rtl.v:221$178 ($xnor).
Removed top 8 bits (of 13) from mux cell top.$ternary$rtl.v:231$182 ($mux).
Removed top 7 bits (of 9) from port A of cell top.$shr$rtl.v:238$186 ($shr).
Removed top 8 bits (of 19) from port B of cell top.$sshl$rtl.v:241$190 ($sshl).
Removed top 8 bits (of 13) from port B of cell top.$add$rtl.v:243$198 ($add).
Removed top 1 bits (of 13) from mux cell top.$ternary$rtl.v:243$201 ($mux).
Removed top 8 bits (of 19) from port A of cell top.$sshl$rtl.v:244$202 ($sshl).
Removed top 2 bits (of 3) from mux cell top.$ternary$rtl.v:246$211 ($mux).
Removed top 4 bits (of 7) from port A of cell top.$le$rtl.v:245$207 ($le).
Removed top 4 bits (of 6) from port B of cell top.$le$rtl.v:246$208 ($le).
Removed top 6 bits (of 7) from port A of cell top.$ge$rtl.v:255$227 ($ge).
Removed top 5 bits (of 13) from mux cell top.$ternary$rtl.v:259$234 ($mux).
Removed top 14 bits (of 15) from port B of cell top.$or$rtl.v:256$230 ($or).
Removed top 14 bits (of 15) from port Y of cell top.$or$rtl.v:256$230 ($or).
Removed top 1 bits (of 20) from mux cell top.$ternary$rtl.v:267$239 ($mux).
Removed top 1 bits (of 2) from port A of cell top.$shl$rtl.v:273$241 ($shl).
Removed top 18 bits (of 19) from port A of cell top.$shr$rtl.v:276$245 ($shr).
Removed top 2 bits (of 5) from port A of cell top.$xnor$rtl.v:278$247 ($xnor).
Removed top 14 bits (of 15) from port A of cell top.$shl$rtl.v:281$249 ($shl).
Removed top 12 bits (of 15) from mux cell top.$ternary$rtl.v:283$254 ($mux).
Removed top 12 bits (of 13) from port A of cell top.$add$rtl.v:283$255 ($add).
Removed top 8 bits (of 13) from port Y of cell top.$add$rtl.v:283$255 ($add).
Removed top 12 bits (of 15) from port A of cell top.$ne$rtl.v:283$256 ($ne).
Removed top 10 bits (of 15) from port B of cell top.$ne$rtl.v:283$256 ($ne).
Removed top 11 bits (of 16) from port Y of cell top.$and$rtl.v:284$261 ($and).
Removed top 10 bits (of 15) from port A of cell top.$and$rtl.v:284$261 ($and).
Removed top 11 bits (of 16) from port B of cell top.$and$rtl.v:284$261 ($and).
Removed top 9 bits (of 15) from port A of cell top.$lt$rtl.v:293$280 ($lt).
Removed top 6 bits (of 11) from port Y of cell top.$neg$rtl.v:301$293 ($neg).
Removed top 6 bits (of 11) from port A of cell top.$neg$rtl.v:301$293 ($neg).
Removed top 5 bits (of 6) from port B of cell top.$gt$rtl.v:297$289 ($gt).
Removed top 2 bits (of 8) from mux cell top.$ternary$rtl.v:306$298 ($mux).
Removed top 8 bits (of 9) from mux cell top.$ternary$rtl.v:308$302 ($mux).
Removed top 2 bits (of 5) from port A of cell top.$sshl$rtl.v:309$307 ($sshl).
Removed top 2 bits (of 3) from port A of cell top.$ne$rtl.v:309$311 ($ne).
Removed top 11 bits (of 12) from port B of cell top.$or$rtl.v:309$312 ($or).
Removed top 11 bits (of 12) from port A of cell top.$mul$rtl.v:309$313 ($mul).
Removed top 11 bits (of 12) from port A of cell top.$or$rtl.v:315$316 ($or).
Removed top 12 bits (of 13) from port B of cell top.$lt$rtl.v:316$320 ($lt).
Removed top 19 bits (of 20) from port A of cell top.$eq$rtl.v:316$321 ($eq).
Removed top 8 bits (of 9) from mux cell top.$procmux$1350 ($mux).
Removed top 11 bits (of 12) from FF cell top.$procdff$1526 ($dff).
Removed top 4 bits (of 5) from FF cell top.$procdff$1537 ($dff).
Removed top 8 bits (of 16) from mux cell top.$ternary$rtl.v:141$30 ($mux).
Removed top 4 bits (of 5) from port B of cell top.$add$rtl.v:221$177 ($add).
Removed top 1 bits (of 13) from port Y of cell top.$add$rtl.v:243$198 ($add).
Removed top 1 bits (of 13) from port A of cell top.$add$rtl.v:243$198 ($add).
Removed top 2 bits (of 3) from port A of cell top.$le$rtl.v:245$207 ($le).
Removed top 4 bits (of 12) from mux cell top.$ternary$rtl.v:252$218 ($mux).
Removed top 11 bits (of 12) from port B of cell top.$sshl$rtl.v:284$259 ($sshl).
Removed top 11 bits (of 16) from port Y of cell top.$shr$rtl.v:284$260 ($shr).
Removed top 2 bits (of 20) from mux cell top.$procmux$1302 ($mux).
Removed top 8 bits (of 16) from port Y of cell top.$sub$rtl.v:141$28 ($sub).
Removed top 8 bits (of 16) from port B of cell top.$sub$rtl.v:141$28 ($sub).
Removed top 1 bits (of 13) from mux cell top.$ternary$rtl.v:243$197 ($mux).
Removed cell top.$and$rtl.v:140$27 ($and).
Removed top 1 bits (of 13) from mux cell top.$ternary$rtl.v:243$195 ($mux).
Removed top 11 bits (of 12) from wire top.$0\reg178[11:0].
Removed top 4 bits (of 5) from wire top.$0\reg19[4:0].
Removed top 5 bits (of 7) from wire top.$add$rtl.v:162$63_Y.
Removed top 1 bits (of 13) from wire top.$add$rtl.v:243$198_Y.
Removed top 8 bits (of 13) from wire top.$add$rtl.v:283$255_Y.
Removed top 11 bits (of 16) from wire top.$and$rtl.v:284$261_Y.
Removed top 15 bits (of 16) from wire top.$eq$rtl.v:142$33_Y.
Removed top 8 bits (of 9) from wire top.$eq$rtl.v:316$321_Y.
Removed top 15 bits (of 16) from wire top.$le$rtl.v:219$173_Y.
Removed top 12 bits (of 13) from wire top.$le$rtl.v:259$231_Y.
Removed top 2 bits (of 3) from wire top.$le$rtl.v:309$310_Y.
Removed top 15 bits (of 16) from wire top.$logic_and$rtl.v:140$25_Y.
Removed top 4 bits (of 5) from wire top.$logic_not$rtl.v:146$38_Y.
Removed top 3 bits (of 4) from wire top.$logic_not$rtl.v:160$56_Y.
Removed top 6 bits (of 7) from wire top.$logic_not$rtl.v:162$60_Y.
Removed top 3 bits (of 4) from wire top.$logic_not$rtl.v:194$120_Y.
Removed top 11 bits (of 12) from wire top.$logic_not$rtl.v:203$141_Y.
Removed top 17 bits (of 18) from wire top.$logic_not$rtl.v:219$172_Y.
Removed top 2 bits (of 3) from wire top.$logic_not$rtl.v:246$210_Y.
Removed top 6 bits (of 7) from wire top.$logic_not$rtl.v:255$226_Y.
Removed top 18 bits (of 19) from wire top.$logic_not$rtl.v:255$229_Y.
Removed top 12 bits (of 13) from wire top.$logic_not$rtl.v:316$319_Y.
Removed top 14 bits (of 15) from wire top.$lt$rtl.v:117$1_Y.
Removed top 8 bits (of 9) from wire top.$lt$rtl.v:121$7_Y.
Removed top 8 bits (of 9) from wire top.$lt$rtl.v:122$12_Y.
Removed top 8 bits (of 9) from wire top.$lt$rtl.v:308$301_Y.
Removed top 18 bits (of 19) from wire top.$ne$rtl.v:176$98_Y.
Removed top 11 bits (of 12) from wire top.$ne$rtl.v:206$145_Y.
Removed top 6 bits (of 11) from wire top.$neg$rtl.v:301$293_Y.
Removed top 8 bits (of 19) from wire top.$or$rtl.v:207$150_Y.
Removed top 8 bits (of 9) from wire top.$pos$rtl.v:121$6_Y.
Removed top 2 bits (of 20) from wire top.$procmux$1302_Y.
Removed top 8 bits (of 9) from wire top.$procmux$1350_Y.
Removed top 11 bits (of 12) from wire top.$reduce_and$rtl.v:315$314_Y.
Removed top 5 bits (of 6) from wire top.$reduce_or$rtl.v:128$18_Y.
Removed top 17 bits (of 18) from wire top.$reduce_or$rtl.v:176$97_Y.
Removed top 3 bits (of 4) from wire top.$reduce_xnor$rtl.v:139$22_Y.
Removed top 19 bits (of 20) from wire top.$reduce_xnor$rtl.v:274$242_Y.
Removed top 3 bits (of 4) from wire top.$reduce_xnor$rtl.v:290$270_Y.
Removed top 10 bits (of 11) from wire top.$reduce_xor$rtl.v:269$240_Y.
Removed top 11 bits (of 16) from wire top.$shr$rtl.v:284$260_Y.
Removed top 8 bits (of 16) from wire top.$sub$rtl.v:141$28_Y.
Removed top 8 bits (of 16) from wire top.$ternary$rtl.v:142$36_Y.
Removed top 2 bits (of 5) from wire top.$ternary$rtl.v:146$41_Y.
Removed top 3 bits (of 9) from wire top.$ternary$rtl.v:153$49_Y.
Removed top 7 bits (of 13) from wire top.$ternary$rtl.v:158$51_Y.
Removed top 6 bits (of 19) from wire top.$ternary$rtl.v:165$68_Y.
Removed top 5 bits (of 13) from wire top.$ternary$rtl.v:173$86_Y.
Removed top 6 bits (of 19) from wire top.$ternary$rtl.v:176$100_Y.
Removed top 6 bits (of 19) from wire top.$ternary$rtl.v:177$105_Y.
Removed top 4 bits (of 26) from wire top.$ternary$rtl.v:182$110_Y.
Removed top 12 bits (of 22) from wire top.$ternary$rtl.v:188$116_Y.
Removed top 1 bits (of 8) from wire top.$ternary$rtl.v:203$138_Y.
Removed top 1 bits (of 13) from wire top.$ternary$rtl.v:243$195_Y.
Removed top 1 bits (of 13) from wire top.$ternary$rtl.v:243$197_Y.
Removed top 4 bits (of 12) from wire top.$ternary$rtl.v:252$218_Y.
Removed top 5 bits (of 13) from wire top.$ternary$rtl.v:259$234_Y.
Removed top 1 bits (of 20) from wire top.$ternary$rtl.v:267$239_Y.
Removed top 12 bits (of 15) from wire top.$ternary$rtl.v:283$254_Y.
Removed top 8 bits (of 16) from wire top.$xnor$rtl.v:221$178_Y.
Removed top 2 bits (of 10) from wire top.$xor$rtl.v:207$149_Y.
Removed top 5 bits (of 7) from wire top.wire194.
Removed top 5 bits (of 6) from wire top.wire34.
Removed top 4 bits (of 5) from wire top.wire5.
Removed top 8 bits (of 19) from wire top.wire7.
Removed top 8 bits (of 9) from wire top.wire8.
Removed top 12 bits (of 13) from wire top.wire9.

2.8. Executing PEEPOPT pass (run peephole optimizers).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module156..
Finding unused cells or wires in module \module35..
Finding unused cells or wires in module \module56..
Finding unused cells or wires in module \module85..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 186 unused wires.
<suppressed ~5 debug messages>

2.10. Executing TECHMAP pass (map to technology primitives).

2.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~852 debug messages>

2.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module module156:
  creating $macc model for $neg$rtl.v:511$536 ($neg).
  creating $alu model for $macc $neg$rtl.v:511$536.
  creating $alu model for $ge$rtl.v:508$527 ($ge): new $alu
  creating $alu cell for $ge$rtl.v:508$527: $auto$alumacc.cc:474:replace_alu$1720
  creating $alu cell for $neg$rtl.v:511$536: $auto$alumacc.cc:474:replace_alu$1733
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module module35:
  creating $macc model for $mul$rtl.v:446$466 ($mul).
  creating $macc model for $neg$rtl.v:415$419 ($neg).
  creating $macc model for $neg$rtl.v:431$442 ($neg).
  creating $macc model for $neg$rtl.v:459$481 ($neg).
  creating $macc model for $neg$rtl.v:461$494 ($neg).
  creating $macc model for $sub$rtl.v:422$433 ($sub).
  creating $alu model for $macc $sub$rtl.v:422$433.
  creating $alu model for $macc $neg$rtl.v:461$494.
  creating $alu model for $macc $neg$rtl.v:459$481.
  creating $alu model for $macc $neg$rtl.v:431$442.
  creating $alu model for $macc $neg$rtl.v:415$419.
  creating $macc cell for $mul$rtl.v:446$466: $auto$alumacc.cc:354:replace_macc$1736
  creating $alu model for $gt$rtl.v:439$450 ($gt): new $alu
  creating $alu model for $lt$rtl.v:420$425 ($lt): new $alu
  creating $alu model for $lt$rtl.v:449$472 ($lt): new $alu
  creating $alu cell for $lt$rtl.v:449$472: $auto$alumacc.cc:474:replace_alu$1740
  creating $alu cell for $lt$rtl.v:420$425: $auto$alumacc.cc:474:replace_alu$1751
  creating $alu cell for $gt$rtl.v:439$450: $auto$alumacc.cc:474:replace_alu$1762
  creating $alu cell for $neg$rtl.v:415$419: $auto$alumacc.cc:474:replace_alu$1773
  creating $alu cell for $neg$rtl.v:431$442: $auto$alumacc.cc:474:replace_alu$1776
  creating $alu cell for $neg$rtl.v:459$481: $auto$alumacc.cc:474:replace_alu$1779
  creating $alu cell for $neg$rtl.v:461$494: $auto$alumacc.cc:474:replace_alu$1782
  creating $alu cell for $sub$rtl.v:422$433: $auto$alumacc.cc:474:replace_alu$1785
  created 8 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module module56:
  creating $macc model for $mul$rtl.v:995$1010 ($mul).
  creating $macc model for $sub$rtl.v:990$1003 ($sub).
  creating $alu model for $macc $sub$rtl.v:990$1003.
  creating $macc cell for $mul$rtl.v:995$1010: $auto$alumacc.cc:354:replace_macc$1788
  creating $alu model for $ge$rtl.v:1003$1020 ($ge): new $alu
  creating $alu cell for $ge$rtl.v:1003$1020: $auto$alumacc.cc:474:replace_alu$1790
  creating $alu cell for $sub$rtl.v:990$1003: $auto$alumacc.cc:474:replace_alu$1799
  created 2 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module module85:
  creating $macc model for $add$rtl.v:743$657 ($add).
  creating $macc model for $add$rtl.v:778$713 ($add).
  creating $macc model for $add$rtl.v:783$729 ($add).
  creating $macc model for $add$rtl.v:851$828 ($add).
  creating $macc model for $add$rtl.v:886$861 ($add).
  creating $macc model for $add$rtl.v:888$862 ($add).
  creating $macc model for $mul$rtl.v:707$605 ($mul).
  creating $macc model for $mul$rtl.v:741$659 ($mul).
  creating $macc model for $neg$rtl.v:675$554 ($neg).
  creating $macc model for $neg$rtl.v:685$562 ($neg).
  creating $macc model for $neg$rtl.v:687$563 ($neg).
  creating $macc model for $neg$rtl.v:752$668 ($neg).
  creating $macc model for $neg$rtl.v:764$685 ($neg).
  creating $macc model for $neg$rtl.v:769$697 ($neg).
  creating $macc model for $neg$rtl.v:836$810 ($neg).
  creating $macc model for $sub$rtl.v:692$575 ($sub).
  creating $alu model for $macc $sub$rtl.v:692$575.
  creating $alu model for $macc $neg$rtl.v:836$810.
  creating $alu model for $macc $neg$rtl.v:769$697.
  creating $alu model for $macc $neg$rtl.v:764$685.
  creating $alu model for $macc $neg$rtl.v:752$668.
  creating $alu model for $macc $neg$rtl.v:687$563.
  creating $alu model for $macc $neg$rtl.v:685$562.
  creating $alu model for $macc $neg$rtl.v:675$554.
  creating $alu model for $macc $add$rtl.v:888$862.
  creating $alu model for $macc $add$rtl.v:886$861.
  creating $alu model for $macc $add$rtl.v:851$828.
  creating $alu model for $macc $add$rtl.v:783$729.
  creating $alu model for $macc $add$rtl.v:778$713.
  creating $alu model for $macc $add$rtl.v:743$657.
  creating $macc cell for $mul$rtl.v:741$659: $auto$alumacc.cc:354:replace_macc$1802
  creating $macc cell for $mul$rtl.v:707$605: $auto$alumacc.cc:354:replace_macc$1803
  creating $alu model for $ge$rtl.v:688$567 ($ge): new $alu
  creating $alu model for $gt$rtl.v:692$573 ($gt): new $alu
  creating $alu model for $gt$rtl.v:814$778 ($gt): new $alu
  creating $alu model for $gt$rtl.v:844$827 ($gt): new $alu
  creating $alu model for $gt$rtl.v:903$896 ($gt): new $alu
  creating $alu model for $le$rtl.v:688$570 ($le): new $alu
  creating $alu model for $le$rtl.v:741$660 ($le): new $alu
  creating $alu model for $le$rtl.v:751$665 ($le): new $alu
  creating $alu model for $le$rtl.v:778$714 ($le): new $alu
  creating $alu model for $lt$rtl.v:709$618 ($lt): new $alu
  creating $alu model for $lt$rtl.v:741$661 ($lt): new $alu
  creating $alu model for $lt$rtl.v:788$737 ($lt): new $alu
  creating $alu model for $lt$rtl.v:794$748 ($lt): new $alu
  creating $alu model for $lt$rtl.v:876$847 ($lt): new $alu
  creating $alu model for $lt$rtl.v:877$852 ($lt): new $alu
  creating $alu cell for $lt$rtl.v:877$852: $auto$alumacc.cc:474:replace_alu$1819
  creating $alu cell for $lt$rtl.v:876$847: $auto$alumacc.cc:474:replace_alu$1830
  creating $alu cell for $lt$rtl.v:794$748: $auto$alumacc.cc:474:replace_alu$1835
  creating $alu cell for $lt$rtl.v:788$737: $auto$alumacc.cc:474:replace_alu$1840
  creating $alu cell for $lt$rtl.v:741$661: $auto$alumacc.cc:474:replace_alu$1851
  creating $alu cell for $lt$rtl.v:709$618: $auto$alumacc.cc:474:replace_alu$1862
  creating $alu cell for $le$rtl.v:778$714: $auto$alumacc.cc:474:replace_alu$1867
  creating $alu cell for $le$rtl.v:751$665: $auto$alumacc.cc:474:replace_alu$1876
  creating $alu cell for $le$rtl.v:741$660: $auto$alumacc.cc:474:replace_alu$1889
  creating $alu cell for $le$rtl.v:688$570: $auto$alumacc.cc:474:replace_alu$1902
  creating $alu cell for $gt$rtl.v:903$896: $auto$alumacc.cc:474:replace_alu$1915
  creating $alu cell for $gt$rtl.v:844$827: $auto$alumacc.cc:474:replace_alu$1920
  creating $alu cell for $gt$rtl.v:814$778: $auto$alumacc.cc:474:replace_alu$1931
  creating $alu cell for $gt$rtl.v:692$573: $auto$alumacc.cc:474:replace_alu$1942
  creating $alu cell for $ge$rtl.v:688$567: $auto$alumacc.cc:474:replace_alu$1953
  creating $alu cell for $add$rtl.v:743$657: $auto$alumacc.cc:474:replace_alu$1962
  creating $alu cell for $add$rtl.v:778$713: $auto$alumacc.cc:474:replace_alu$1965
  creating $alu cell for $add$rtl.v:783$729: $auto$alumacc.cc:474:replace_alu$1968
  creating $alu cell for $add$rtl.v:851$828: $auto$alumacc.cc:474:replace_alu$1971
  creating $alu cell for $add$rtl.v:886$861: $auto$alumacc.cc:474:replace_alu$1974
  creating $alu cell for $add$rtl.v:888$862: $auto$alumacc.cc:474:replace_alu$1977
  creating $alu cell for $neg$rtl.v:675$554: $auto$alumacc.cc:474:replace_alu$1980
  creating $alu cell for $neg$rtl.v:685$562: $auto$alumacc.cc:474:replace_alu$1983
  creating $alu cell for $neg$rtl.v:687$563: $auto$alumacc.cc:474:replace_alu$1986
  creating $alu cell for $neg$rtl.v:752$668: $auto$alumacc.cc:474:replace_alu$1989
  creating $alu cell for $neg$rtl.v:764$685: $auto$alumacc.cc:474:replace_alu$1992
  creating $alu cell for $neg$rtl.v:769$697: $auto$alumacc.cc:474:replace_alu$1995
  creating $alu cell for $neg$rtl.v:836$810: $auto$alumacc.cc:474:replace_alu$1998
  creating $alu cell for $sub$rtl.v:692$575: $auto$alumacc.cc:474:replace_alu$2001
  created 29 $alu and 2 $macc cells.
Extracting $alu and $macc cells in module top:
  creating $macc model for $add$rtl.v:133$21 ($add).
  creating $macc model for $add$rtl.v:162$63 ($add).
  creating $macc model for $add$rtl.v:221$177 ($add).
  creating $macc model for $add$rtl.v:243$198 ($add).
  creating $macc model for $add$rtl.v:283$255 ($add).
  creating $macc model for $mul$rtl.v:172$83 ($mul).
  creating $macc model for $mul$rtl.v:286$262 ($mul).
  creating $macc model for $mul$rtl.v:309$313 ($mul).
  creating $macc model for $neg$rtl.v:141$26 ($neg).
  creating $macc model for $neg$rtl.v:182$109 ($neg).
  creating $macc model for $neg$rtl.v:206$146 ($neg).
  creating $macc model for $neg$rtl.v:301$293 ($neg).
  creating $macc model for $neg$rtl.v:315$315 ($neg).
  creating $macc model for $sub$rtl.v:141$28 ($sub).
  creating $macc model for $sub$rtl.v:292$276 ($sub).
  merging $macc model for $neg$rtl.v:141$26 into $sub$rtl.v:141$28.
  creating $alu model for $macc $sub$rtl.v:141$28.
  creating $alu model for $macc $neg$rtl.v:315$315.
  creating $alu model for $macc $neg$rtl.v:301$293.
  creating $alu model for $macc $neg$rtl.v:206$146.
  creating $alu model for $macc $neg$rtl.v:182$109.
  creating $alu model for $macc $sub$rtl.v:292$276.
  creating $alu model for $macc $add$rtl.v:283$255.
  creating $alu model for $macc $add$rtl.v:243$198.
  creating $alu model for $macc $add$rtl.v:221$177.
  creating $alu model for $macc $add$rtl.v:162$63.
  creating $alu model for $macc $add$rtl.v:133$21.
  creating $macc cell for $mul$rtl.v:172$83: $auto$alumacc.cc:354:replace_macc$2004
  creating $macc cell for $mul$rtl.v:309$313: $auto$alumacc.cc:354:replace_macc$2005
  creating $macc cell for $mul$rtl.v:286$262: $auto$alumacc.cc:354:replace_macc$2006
  creating $alu model for $ge$rtl.v:202$136 ($ge): new $alu
  creating $alu model for $ge$rtl.v:255$227 ($ge): new $alu
  creating $alu model for $gt$rtl.v:297$289 ($gt): new $alu
  creating $alu model for $le$rtl.v:219$173 ($le): new $alu
  creating $alu model for $le$rtl.v:245$207 ($le): new $alu
  creating $alu model for $le$rtl.v:246$208 ($le): new $alu
  creating $alu model for $le$rtl.v:259$231 ($le): new $alu
  creating $alu model for $le$rtl.v:309$310 ($le): new $alu
  creating $alu model for $lt$rtl.v:117$1 ($lt): new $alu
  creating $alu model for $lt$rtl.v:121$7 ($lt): new $alu
  creating $alu model for $lt$rtl.v:122$12 ($lt): new $alu
  creating $alu model for $lt$rtl.v:293$280 ($lt): new $alu
  creating $alu model for $lt$rtl.v:308$301 ($lt): new $alu
  creating $alu model for $lt$rtl.v:316$320 ($lt): new $alu
  creating $alu cell for $lt$rtl.v:316$320: $auto$alumacc.cc:474:replace_alu$2021
  creating $alu cell for $lt$rtl.v:308$301: $auto$alumacc.cc:474:replace_alu$2032
  creating $alu cell for $lt$rtl.v:293$280: $auto$alumacc.cc:474:replace_alu$2037
  creating $alu cell for $lt$rtl.v:122$12: $auto$alumacc.cc:474:replace_alu$2042
  creating $alu cell for $lt$rtl.v:121$7: $auto$alumacc.cc:474:replace_alu$2047
  creating $alu cell for $lt$rtl.v:117$1: $auto$alumacc.cc:474:replace_alu$2058
  creating $alu cell for $le$rtl.v:309$310: $auto$alumacc.cc:474:replace_alu$2063
  creating $alu cell for $le$rtl.v:259$231: $auto$alumacc.cc:474:replace_alu$2076
  creating $alu cell for $le$rtl.v:246$208: $auto$alumacc.cc:474:replace_alu$2085
  creating $alu cell for $le$rtl.v:245$207: $auto$alumacc.cc:474:replace_alu$2100
  creating $alu cell for $le$rtl.v:219$173: $auto$alumacc.cc:474:replace_alu$2109
  creating $alu cell for $gt$rtl.v:297$289: $auto$alumacc.cc:474:replace_alu$2122
  creating $alu cell for $ge$rtl.v:255$227: $auto$alumacc.cc:474:replace_alu$2127
  creating $alu cell for $ge$rtl.v:202$136: $auto$alumacc.cc:474:replace_alu$2140
  creating $alu cell for $add$rtl.v:133$21: $auto$alumacc.cc:474:replace_alu$2149
  creating $alu cell for $add$rtl.v:162$63: $auto$alumacc.cc:474:replace_alu$2152
  creating $alu cell for $add$rtl.v:221$177: $auto$alumacc.cc:474:replace_alu$2155
  creating $alu cell for $add$rtl.v:243$198: $auto$alumacc.cc:474:replace_alu$2158
  creating $alu cell for $add$rtl.v:283$255: $auto$alumacc.cc:474:replace_alu$2161
  creating $alu cell for $sub$rtl.v:292$276: $auto$alumacc.cc:474:replace_alu$2164
  creating $alu cell for $neg$rtl.v:182$109: $auto$alumacc.cc:474:replace_alu$2167
  creating $alu cell for $neg$rtl.v:206$146: $auto$alumacc.cc:474:replace_alu$2170
  creating $alu cell for $neg$rtl.v:301$293: $auto$alumacc.cc:474:replace_alu$2173
  creating $alu cell for $neg$rtl.v:315$315: $auto$alumacc.cc:474:replace_alu$2176
  creating $alu cell for $sub$rtl.v:141$28: $auto$alumacc.cc:474:replace_alu$2179
  created 25 $alu and 3 $macc cells.

2.12. Executing SHARE pass (SAT-based resource sharing).
Found 6 cells in module module35 that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$rtl.v:461$493 ($sshr):
    Found 1 activation_patterns using ctrl signal $procmux$1224_CMP.
    Found 3 candidates: $sshr$rtl.v:442$453 $sshr$rtl.v:431$443 $sshr$rtl.v:394$387
    Analyzing resource sharing with $sshr$rtl.v:442$453 ($sshr):
      Found 1 activation_patterns using ctrl signal { $reduce_bool$rtl.v:442$454_Y $auto$rtlil.cc:1832:Not$1772 }.
      Forbidden control signals for this pair of cells: $procmux$1224_CMP
      Activation pattern for cell $sshr$rtl.v:461$493: { } = 0'
      Activation pattern for cell $sshr$rtl.v:442$453: { $reduce_bool$rtl.v:442$454_Y $auto$rtlil.cc:1832:Not$1772 } = 2'10
      Size of SAT problem: 9 cells, 676 variables, 1640 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $reduce_bool$rtl.v:442$454_Y $auto$rtlil.cc:1832:Not$1772 } = 2'10
    Analyzing resource sharing with $sshr$rtl.v:431$443 ($sshr):
      Found 1 activation_patterns using ctrl signal { $procmux$1239_CMP $procmux$1236_CMP }.
      Forbidden control signals for this pair of cells: $reduce_bool$rtl.v:432$446_Y
      Activation pattern for cell $sshr$rtl.v:461$493: $procmux$1224_CMP = 1'0
      Activation pattern for cell $sshr$rtl.v:431$443: { $procmux$1239_CMP $procmux$1236_CMP } = 2'00
      Size of SAT problem: 18 cells, 1148 variables, 2819 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $procmux$1239_CMP $procmux$1236_CMP $procmux$1224_CMP } = 3'000
    Analyzing resource sharing with $sshr$rtl.v:394$387 ($sshr):
      Found 1 activation_patterns using ctrl signal $logic_or$rtl.v:392$383_Y.
      Forbidden control signals for this pair of cells: $procmux$1239_CMP
      Activation pattern for cell $sshr$rtl.v:461$493: $procmux$1224_CMP = 1'0
      Activation pattern for cell $sshr$rtl.v:394$387: $logic_or$rtl.v:392$383_Y = 1'1
      Size of SAT problem: 10 cells, 700 variables, 1690 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $procmux$1224_CMP $logic_or$rtl.v:392$383_Y } = 2'01
  Analyzing resource sharing options for $sshr$rtl.v:442$453 ($sshr):
    Found 1 activation_patterns using ctrl signal { $reduce_bool$rtl.v:442$454_Y $auto$rtlil.cc:1832:Not$1772 }.
    Found 2 candidates: $sshr$rtl.v:431$443 $sshr$rtl.v:394$387
    Analyzing resource sharing with $sshr$rtl.v:431$443 ($sshr):
      Found 1 activation_patterns using ctrl signal { $procmux$1239_CMP $procmux$1236_CMP }.
      Forbidden control signals for this pair of cells: { $procmux$1224_CMP $reduce_bool$rtl.v:432$446_Y }
      Activation pattern for cell $sshr$rtl.v:442$453: { $reduce_bool$rtl.v:442$454_Y $auto$rtlil.cc:1832:Not$1772 } = 2'10
      Activation pattern for cell $sshr$rtl.v:431$443: { $procmux$1239_CMP $procmux$1236_CMP } = 2'00
      Size of SAT problem: 15 cells, 785 variables, 1965 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $procmux$1239_CMP $procmux$1236_CMP $reduce_bool$rtl.v:442$454_Y $auto$rtlil.cc:1832:Not$1772 } = 4'0010
    Analyzing resource sharing with $sshr$rtl.v:394$387 ($sshr):
      Found 1 activation_patterns using ctrl signal $logic_or$rtl.v:392$383_Y.
      Forbidden control signals for this pair of cells: { $procmux$1239_CMP $procmux$1224_CMP }
      Activation pattern for cell $sshr$rtl.v:442$453: { $reduce_bool$rtl.v:442$454_Y $auto$rtlil.cc:1832:Not$1772 } = 2'10
      Activation pattern for cell $sshr$rtl.v:394$387: $logic_or$rtl.v:392$383_Y = 1'1
      Size of SAT problem: 7 cells, 337 variables, 836 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $reduce_bool$rtl.v:442$454_Y $logic_or$rtl.v:392$383_Y $auto$rtlil.cc:1832:Not$1772 } = 3'110
  Analyzing resource sharing options for $sshr$rtl.v:431$443 ($sshr):
    Found 1 activation_patterns using ctrl signal { $procmux$1239_CMP $procmux$1236_CMP }.
    Found 1 candidates: $sshr$rtl.v:394$387
    Analyzing resource sharing with $sshr$rtl.v:394$387 ($sshr):
      Found 1 activation_patterns using ctrl signal $logic_or$rtl.v:392$383_Y.
      Forbidden control signals for this pair of cells: { $procmux$1239_CMP $reduce_bool$rtl.v:432$446_Y }
      Activation pattern for cell $sshr$rtl.v:431$443: $procmux$1236_CMP = 1'0
      Activation pattern for cell $sshr$rtl.v:394$387: $logic_or$rtl.v:392$383_Y = 1'1
      Size of SAT problem: 9 cells, 488 variables, 1182 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $procmux$1236_CMP $logic_or$rtl.v:392$383_Y } = 2'01
  Analyzing resource sharing options for $sshr$rtl.v:394$387 ($sshr):
    Found 1 activation_patterns using ctrl signal $logic_or$rtl.v:392$383_Y.
    No candidates found.
  Analyzing resource sharing options for $shr$rtl.v:432$445 ($shr):
    Found 1 activation_patterns using ctrl signal { $procmux$1239_CMP $procmux$1236_CMP $reduce_bool$rtl.v:432$446_Y }.
    No candidates found.
  Analyzing resource sharing options for $shr$rtl.v:415$424 ($shr):
    Found 1 activation_patterns using ctrl signal { $procmux$1266_CMP $procmux$1239_CMP }.
    No candidates found.
Found 10 cells in module module85 that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$rtl.v:880$859 ($sshr):
    Found 1 activation_patterns using ctrl signal { $procmux$1077_CMP $neg$rtl.v:872$845_Y }.
    No candidates found.
  Analyzing resource sharing options for $sshr$rtl.v:783$730 ($sshr):
    Found 1 activation_patterns using ctrl signal $reduce_bool$rtl.v:783$731_Y.
    No candidates found.
  Analyzing resource sharing options for $sshr$rtl.v:752$667 ($sshr):
    Found 1 activation_patterns using ctrl signal { $auto$rtlil.cc:1836:ReduceOr$1888 $procmux$1146_CMP $reduce_bool$rtl.v:753$675_Y $reduce_bool$rtl.v:752$669_Y }.
    No candidates found.
  Analyzing resource sharing options for $sshl$rtl.v:910$915 ($sshl):
    Found 1 activation_patterns using ctrl signal { $reduce_bool$rtl.v:912$924_Y $reduce_bool$rtl.v:910$917_Y }.
    Found 1 candidates: $sshl$rtl.v:886$860
    Analyzing resource sharing with $sshl$rtl.v:886$860 ($sshl):
      Found 1 activation_patterns using ctrl signal $procmux$1077_CMP.
      Forbidden control signals for this pair of cells: $reduce_bool$rtl.v:891$876_Y
      Activation pattern for cell $sshl$rtl.v:910$915: { $reduce_bool$rtl.v:912$924_Y $reduce_bool$rtl.v:910$917_Y } = 2'10
      Activation pattern for cell $sshl$rtl.v:886$860: $procmux$1077_CMP = 1'0
      Size of SAT problem: 17 cells, 514 variables, 1188 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $procmux$1077_CMP $reduce_bool$rtl.v:912$924_Y $reduce_bool$rtl.v:910$917_Y } = 3'010
  Analyzing resource sharing options for $sshl$rtl.v:886$860 ($sshl):
    Found 1 activation_patterns using ctrl signal $procmux$1077_CMP.
    No candidates found.
  Analyzing resource sharing options for $shr$rtl.v:851$830 ($shr):
    Found 1 activation_patterns using ctrl signal { $procmux$1114_CMP $procmux$1077_CMP }.
    No candidates found.
  Analyzing resource sharing options for $shr$rtl.v:831$800 ($shr):
    Found 1 activation_patterns using ctrl signal { $procmux$1084_CMP $procmux$1077_CMP }.
    Found 1 candidates: $shr$rtl.v:793$741
    Analyzing resource sharing with $shr$rtl.v:793$741 ($shr):
      Found 1 activation_patterns using ctrl signal $procmux$1047_CMP.
      Forbidden control signals for this pair of cells: { $procmux$1044_CMP $reduce_bool$rtl.v:832$801_Y $lt$rtl.v:794$748_Y }
      Activation pattern for cell $shr$rtl.v:831$800: { $procmux$1084_CMP $procmux$1077_CMP } = 2'01
      Activation pattern for cell $shr$rtl.v:793$741: $procmux$1047_CMP = 1'0
      Size of SAT problem: 21 cells, 1038 variables, 2564 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $procmux$1084_CMP $procmux$1077_CMP $procmux$1047_CMP } = 3'010
  Analyzing resource sharing options for $shr$rtl.v:793$741 ($shr):
    Found 1 activation_patterns using ctrl signal $procmux$1047_CMP.
    No candidates found.
  Analyzing resource sharing options for $shl$rtl.v:799$757 ($shl):
    Found 1 activation_patterns using ctrl signal { $procmux$1044_CMP $procmux$1047_CMP }.
    No candidates found.
  Analyzing resource sharing options for $shl$rtl.v:698$592 ($shl):
    Found 1 activation_patterns using ctrl signal { $procmux$1192_CMP $procmux$1185_CMP $reduce_or$rtl.v:696$584_Y }.
    No candidates found.
Found 9 cells in module top that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$rtl.v:207$151 ($sshr):
    Found 1 activation_patterns using ctrl signal { $procmux$1413_CMP $reduce_bool$rtl.v:208$153_Y $logic_not$rtl.v:206$148_Y $logic_not$rtl.v:169$81_Y }.
    No candidates found.
  Analyzing resource sharing options for $sshl$rtl.v:284$259 ($sshl):
    Found 1 activation_patterns using ctrl signal $procmux$1329_CMP.
    No candidates found.
  Analyzing resource sharing options for $sshl$rtl.v:244$202 ($sshl):
    Found 1 activation_patterns using ctrl signal $procmux$1303_CMP.
    No candidates found.
  Analyzing resource sharing options for $sshl$rtl.v:241$190 ($sshl):
    Found 1 activation_patterns using ctrl signal { $procmux$1368_CMP $logic_not$rtl.v:240$189_Y }.
    No candidates found.
  Analyzing resource sharing options for $shr$rtl.v:276$245 ($shr):
    Found 1 activation_patterns using ctrl signal $procmux$1299_CMP.
    No candidates found.
  Analyzing resource sharing options for $shl$rtl.v:308$304 ($shl):
    Found 1 activation_patterns using ctrl signal { $procmux$1339_CMP $procmux$1329_CMP $reduce_bool$rtl.v:308$305_Y }.
    No candidates found.
  Analyzing resource sharing options for $shl$rtl.v:281$249 ($shl):
    Found 1 activation_patterns using ctrl signal $procmux$1329_CMP.
    No candidates found.
  Analyzing resource sharing options for $shl$rtl.v:246$209 ($shl):
    Found 1 activation_patterns using ctrl signal { $auto$rtlil.cc:1836:ReduceOr$2108 $reduce_bool$rtl.v:246$212_Y }.
    No candidates found.
  Analyzing resource sharing options for $shl$rtl.v:172$82 ($shl):
    Found 1 activation_patterns using ctrl signal $logic_not$rtl.v:169$81_Y.
    No candidates found.

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module156.
Optimizing module module35.
<suppressed ~2 debug messages>
Optimizing module module56.
<suppressed ~3 debug messages>
Optimizing module module85.
<suppressed ~13 debug messages>
Optimizing module top.
<suppressed ~28 debug messages>

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module156'.
Finding identical cells in module `\module35'.
Finding identical cells in module `\module56'.
Finding identical cells in module `\module85'.
<suppressed ~3 debug messages>
Finding identical cells in module `\top'.
<suppressed ~3 debug messages>
Removed a total of 2 cells.

2.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module156..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module35..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module56..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module85..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $ternary$rtl.v:762$680: { 11'00000000000 \wire108 } -> 12'000000000001
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$1302: { 4'0000 \reg178 [0] 12'000000000000 \wire9 } -> { 4'0000 \reg178 [0] 13'0000000000000 }
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~179 debug messages>

2.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module156.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1723: { $auto$alumacc.cc:490:replace_alu$1721 [0] $auto$alumacc.cc:490:replace_alu$1721 [1] $auto$alumacc.cc:490:replace_alu$1721 [2] $auto$alumacc.cc:490:replace_alu$1721 [3] $auto$alumacc.cc:490:replace_alu$1721 [4] $auto$alumacc.cc:490:replace_alu$1721 [5] $auto$alumacc.cc:490:replace_alu$1721 [6] $auto$alumacc.cc:490:replace_alu$1721 [7] $auto$alumacc.cc:490:replace_alu$1721 [8] $auto$alumacc.cc:490:replace_alu$1721 [9] $auto$alumacc.cc:490:replace_alu$1721 [10] $auto$alumacc.cc:490:replace_alu$1721 [11] $auto$alumacc.cc:490:replace_alu$1721 [12] }
  Optimizing cells in module \module156.
  Optimizing cells in module \module35.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1743: { $auto$alumacc.cc:490:replace_alu$1741 [0] $auto$alumacc.cc:490:replace_alu$1741 [1] $auto$alumacc.cc:490:replace_alu$1741 [2] $auto$alumacc.cc:490:replace_alu$1741 [3] $auto$alumacc.cc:490:replace_alu$1741 [4] $auto$alumacc.cc:490:replace_alu$1741 [5] $auto$alumacc.cc:490:replace_alu$1741 [6] $auto$alumacc.cc:490:replace_alu$1741 [7] $auto$alumacc.cc:490:replace_alu$1741 [8] $auto$alumacc.cc:490:replace_alu$1741 [9] $auto$alumacc.cc:490:replace_alu$1741 [10] $auto$alumacc.cc:490:replace_alu$1741 [11] $auto$alumacc.cc:490:replace_alu$1741 [12] $auto$alumacc.cc:490:replace_alu$1741 [13] $auto$alumacc.cc:490:replace_alu$1741 [14] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1754: { $auto$alumacc.cc:490:replace_alu$1752 [0] $auto$alumacc.cc:490:replace_alu$1752 [1] $auto$alumacc.cc:490:replace_alu$1752 [2] $auto$alumacc.cc:490:replace_alu$1752 [3] $auto$alumacc.cc:490:replace_alu$1752 [4] $auto$alumacc.cc:490:replace_alu$1752 [5] $auto$alumacc.cc:490:replace_alu$1752 [6] $auto$alumacc.cc:490:replace_alu$1752 [7] $auto$alumacc.cc:490:replace_alu$1752 [8] $auto$alumacc.cc:490:replace_alu$1752 [9] $auto$alumacc.cc:490:replace_alu$1752 [10] $auto$alumacc.cc:490:replace_alu$1752 [11] $auto$alumacc.cc:490:replace_alu$1752 [12] $auto$alumacc.cc:490:replace_alu$1752 [13] $auto$alumacc.cc:490:replace_alu$1752 [14] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1765: { $auto$alumacc.cc:490:replace_alu$1763 [0] $auto$alumacc.cc:490:replace_alu$1763 [1] $auto$alumacc.cc:490:replace_alu$1763 [2] $auto$alumacc.cc:490:replace_alu$1763 [3] $auto$alumacc.cc:490:replace_alu$1763 [4] $auto$alumacc.cc:490:replace_alu$1763 [5] $auto$alumacc.cc:490:replace_alu$1763 [6] $auto$alumacc.cc:490:replace_alu$1763 [7] $auto$alumacc.cc:490:replace_alu$1763 [8] $auto$alumacc.cc:490:replace_alu$1763 [9] $auto$alumacc.cc:490:replace_alu$1763 [10] $auto$alumacc.cc:490:replace_alu$1763 [11] $auto$alumacc.cc:490:replace_alu$1763 [12] }
  Optimizing cells in module \module35.
  Optimizing cells in module \module56.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1797: { $auto$rtlil.cc:1832:Not$1794 $auto$rtlil.cc:1835:ReduceAnd$1796 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1795: { $auto$alumacc.cc:490:replace_alu$1791 [0] $auto$alumacc.cc:490:replace_alu$1791 [1] $auto$alumacc.cc:490:replace_alu$1791 [2] $auto$alumacc.cc:490:replace_alu$1791 [3] }
  Optimizing cells in module \module56.
  Optimizing cells in module \module85.
    New input vector for $reduce_or cell $reduce_or$rtl.v:733$637: { \reg99 [0] \reg99 [1] \reg99 [2] \reg99 [3] \reg99 [4] \reg99 [5] \reg99 [6] \reg99 [7] }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1874: { $auto$rtlil.cc:1832:Not$1871 $auto$rtlil.cc:1835:ReduceAnd$1873 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1887: { $auto$rtlil.cc:1832:Not$1886 $auto$rtlil.cc:1835:ReduceAnd$1880 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1913: { $auto$rtlil.cc:1832:Not$1912 $auto$rtlil.cc:1835:ReduceAnd$1906 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1934: { $auto$alumacc.cc:490:replace_alu$1932 [0] $auto$alumacc.cc:490:replace_alu$1932 [1] $auto$alumacc.cc:490:replace_alu$1932 [2] $auto$alumacc.cc:490:replace_alu$1932 [3] $auto$alumacc.cc:490:replace_alu$1932 [4] $auto$alumacc.cc:490:replace_alu$1932 [5] $auto$alumacc.cc:490:replace_alu$1932 [6] $auto$alumacc.cc:490:replace_alu$1932 [7] $auto$alumacc.cc:490:replace_alu$1932 [8] $auto$alumacc.cc:490:replace_alu$1932 [9] $auto$alumacc.cc:490:replace_alu$1932 [10] $auto$alumacc.cc:490:replace_alu$1932 [11] $auto$alumacc.cc:490:replace_alu$1932 [12] $auto$alumacc.cc:490:replace_alu$1932 [13] $auto$alumacc.cc:490:replace_alu$1932 [14] $auto$alumacc.cc:490:replace_alu$1932 [15] $auto$alumacc.cc:490:replace_alu$1932 [16] $auto$alumacc.cc:490:replace_alu$1932 [17] $auto$alumacc.cc:490:replace_alu$1932 [18] $auto$alumacc.cc:490:replace_alu$1932 [19] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1958: { $auto$alumacc.cc:490:replace_alu$1954 [0] $auto$alumacc.cc:490:replace_alu$1954 [1] $auto$alumacc.cc:490:replace_alu$1954 [2] $auto$alumacc.cc:490:replace_alu$1954 [3] $auto$alumacc.cc:490:replace_alu$1954 [4] $auto$alumacc.cc:490:replace_alu$1954 [5] $auto$alumacc.cc:490:replace_alu$1954 [6] $auto$alumacc.cc:490:replace_alu$1954 [7] $auto$alumacc.cc:490:replace_alu$1954 [8] $auto$alumacc.cc:490:replace_alu$1954 [9] $auto$alumacc.cc:490:replace_alu$1954 [10] $auto$alumacc.cc:490:replace_alu$1954 [11] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1945: { $auto$alumacc.cc:490:replace_alu$1943 [0] $auto$alumacc.cc:490:replace_alu$1943 [1] $auto$alumacc.cc:490:replace_alu$1943 [2] $auto$alumacc.cc:490:replace_alu$1943 [3] $auto$alumacc.cc:490:replace_alu$1943 [4] $auto$alumacc.cc:490:replace_alu$1943 [5] $auto$alumacc.cc:490:replace_alu$1943 [6] $auto$alumacc.cc:490:replace_alu$1943 [7] $auto$alumacc.cc:490:replace_alu$1943 [8] $auto$alumacc.cc:490:replace_alu$1943 [9] $auto$alumacc.cc:490:replace_alu$1943 [10] $auto$alumacc.cc:490:replace_alu$1943 [11] $auto$alumacc.cc:490:replace_alu$1943 [12] $auto$alumacc.cc:490:replace_alu$1943 [13] $auto$alumacc.cc:490:replace_alu$1943 [14] $auto$alumacc.cc:490:replace_alu$1943 [15] $auto$alumacc.cc:490:replace_alu$1943 [16] $auto$alumacc.cc:490:replace_alu$1943 [17] $auto$alumacc.cc:490:replace_alu$1943 [18] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1822: { $auto$alumacc.cc:490:replace_alu$1820 [0] $auto$alumacc.cc:490:replace_alu$1820 [1] $auto$alumacc.cc:490:replace_alu$1820 [2] $auto$alumacc.cc:490:replace_alu$1820 [3] $auto$alumacc.cc:490:replace_alu$1820 [4] $auto$alumacc.cc:490:replace_alu$1820 [5] $auto$alumacc.cc:490:replace_alu$1820 [6] $auto$alumacc.cc:490:replace_alu$1820 [7] $auto$alumacc.cc:490:replace_alu$1820 [8] $auto$alumacc.cc:490:replace_alu$1820 [9] $auto$alumacc.cc:490:replace_alu$1820 [10] $auto$alumacc.cc:490:replace_alu$1820 [11] $auto$alumacc.cc:490:replace_alu$1820 [12] $auto$alumacc.cc:490:replace_alu$1820 [13] $auto$alumacc.cc:490:replace_alu$1820 [14] $auto$alumacc.cc:490:replace_alu$1820 [15] $auto$alumacc.cc:490:replace_alu$1820 [16] $auto$alumacc.cc:490:replace_alu$1820 [17] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1843: { $auto$alumacc.cc:490:replace_alu$1841 [0] $auto$alumacc.cc:490:replace_alu$1841 [1] $auto$alumacc.cc:490:replace_alu$1841 [2] $auto$alumacc.cc:490:replace_alu$1841 [3] $auto$alumacc.cc:490:replace_alu$1841 [4] $auto$alumacc.cc:490:replace_alu$1841 [5] $auto$alumacc.cc:490:replace_alu$1841 [6] $auto$alumacc.cc:490:replace_alu$1841 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1872: { $auto$alumacc.cc:490:replace_alu$1868 [0] $auto$alumacc.cc:490:replace_alu$1868 [1] $auto$alumacc.cc:490:replace_alu$1868 [2] $auto$alumacc.cc:490:replace_alu$1868 [3] $auto$alumacc.cc:490:replace_alu$1868 [4] $auto$alumacc.cc:490:replace_alu$1868 [5] $auto$alumacc.cc:490:replace_alu$1868 [6] $auto$alumacc.cc:490:replace_alu$1868 [7] $auto$alumacc.cc:490:replace_alu$1868 [8] $auto$alumacc.cc:490:replace_alu$1868 [9] $auto$alumacc.cc:490:replace_alu$1868 [10] $auto$alumacc.cc:490:replace_alu$1868 [11] $auto$alumacc.cc:490:replace_alu$1868 [12] $auto$alumacc.cc:490:replace_alu$1868 [13] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1879: { $auto$alumacc.cc:490:replace_alu$1877 [0] $auto$alumacc.cc:490:replace_alu$1877 [1] $auto$alumacc.cc:490:replace_alu$1877 [2] $auto$alumacc.cc:490:replace_alu$1877 [3] $auto$alumacc.cc:490:replace_alu$1877 [4] $auto$alumacc.cc:490:replace_alu$1877 [5] $auto$alumacc.cc:490:replace_alu$1877 [6] $auto$alumacc.cc:490:replace_alu$1877 [7] $auto$alumacc.cc:490:replace_alu$1877 [8] $auto$alumacc.cc:490:replace_alu$1877 [9] $auto$alumacc.cc:490:replace_alu$1877 [10] $auto$alumacc.cc:490:replace_alu$1877 [11] $auto$alumacc.cc:490:replace_alu$1877 [12] $auto$alumacc.cc:490:replace_alu$1877 [13] $auto$alumacc.cc:490:replace_alu$1877 [14] $auto$alumacc.cc:490:replace_alu$1877 [15] $auto$alumacc.cc:490:replace_alu$1877 [16] $auto$alumacc.cc:490:replace_alu$1877 [17] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1892: { $auto$alumacc.cc:490:replace_alu$1890 [0] $auto$alumacc.cc:490:replace_alu$1890 [1] $auto$alumacc.cc:490:replace_alu$1890 [2] $auto$alumacc.cc:490:replace_alu$1890 [3] $auto$alumacc.cc:490:replace_alu$1890 [4] $auto$alumacc.cc:490:replace_alu$1890 [5] $auto$alumacc.cc:490:replace_alu$1890 [6] $auto$alumacc.cc:490:replace_alu$1890 [7] $auto$alumacc.cc:490:replace_alu$1890 [8] $auto$alumacc.cc:490:replace_alu$1890 [9] $auto$alumacc.cc:490:replace_alu$1890 [10] $auto$alumacc.cc:490:replace_alu$1890 [11] $auto$alumacc.cc:490:replace_alu$1890 [12] $auto$alumacc.cc:490:replace_alu$1890 [13] $auto$alumacc.cc:490:replace_alu$1890 [14] $auto$alumacc.cc:490:replace_alu$1890 [15] $auto$alumacc.cc:490:replace_alu$1890 [16] $auto$alumacc.cc:490:replace_alu$1890 [17] $auto$alumacc.cc:490:replace_alu$1890 [18] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1905: { $auto$alumacc.cc:490:replace_alu$1903 [0] $auto$alumacc.cc:490:replace_alu$1903 [1] $auto$alumacc.cc:490:replace_alu$1903 [2] $auto$alumacc.cc:490:replace_alu$1903 [3] $auto$alumacc.cc:490:replace_alu$1903 [4] $auto$alumacc.cc:490:replace_alu$1903 [5] $auto$alumacc.cc:490:replace_alu$1903 [6] $auto$alumacc.cc:490:replace_alu$1903 [7] $auto$alumacc.cc:490:replace_alu$1903 [8] $auto$alumacc.cc:490:replace_alu$1903 [9] $auto$alumacc.cc:490:replace_alu$1903 [10] $auto$alumacc.cc:490:replace_alu$1903 [11] $auto$alumacc.cc:490:replace_alu$1903 [12] $auto$alumacc.cc:490:replace_alu$1903 [13] $auto$alumacc.cc:490:replace_alu$1903 [14] $auto$alumacc.cc:490:replace_alu$1903 [15] $auto$alumacc.cc:490:replace_alu$1903 [16] $auto$alumacc.cc:490:replace_alu$1903 [17] $auto$alumacc.cc:490:replace_alu$1903 [18] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1923: { $auto$alumacc.cc:490:replace_alu$1921 [0] $auto$alumacc.cc:490:replace_alu$1921 [1] $auto$alumacc.cc:490:replace_alu$1921 [2] $auto$alumacc.cc:490:replace_alu$1921 [3] $auto$alumacc.cc:490:replace_alu$1921 [4] $auto$alumacc.cc:490:replace_alu$1921 [5] $auto$alumacc.cc:490:replace_alu$1921 [6] $auto$alumacc.cc:490:replace_alu$1921 [7] $auto$alumacc.cc:490:replace_alu$1921 [8] $auto$alumacc.cc:490:replace_alu$1921 [9] $auto$alumacc.cc:490:replace_alu$1921 [10] $auto$alumacc.cc:490:replace_alu$1921 [11] $auto$alumacc.cc:490:replace_alu$1921 [12] $auto$alumacc.cc:490:replace_alu$1921 [13] $auto$alumacc.cc:490:replace_alu$1921 [14] $auto$alumacc.cc:490:replace_alu$1921 [15] $auto$alumacc.cc:490:replace_alu$1921 [16] $auto$alumacc.cc:490:replace_alu$1921 [17] $auto$alumacc.cc:490:replace_alu$1921 [18] $auto$alumacc.cc:490:replace_alu$1921 [19] $auto$alumacc.cc:490:replace_alu$1921 [20] $auto$alumacc.cc:490:replace_alu$1921 [21] $auto$alumacc.cc:490:replace_alu$1921 [22] $auto$alumacc.cc:490:replace_alu$1921 [23] $auto$alumacc.cc:490:replace_alu$1921 [24] $auto$alumacc.cc:490:replace_alu$1921 [25] $auto$alumacc.cc:490:replace_alu$1921 [26] $auto$alumacc.cc:490:replace_alu$1921 [27] $auto$alumacc.cc:490:replace_alu$1921 [28] $auto$alumacc.cc:490:replace_alu$1921 [29] }
  Optimizing cells in module \module85.
  Optimizing cells in module \top.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$2074: { $auto$rtlil.cc:1832:Not$2073 $auto$rtlil.cc:1835:ReduceAnd$2067 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$2098: { $auto$rtlil.cc:1832:Not$2097 $auto$rtlil.cc:1835:ReduceAnd$2089 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$2120: { $auto$rtlil.cc:1832:Not$2119 $auto$rtlil.cc:1835:ReduceAnd$2113 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$2138: { $auto$rtlil.cc:1832:Not$2137 $auto$rtlil.cc:1835:ReduceAnd$2131 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$2105: { $auto$alumacc.cc:490:replace_alu$2101 [0] $auto$alumacc.cc:490:replace_alu$2101 [1] $auto$alumacc.cc:490:replace_alu$2101 [2] $auto$alumacc.cc:490:replace_alu$2101 [3] $auto$alumacc.cc:490:replace_alu$2101 [4] $auto$alumacc.cc:490:replace_alu$2101 [5] $auto$alumacc.cc:490:replace_alu$2101 [6] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$2130: { $auto$alumacc.cc:490:replace_alu$2128 [0] $auto$alumacc.cc:490:replace_alu$2128 [1] $auto$alumacc.cc:490:replace_alu$2128 [2] $auto$alumacc.cc:490:replace_alu$2128 [3] $auto$alumacc.cc:490:replace_alu$2128 [4] $auto$alumacc.cc:490:replace_alu$2128 [5] $auto$alumacc.cc:490:replace_alu$2128 [6] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$2145: { $auto$alumacc.cc:490:replace_alu$2141 [0] $auto$alumacc.cc:490:replace_alu$2141 [1] $auto$alumacc.cc:490:replace_alu$2141 [2] $auto$alumacc.cc:490:replace_alu$2141 [3] $auto$alumacc.cc:490:replace_alu$2141 [4] $auto$alumacc.cc:490:replace_alu$2141 [5] $auto$alumacc.cc:490:replace_alu$2141 [6] $auto$alumacc.cc:490:replace_alu$2141 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$2112: { $auto$alumacc.cc:490:replace_alu$2110 [0] $auto$alumacc.cc:490:replace_alu$2110 [1] $auto$alumacc.cc:490:replace_alu$2110 [2] $auto$alumacc.cc:490:replace_alu$2110 [3] $auto$alumacc.cc:490:replace_alu$2110 [4] $auto$alumacc.cc:490:replace_alu$2110 [5] $auto$alumacc.cc:490:replace_alu$2110 [6] $auto$alumacc.cc:490:replace_alu$2110 [7] $auto$alumacc.cc:490:replace_alu$2110 [8] $auto$alumacc.cc:490:replace_alu$2110 [9] $auto$alumacc.cc:490:replace_alu$2110 [10] $auto$alumacc.cc:490:replace_alu$2110 [11] $auto$alumacc.cc:490:replace_alu$2110 [12] $auto$alumacc.cc:490:replace_alu$2110 [13] $auto$alumacc.cc:490:replace_alu$2110 [14] $auto$alumacc.cc:490:replace_alu$2110 [15] $auto$alumacc.cc:490:replace_alu$2110 [16] $auto$alumacc.cc:490:replace_alu$2110 [17] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$2024: { $auto$alumacc.cc:490:replace_alu$2022 [0] $auto$alumacc.cc:490:replace_alu$2022 [1] $auto$alumacc.cc:490:replace_alu$2022 [2] $auto$alumacc.cc:490:replace_alu$2022 [3] $auto$alumacc.cc:490:replace_alu$2022 [4] $auto$alumacc.cc:490:replace_alu$2022 [5] $auto$alumacc.cc:490:replace_alu$2022 [6] $auto$alumacc.cc:490:replace_alu$2022 [7] $auto$alumacc.cc:490:replace_alu$2022 [8] $auto$alumacc.cc:490:replace_alu$2022 [9] $auto$alumacc.cc:490:replace_alu$2022 [10] $auto$alumacc.cc:490:replace_alu$2022 [11] $auto$alumacc.cc:490:replace_alu$2022 [12] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$2050: { $auto$alumacc.cc:490:replace_alu$2048 [0] $auto$alumacc.cc:490:replace_alu$2048 [1] $auto$alumacc.cc:490:replace_alu$2048 [2] $auto$alumacc.cc:490:replace_alu$2048 [3] $auto$alumacc.cc:490:replace_alu$2048 [4] $auto$alumacc.cc:490:replace_alu$2048 [5] $auto$alumacc.cc:490:replace_alu$2048 [6] $auto$alumacc.cc:490:replace_alu$2048 [7] $auto$alumacc.cc:490:replace_alu$2048 [8] $auto$alumacc.cc:490:replace_alu$2048 [9] $auto$alumacc.cc:490:replace_alu$2048 [10] $auto$alumacc.cc:490:replace_alu$2048 [11] $auto$alumacc.cc:490:replace_alu$2048 [12] $auto$alumacc.cc:490:replace_alu$2048 [13] $auto$alumacc.cc:490:replace_alu$2048 [14] $auto$alumacc.cc:490:replace_alu$2048 [15] $auto$alumacc.cc:490:replace_alu$2048 [16] $auto$alumacc.cc:490:replace_alu$2048 [17] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$2066: { $auto$alumacc.cc:490:replace_alu$2064 [0] $auto$alumacc.cc:490:replace_alu$2064 [1] $auto$alumacc.cc:490:replace_alu$2064 [2] $auto$alumacc.cc:490:replace_alu$2064 [3] $auto$alumacc.cc:490:replace_alu$2064 [4] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$2081: { $auto$alumacc.cc:490:replace_alu$2077 [0] $auto$alumacc.cc:490:replace_alu$2077 [1] $auto$alumacc.cc:490:replace_alu$2077 [2] $auto$alumacc.cc:490:replace_alu$2077 [3] $auto$alumacc.cc:490:replace_alu$2077 [4] $auto$alumacc.cc:490:replace_alu$2077 [5] $auto$alumacc.cc:490:replace_alu$2077 [6] $auto$alumacc.cc:490:replace_alu$2077 [7] $auto$alumacc.cc:490:replace_alu$2077 [8] $auto$alumacc.cc:490:replace_alu$2077 [9] $auto$alumacc.cc:490:replace_alu$2077 [10] $auto$alumacc.cc:490:replace_alu$2077 [11] $auto$alumacc.cc:490:replace_alu$2077 [12] $auto$alumacc.cc:490:replace_alu$2077 [13] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$2088: { $auto$alumacc.cc:490:replace_alu$2086 [0] $auto$alumacc.cc:490:replace_alu$2086 [1] $auto$alumacc.cc:490:replace_alu$2086 [2] $auto$alumacc.cc:490:replace_alu$2086 [3] $auto$alumacc.cc:490:replace_alu$2086 [4] $auto$alumacc.cc:490:replace_alu$2086 [5] $auto$alumacc.cc:490:replace_alu$2086 [6] $auto$alumacc.cc:490:replace_alu$2086 [7] $auto$alumacc.cc:490:replace_alu$2086 [8] $auto$alumacc.cc:490:replace_alu$2086 [9] $auto$alumacc.cc:490:replace_alu$2086 [10] $auto$alumacc.cc:490:replace_alu$2086 [11] }
  Optimizing cells in module \top.
Performed a total of 33 changes.

2.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module156'.
Finding identical cells in module `\module35'.
Finding identical cells in module `\module56'.
Finding identical cells in module `\module85'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$1519 ($dff) from module top.
Replaced 1 DFF cells.

2.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module156..
Finding unused cells or wires in module \module35..
Finding unused cells or wires in module \module56..
Finding unused cells or wires in module \module85..
Finding unused cells or wires in module \top..
Removed 7 unused cells and 68 unused wires.
<suppressed ~12 debug messages>

2.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module156.
Optimizing module module35.
Optimizing module module56.
Optimizing module module85.
Optimizing module top.
<suppressed ~1 debug messages>

2.13.9. Rerunning OPT passes. (Maybe there is more to do..)

2.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module156..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module35..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module56..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module85..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~178 debug messages>

2.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module156.
  Optimizing cells in module \module35.
  Optimizing cells in module \module56.
  Optimizing cells in module \module85.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module156'.
Finding identical cells in module `\module35'.
Finding identical cells in module `\module56'.
Finding identical cells in module `\module85'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module156..
Finding unused cells or wires in module \module35..
Finding unused cells or wires in module \module56..
Finding unused cells or wires in module \module85..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module156.
Optimizing module module35.
Optimizing module module56.
Optimizing module module85.
Optimizing module top.

2.13.16. Finished OPT passes. (There is nothing left to do.)

2.14. Executing FSM pass (extract and optimize FSM).

2.14.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking module35.reg49 as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.
Not marking module85.reg123 as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.
Not marking module85.reg126 as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.
Not marking top.reg15 as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.

2.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module156..
Finding unused cells or wires in module \module35..
Finding unused cells or wires in module \module56..
Finding unused cells or wires in module \module85..
Finding unused cells or wires in module \top..

2.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module156.
Optimizing module module35.
Optimizing module module56.
Optimizing module module85.
Optimizing module top.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module156'.
Finding identical cells in module `\module35'.
Finding identical cells in module `\module56'.
Finding identical cells in module `\module85'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module156..
Finding unused cells or wires in module \module35..
Finding unused cells or wires in module \module56..
Finding unused cells or wires in module \module85..
Finding unused cells or wires in module \top..

2.15.5. Finished fast OPT passes.

2.16. Executing MEMORY pass.

2.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module156..
Finding unused cells or wires in module \module35..
Finding unused cells or wires in module \module56..
Finding unused cells or wires in module \module85..
Finding unused cells or wires in module \top..

2.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module156..
Finding unused cells or wires in module \module35..
Finding unused cells or wires in module \module56..
Finding unused cells or wires in module \module85..
Finding unused cells or wires in module \top..

2.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module156..
Finding unused cells or wires in module \module35..
Finding unused cells or wires in module \module56..
Finding unused cells or wires in module \module85..
Finding unused cells or wires in module \top..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module156.
<suppressed ~32 debug messages>
Optimizing module module35.
<suppressed ~31 debug messages>
Optimizing module module56.
<suppressed ~4 debug messages>
Optimizing module module85.
<suppressed ~100 debug messages>
Optimizing module top.
<suppressed ~81 debug messages>

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module156'.
Finding identical cells in module `\module35'.
Finding identical cells in module `\module56'.
Finding identical cells in module `\module85'.
<suppressed ~3 debug messages>
Finding identical cells in module `\top'.
<suppressed ~3 debug messages>
Removed a total of 2 cells.

2.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module156..
Finding unused cells or wires in module \module35..
Finding unused cells or wires in module \module56..
Finding unused cells or wires in module \module85..
Finding unused cells or wires in module \top..
Removed 5 unused cells and 71 unused wires.
<suppressed ~12 debug messages>

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module156.
Optimizing module module35.
Optimizing module module56.
Optimizing module module85.
Optimizing module top.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module156'.
Finding identical cells in module `\module35'.
Finding identical cells in module `\module56'.
Finding identical cells in module `\module85'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module156..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module35..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module56..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module85..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~176 debug messages>

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module156.
  Optimizing cells in module \module35.
    Consolidated identical input bits for $mux cell $procmux$1295:
      Old ports: A={ $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y }, B={ 6'000000 \wire39 }, Y=$0\reg40[21:0]
      New ports: A={ $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y $reduce_xor$rtl.v:404$401_Y }, B={ 1'0 \wire39 }, Y=$0\reg40[21:0] [16:0]
      New connections: $0\reg40[21:0] [21:17] = { $0\reg40[21:0] [16] $0\reg40[21:0] [16] $0\reg40[21:0] [16] $0\reg40[21:0] [16] $0\reg40[21:0] [16] }
  Optimizing cells in module \module35.
  Optimizing cells in module \module56.
  Optimizing cells in module \module85.
    New input vector for $reduce_or cell $reduce_or$rtl.v:780$724: { $auto$opt_expr.cc:189:group_cell_inputs$2258 [0] $auto$opt_expr.cc:189:group_cell_inputs$2258 [1] $auto$opt_expr.cc:189:group_cell_inputs$2258 [2] $auto$opt_expr.cc:189:group_cell_inputs$2258 [3] $auto$opt_expr.cc:189:group_cell_inputs$2258 [4] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:742$656: { $auto$opt_expr.cc:189:group_cell_inputs$2238 [0] $auto$opt_expr.cc:189:group_cell_inputs$2238 [1] $auto$opt_expr.cc:189:group_cell_inputs$2238 [2] $auto$opt_expr.cc:189:group_cell_inputs$2238 [3] $auto$opt_expr.cc:189:group_cell_inputs$2238 [4] $auto$opt_expr.cc:189:group_cell_inputs$2238 [5] $auto$opt_expr.cc:189:group_cell_inputs$2236 [0] $auto$opt_expr.cc:189:group_cell_inputs$2236 [1] $auto$opt_expr.cc:189:group_cell_inputs$2236 [2] }
    Consolidated identical input bits for $mux cell $procmux$1046:
      Old ports: A={ 8'00000000 $auto$wreduce.cc:455:run$1614 [1:0] }, B={ \reg112 [4] \reg112 [4] \reg112 [4] \reg112 [4] \reg112 [4] \reg112 [4] \reg112 [4] \reg112 [4:2] }, Y=$0\reg120[9:0]
      New ports: A={ 1'0 $auto$wreduce.cc:455:run$1614 [1:0] }, B=\reg112 [4:2], Y=$0\reg120[9:0] [2:0]
      New connections: $0\reg120[9:0] [9:3] = { $0\reg120[9:0] [2] $0\reg120[9:0] [2] $0\reg120[9:0] [2] $0\reg120[9:0] [2] $0\reg120[9:0] [2] $0\reg120[9:0] [2] $0\reg120[9:0] [2] }
    Consolidated identical input bits for $mux cell $procmux$1100:
      Old ports: A={ \wire117 [3] \wire117 [3] \wire117 [3] \wire117 [3] \wire117 [3] \wire117 [3] \wire117 [3] \wire117 [3] \wire117 [3] \wire117 [3] \wire117 [3] \wire117 [3] \wire117 [3] \wire117 [3] \wire117 }, B={ 16'0000000000000000 \reg113 [1:0] }, Y=$procmux$1100_Y
      New ports: A=\wire117, B={ 2'00 \reg113 [1:0] }, Y=$procmux$1100_Y [3:0]
      New connections: $procmux$1100_Y [17:4] = { $procmux$1100_Y [3] $procmux$1100_Y [3] $procmux$1100_Y [3] $procmux$1100_Y [3] $procmux$1100_Y [3] $procmux$1100_Y [3] $procmux$1100_Y [3] $procmux$1100_Y [3] $procmux$1100_Y [3] $procmux$1100_Y [3] $procmux$1100_Y [3] $procmux$1100_Y [3] $procmux$1100_Y [3] $procmux$1100_Y [3] }
    Consolidated identical input bits for $mux cell $procmux$1184:
      Old ports: A=8'10011101, B={ 6'000000 \wire86 [2:1] }, Y=$0\reg99[18:0]
      New ports: A=3'101, B={ 1'0 \wire86 [2:1] }, Y=$0\reg99[18:0] [2:0]
      New connections: $0\reg99[18:0] [7:3] = { $0\reg99[18:0] [2] 2'00 $0\reg99[18:0] [2] $0\reg99[18:0] [2] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:707$608:
      Old ports: A={ 2'00 \reg95 }, B={ 6'000000 $auto$wreduce.cc:455:run$1613 [9:0] }, Y=$ternary$rtl.v:707$608_Y [15:0]
      New ports: A=\reg95, B={ 4'0000 $auto$wreduce.cc:455:run$1613 [9:0] }, Y=$ternary$rtl.v:707$608_Y [13:0]
      New connections: $ternary$rtl.v:707$608_Y [15:14] = 2'00
    Consolidated identical input bits for $mux cell $ternary$rtl.v:730$636:
      Old ports: A=16'1011011010011101, B={ 15'000000000000000 \wire90 [0] }, Y={ \wire107 [18] \wire107 [14:0] }
      New ports: A=2'11, B={ 1'0 \wire90 [0] }, Y={ \wire107 [2] \wire107 [0] }
      New connections: { \wire107 [18] \wire107 [14:3] \wire107 [1] } = { \wire107 [2] 1'0 \wire107 [2] \wire107 [2] 1'0 \wire107 [2] \wire107 [2] 1'0 \wire107 [2] 2'00 \wire107 [2] \wire107 [2] 1'0 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:740$652:
      Old ports: A=8'10111100, B={ 7'0000000 $reduce_xnor$rtl.v:740$651_Y [0] }, Y=$ternary$rtl.v:740$652_Y [7:0]
      New ports: A=2'10, B={ 1'0 $reduce_xnor$rtl.v:740$651_Y [0] }, Y={ $ternary$rtl.v:740$652_Y [2] $ternary$rtl.v:740$652_Y [0] }
      New connections: { $ternary$rtl.v:740$652_Y [7:3] $ternary$rtl.v:740$652_Y [1] } = { $ternary$rtl.v:740$652_Y [2] 1'0 $ternary$rtl.v:740$652_Y [2] $ternary$rtl.v:740$652_Y [2] $ternary$rtl.v:740$652_Y [2] 1'0 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:762$682:
      Old ports: A={ 3'000 \reg102 }, B={ 7'0000000 $ternary$rtl.v:762$680_Y [11:0] }, Y=$ternary$rtl.v:762$682_Y
      New ports: A=\reg102, B={ 4'0000 $ternary$rtl.v:762$680_Y [11:0] }, Y=$ternary$rtl.v:762$682_Y [15:0]
      New connections: $ternary$rtl.v:762$682_Y [18:16] = 3'000
    Consolidated identical input bits for $mux cell $ternary$rtl.v:817$785:
      Old ports: A={ 5'00000 \wire86 }, B=8'10110001, Y=$ternary$rtl.v:817$785_Y
      New ports: A={ 1'0 \wire86 }, B=4'1001, Y={ $ternary$rtl.v:817$785_Y [4] $ternary$rtl.v:817$785_Y [2:0] }
      New connections: { $ternary$rtl.v:817$785_Y [7:5] $ternary$rtl.v:817$785_Y [3] } = { $ternary$rtl.v:817$785_Y [4] 1'0 $ternary$rtl.v:817$785_Y [4] 1'0 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:832$802:
      Old ports: A=8'00000000, B=8'10110000, Y=$ternary$rtl.v:832$802_Y
      New ports: A=1'0, B=1'1, Y=$ternary$rtl.v:832$802_Y [4]
      New connections: { $ternary$rtl.v:832$802_Y [7:5] $ternary$rtl.v:832$802_Y [3:0] } = { $ternary$rtl.v:832$802_Y [4] 1'0 $ternary$rtl.v:832$802_Y [4] 4'0000 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:860$838:
      Old ports: A=8'10100010, B=8'01000010, Y=$ternary$rtl.v:860$838_Y
      New ports: A=2'01, B=2'10, Y=$ternary$rtl.v:860$838_Y [6:5]
      New connections: { $ternary$rtl.v:860$838_Y [7] $ternary$rtl.v:860$838_Y [4:0] } = { $ternary$rtl.v:860$838_Y [5] 5'00010 }
  Optimizing cells in module \module85.
    New input vector for $reduce_or cell $reduce_or$rtl.v:779$715: { \wire107 [0] \wire107 [2] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:753$673:
      Old ports: A=\wire107 [3:2], B=2'00, Y=$ternary$rtl.v:753$673_Y
      New ports: A=\wire107 [2], B=1'0, Y=$ternary$rtl.v:753$673_Y [0]
      New connections: $ternary$rtl.v:753$673_Y [1] = $ternary$rtl.v:753$673_Y [0]
    Consolidated identical input bits for $mux cell $ternary$rtl.v:762$684:
      Old ports: A={ 10'0000000000 \reg103 }, B={ \wire89 $ternary$rtl.v:762$682_Y }, Y=$ternary$rtl.v:762$684_Y
      New ports: A={ 8'00000000 \reg103 }, B={ \wire89 1'0 $ternary$rtl.v:762$682_Y [15:0] }, Y={ $ternary$rtl.v:762$684_Y [26:19] $ternary$rtl.v:762$684_Y [16:0] }
      New connections: $ternary$rtl.v:762$684_Y [18:17] = 2'00
    Consolidated identical input bits for $mux cell $ternary$rtl.v:817$786:
      Old ports: A=$ternary$rtl.v:817$785_Y, B={ 6'000000 \reg113 [1:0] }, Y=$auto$wreduce.cc:455:run$1637 [7:0]
      New ports: A={ $ternary$rtl.v:817$785_Y [4] $ternary$rtl.v:817$785_Y [2:0] }, B={ 2'00 \reg113 [1:0] }, Y={ $auto$wreduce.cc:455:run$1637 [4] $auto$wreduce.cc:455:run$1637 [2:0] }
      New connections: { $auto$wreduce.cc:455:run$1637 [7:5] $auto$wreduce.cc:455:run$1637 [3] } = { $auto$wreduce.cc:455:run$1637 [4] 1'0 $auto$wreduce.cc:455:run$1637 [4] 1'0 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:877$854:
      Old ports: A={ 12'000000000000 $auto$rtlil.cc:1832:Not$1829 }, B=\wire107 [12:0], Y=$auto$wreduce.cc:455:run$1641 [12:0]
      New ports: A={ 1'0 $auto$rtlil.cc:1832:Not$1829 }, B={ \wire107 [2] \wire107 [0] }, Y={ $auto$wreduce.cc:455:run$1641 [2] $auto$wreduce.cc:455:run$1641 [0] }
      New connections: { $auto$wreduce.cc:455:run$1641 [12:3] $auto$wreduce.cc:455:run$1641 [1] } = { $auto$wreduce.cc:455:run$1641 [2] 1'0 $auto$wreduce.cc:455:run$1641 [2] $auto$wreduce.cc:455:run$1641 [2] 1'0 $auto$wreduce.cc:455:run$1641 [2] 2'00 $auto$wreduce.cc:455:run$1641 [2] $auto$wreduce.cc:455:run$1641 [2] 1'0 }
  Optimizing cells in module \module85.
    Consolidated identical input bits for $mux cell $ternary$rtl.v:877$856:
      Old ports: A=$auto$wreduce.cc:455:run$1641 [12:0], B=13'0000000000000, Y=$auto$wreduce.cc:455:run$1642 [12:0]
      New ports: A={ $auto$wreduce.cc:455:run$1641 [2] $auto$wreduce.cc:455:run$1641 [0] }, B=2'00, Y={ $auto$wreduce.cc:455:run$1642 [2] $auto$wreduce.cc:455:run$1642 [0] }
      New connections: { $auto$wreduce.cc:455:run$1642 [12:3] $auto$wreduce.cc:455:run$1642 [1] } = { $auto$wreduce.cc:455:run$1642 [2] 1'0 $auto$wreduce.cc:455:run$1642 [2] $auto$wreduce.cc:455:run$1642 [2] 1'0 $auto$wreduce.cc:455:run$1642 [2] 2'00 $auto$wreduce.cc:455:run$1642 [2] $auto$wreduce.cc:455:run$1642 [2] 1'0 }
  Optimizing cells in module \module85.
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $procmux$1304:
      Old ports: A={ 19'0000000000000000000 $auto$wreduce.cc:455:run$1689 [0] }, B={ 2'00 $auto$wreduce.cc:455:run$1683 [17:0] }, Y=$0\reg181[19:0]
      New ports: A={ 17'00000000000000000 $auto$wreduce.cc:455:run$1689 [0] }, B=$auto$wreduce.cc:455:run$1683 [17:0], Y=$0\reg181[19:0] [17:0]
      New connections: $0\reg181[19:0] [19:18] = 2'00
    Consolidated identical input bits for $mux cell $procmux$1344:
      Old ports: A={ \reg15 [2] \reg15 [2] \reg15 [2] \reg15 }, B={ 4'0000 $sshl$rtl.v:294$282_Y }, Y=$procmux$1344_Y
      New ports: A=\reg15, B={ 1'0 $sshl$rtl.v:294$282_Y }, Y=$procmux$1344_Y [2:0]
      New connections: $procmux$1344_Y [5:3] = { $procmux$1344_Y [2] $procmux$1344_Y [2] $procmux$1344_Y [2] }
    Consolidated identical input bits for $mux cell $procmux$1383:
      Old ports: A=7'0111010, B={ $add$rtl.v:133$21_Y [3] $add$rtl.v:133$21_Y [3] $add$rtl.v:133$21_Y [3] $add$rtl.v:133$21_Y }, Y=$procmux$1383_Y
      New ports: A=5'01010, B={ $add$rtl.v:133$21_Y [3] $add$rtl.v:133$21_Y }, Y={ $procmux$1383_Y [6] $procmux$1383_Y [3:0] }
      New connections: $procmux$1383_Y [5:4] = { $procmux$1383_Y [3] $procmux$1383_Y [3] }
    Consolidated identical input bits for $mux cell $procmux$1409:
      Old ports: A={ $ternary$rtl.v:194$121_Y [3] $ternary$rtl.v:194$121_Y [3] $ternary$rtl.v:194$121_Y [3] $ternary$rtl.v:194$121_Y [3] $ternary$rtl.v:194$121_Y [3] $ternary$rtl.v:194$121_Y [3] $ternary$rtl.v:194$121_Y }, B={ 9'000000000 \wire8 }, Y=$0\reg20[9:0]
      New ports: A=$ternary$rtl.v:194$121_Y, B={ 3'000 \wire8 }, Y=$0\reg20[9:0] [3:0]
      New connections: $0\reg20[9:0] [9:4] = { $0\reg20[9:0] [3] $0\reg20[9:0] [3] $0\reg20[9:0] [3] $0\reg20[9:0] [3] $0\reg20[9:0] [3] $0\reg20[9:0] [3] }
    Consolidated identical input bits for $mux cell $procmux$1412:
      Old ports: A={ \reg12 [7] \reg12 [7] \reg12 [7] \reg12 [7] \reg12 [7] \reg12 }, B={ 12'000000000000 $auto$alumacc.cc:491:replace_alu$2060 [14] }, Y=$procmux$1412_Y
      New ports: A=\reg12, B={ 7'0000000 $auto$alumacc.cc:491:replace_alu$2060 [14] }, Y=$procmux$1412_Y [7:0]
      New connections: $procmux$1412_Y [12:8] = { $procmux$1412_Y [7] $procmux$1412_Y [7] $procmux$1412_Y [7] $procmux$1412_Y [7] $procmux$1412_Y [7] }
    Consolidated identical input bits for $mux cell $procmux$1418:
      Old ports: A={ 9'000000000 $auto$opt_expr.cc:189:group_cell_inputs$2291 $auto$opt_expr.cc:189:group_cell_inputs$2289 }, B={ \wire2 [14] \wire2 [14] \wire2 [14] \wire2 [14] \wire2 [14] \wire2 [14] \wire2 [14] \wire2 }, Y=$procmux$1418_Y
      New ports: A={ 2'00 $auto$opt_expr.cc:189:group_cell_inputs$2291 $auto$opt_expr.cc:189:group_cell_inputs$2289 }, B=\wire2, Y=$procmux$1418_Y [14:0]
      New connections: $procmux$1418_Y [21:15] = { $procmux$1418_Y [14] $procmux$1418_Y [14] $procmux$1418_Y [14] $procmux$1418_Y [14] $procmux$1418_Y [14] $procmux$1418_Y [14] $procmux$1418_Y [14] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:165$68:
      Old ports: A={ 2'00 \wire2 [10:0] }, B=\wire2 [12:0], Y=$auto$wreduce.cc:455:run$1698 [12:0]
      New ports: A=2'00, B=\wire2 [12:11], Y=$auto$wreduce.cc:455:run$1698 [12:11]
      New connections: $auto$wreduce.cc:455:run$1698 [10:0] = \wire2 [10:0]
    Consolidated identical input bits for $mux cell $ternary$rtl.v:168$74:
      Old ports: A=8'10011101, B={ 2'00 \reg10 }, Y=$ternary$rtl.v:168$74_Y
      New ports: A=7'1011101, B={ 1'0 \reg10 }, Y={ $ternary$rtl.v:168$74_Y [7] $ternary$rtl.v:168$74_Y [5:0] }
      New connections: $ternary$rtl.v:168$74_Y [6] = 1'0
    Consolidated identical input bits for $mux cell $ternary$rtl.v:173$86:
      Old ports: A=8'10101101, B={ 7'0000000 \wire9 }, Y=$auto$wreduce.cc:455:run$1699 [7:0]
      New ports: A=2'11, B={ 1'0 \wire9 }, Y={ $auto$wreduce.cc:455:run$1699 [2] $auto$wreduce.cc:455:run$1699 [0] }
      New connections: { $auto$wreduce.cc:455:run$1699 [7:3] $auto$wreduce.cc:455:run$1699 [1] } = { $auto$wreduce.cc:455:run$1699 [2] 1'0 $auto$wreduce.cc:455:run$1699 [2] 1'0 $auto$wreduce.cc:455:run$1699 [2] 1'0 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:177$105:
      Old ports: A={ $reduce_and$rtl.v:177$104_Y $reduce_and$rtl.v:177$104_Y $reduce_and$rtl.v:177$104_Y $reduce_and$rtl.v:177$104_Y $reduce_and$rtl.v:177$104_Y $reduce_and$rtl.v:177$104_Y $reduce_and$rtl.v:177$104_Y $reduce_and$rtl.v:177$104_Y $reduce_and$rtl.v:177$104_Y $reduce_and$rtl.v:177$104_Y $reduce_and$rtl.v:177$104_Y $reduce_and$rtl.v:177$104_Y $reduce_and$rtl.v:177$104_Y }, B={ 12'000000000000 $auto$wreduce.cc:455:run$1678 [0] }, Y=$auto$wreduce.cc:455:run$1701 [12:0]
      New ports: A={ $reduce_and$rtl.v:177$104_Y $reduce_and$rtl.v:177$104_Y }, B={ 1'0 $auto$wreduce.cc:455:run$1678 [0] }, Y=$auto$wreduce.cc:455:run$1701 [1:0]
      New connections: $auto$wreduce.cc:455:run$1701 [12:2] = { $auto$wreduce.cc:455:run$1701 [1] $auto$wreduce.cc:455:run$1701 [1] $auto$wreduce.cc:455:run$1701 [1] $auto$wreduce.cc:455:run$1701 [1] $auto$wreduce.cc:455:run$1701 [1] $auto$wreduce.cc:455:run$1701 [1] $auto$wreduce.cc:455:run$1701 [1] $auto$wreduce.cc:455:run$1701 [1] $auto$wreduce.cc:455:run$1701 [1] $auto$wreduce.cc:455:run$1701 [1] $auto$wreduce.cc:455:run$1701 [1] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:203$138:
      Old ports: A=7'0000000, B=7'1000001, Y=$auto$wreduce.cc:455:run$1704 [6:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:455:run$1704 [0]
      New connections: $auto$wreduce.cc:455:run$1704 [6:1] = { $auto$wreduce.cc:455:run$1704 [0] 5'00000 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:203$140:
      Old ports: A={ 7'0000000 $reduce_or$rtl.v:203$139_Y }, B={ 1'0 $auto$wreduce.cc:455:run$1704 [6:0] }, Y=$ternary$rtl.v:203$140_Y
      New ports: A={ 6'000000 $reduce_or$rtl.v:203$139_Y }, B=$auto$wreduce.cc:455:run$1704 [6:0], Y=$ternary$rtl.v:203$140_Y [6:0]
      New connections: $ternary$rtl.v:203$140_Y [7] = 1'0
    Consolidated identical input bits for $mux cell $ternary$rtl.v:243$195:
      Old ports: A={ 4'0000 $ternary$rtl.v:243$193_Y }, B={ \y [265] \y [265] \y [265] \y [265] \y [265] \y [265] \y [265] \y [265] \y [265] \y [265] \y [265] \y [265] }, Y=$auto$wreduce.cc:455:run$1705 [11:0]
      New ports: A={ 1'0 $ternary$rtl.v:243$193_Y }, B={ \y [265] \y [265] \y [265] \y [265] \y [265] \y [265] \y [265] \y [265] \y [265] }, Y=$auto$wreduce.cc:455:run$1705 [8:0]
      New connections: $auto$wreduce.cc:455:run$1705 [11:9] = { $auto$wreduce.cc:455:run$1705 [8] $auto$wreduce.cc:455:run$1705 [8] $auto$wreduce.cc:455:run$1705 [8] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:252$218:
      Old ports: A={ 7'0000000 \reg178 [0] }, B=8'10100111, Y=$auto$wreduce.cc:455:run$1707 [7:0]
      New ports: A={ 1'0 \reg178 [0] }, B=2'11, Y=$auto$wreduce.cc:455:run$1707 [1:0]
      New connections: $auto$wreduce.cc:455:run$1707 [7:2] = { $auto$wreduce.cc:455:run$1707 [1] 1'0 $auto$wreduce.cc:455:run$1707 [1] 2'00 $auto$wreduce.cc:455:run$1707 [1] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:259$234:
      Old ports: A={ 7'0000000 $auto$rtlil.cc:1836:ReduceOr$2084 }, B=8'10011111, Y=$auto$wreduce.cc:455:run$1708 [7:0]
      New ports: A={ 1'0 $auto$rtlil.cc:1836:ReduceOr$2084 }, B=2'11, Y=$auto$wreduce.cc:455:run$1708 [1:0]
      New connections: $auto$wreduce.cc:455:run$1708 [7:2] = { $auto$wreduce.cc:455:run$1708 [1] 2'00 $auto$wreduce.cc:455:run$1708 [1] $auto$wreduce.cc:455:run$1708 [1] $auto$wreduce.cc:455:run$1708 [1] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:306$298:
      Old ports: A=6'011100, B=6'111001, Y=$ternary$rtl.v:306$298_Y [5:0]
      New ports: A=2'10, B=2'01, Y={ $ternary$rtl.v:306$298_Y [2] $ternary$rtl.v:306$298_Y [0] }
      New connections: { $ternary$rtl.v:306$298_Y [5:3] $ternary$rtl.v:306$298_Y [1] } = { $ternary$rtl.v:306$298_Y [0] 3'110 }
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $procmux$1385:
      Old ports: A=$procmux$1383_Y, B={ 5'00000 $add$rtl.v:162$63_Y }, Y=$0\reg13[6:0]
      New ports: A={ $procmux$1383_Y [6] $procmux$1383_Y [3:0] }, B={ 3'000 $add$rtl.v:162$63_Y }, Y={ $0\reg13[6:0] [6] $0\reg13[6:0] [3:0] }
      New connections: $0\reg13[6:0] [5:4] = { $0\reg13[6:0] [3] $0\reg13[6:0] [3] }
    Consolidated identical input bits for $mux cell $procmux$1415:
      Old ports: A=$procmux$1412_Y, B=$auto$wreduce.cc:455:run$1701 [12:0], Y=$0\reg21[12:0]
      New ports: A=$procmux$1412_Y [7:0], B={ $auto$wreduce.cc:455:run$1701 [1] $auto$wreduce.cc:455:run$1701 [1] $auto$wreduce.cc:455:run$1701 [1] $auto$wreduce.cc:455:run$1701 [1] $auto$wreduce.cc:455:run$1701 [1] $auto$wreduce.cc:455:run$1701 [1] $auto$wreduce.cc:455:run$1701 [1:0] }, Y=$0\reg21[12:0] [7:0]
      New connections: $0\reg21[12:0] [12:8] = { $0\reg21[12:0] [7] $0\reg21[12:0] [7] $0\reg21[12:0] [7] $0\reg21[12:0] [7] $0\reg21[12:0] [7] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:203$140:
      Old ports: A={ 6'000000 $reduce_or$rtl.v:203$139_Y }, B=$auto$wreduce.cc:455:run$1704 [6:0], Y=$ternary$rtl.v:203$140_Y [6:0]
      New ports: A={ 1'0 $reduce_or$rtl.v:203$139_Y }, B={ $auto$wreduce.cc:455:run$1704 [0] $auto$wreduce.cc:455:run$1704 [0] }, Y={ $ternary$rtl.v:203$140_Y [6] $ternary$rtl.v:203$140_Y [0] }
      New connections: $ternary$rtl.v:203$140_Y [5:1] = 5'00000
    Consolidated identical input bits for $mux cell $ternary$rtl.v:243$197:
      Old ports: A={ 10'0000000000 \reg23 [2:1] }, B=$auto$wreduce.cc:455:run$1705 [11:0], Y=$auto$wreduce.cc:455:run$1706 [11:0]
      New ports: A={ 7'0000000 \reg23 [2:1] }, B=$auto$wreduce.cc:455:run$1705 [8:0], Y=$auto$wreduce.cc:455:run$1706 [8:0]
      New connections: $auto$wreduce.cc:455:run$1706 [11:9] = { $auto$wreduce.cc:455:run$1706 [8] $auto$wreduce.cc:455:run$1706 [8] $auto$wreduce.cc:455:run$1706 [8] }
  Optimizing cells in module \top.
Performed a total of 39 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module156'.
Finding identical cells in module `\module35'.
Finding identical cells in module `\module56'.
Finding identical cells in module `\module85'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module156..
Finding unused cells or wires in module \module35..
Finding unused cells or wires in module \module56..
Finding unused cells or wires in module \module85..
Finding unused cells or wires in module \top..

2.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module156.
Optimizing module module35.
Optimizing module module56.
Optimizing module module85.
<suppressed ~7 debug messages>
Optimizing module top.
<suppressed ~4 debug messages>

2.20.9. Rerunning OPT passes. (Maybe there is more to do..)

2.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module156..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module35..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module56..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module85..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $ternary$rtl.v:860$838.
    dead port 2/2 on $mux $ternary$rtl.v:860$838.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 2 multiplexer ports.
<suppressed ~175 debug messages>

2.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module156.
  Optimizing cells in module \module35.
  Optimizing cells in module \module56.
  Optimizing cells in module \module85.
    Consolidated identical input bits for $mux cell $procmux$1076:
      Old ports: A=$auto$wreduce.cc:455:run$1615 [6:0], B={ 6'000000 \reg120 [4] }, Y=$0\reg128[8:0]
      New ports: A=\reg119 [0], B=\reg120 [4], Y=$0\reg128[8:0] [0]
      New connections: $0\reg128[8:0] [6:1] = 6'000000
  Optimizing cells in module \module85.
  Optimizing cells in module \top.
Performed a total of 1 changes.

2.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module156'.
Finding identical cells in module `\module35'.
Finding identical cells in module `\module56'.
Finding identical cells in module `\module85'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module156..
Finding unused cells or wires in module \module35..
Finding unused cells or wires in module \module56..
Finding unused cells or wires in module \module85..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 5 unused wires.
<suppressed ~2 debug messages>

2.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module156.
Optimizing module module35.
Optimizing module module56.
Optimizing module module85.
Optimizing module top.

2.20.16. Rerunning OPT passes. (Maybe there is more to do..)

2.20.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module156..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module35..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module56..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module85..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~175 debug messages>

2.20.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module156.
  Optimizing cells in module \module35.
  Optimizing cells in module \module56.
  Optimizing cells in module \module85.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.20.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module156'.
Finding identical cells in module `\module35'.
Finding identical cells in module `\module56'.
Finding identical cells in module `\module85'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module156..
Finding unused cells or wires in module \module35..
Finding unused cells or wires in module \module56..
Finding unused cells or wires in module \module85..
Finding unused cells or wires in module \top..

2.20.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module module156.
Optimizing module module35.
Optimizing module module56.
Optimizing module module85.
Optimizing module top.

2.20.23. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper maccmap for cells of type $macc.
  add { \wire176 [11:1] $auto$opt_expr.cc:189:group_cell_inputs$2262 } * $auto$rtlil.cc:1836:ReduceOr$2075 (12x1 bits, unsigned)
  add \wire2 [10:0] * $shl$rtl.v:172$82_Y (11x8 bits, unsigned)
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_xnor.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $reduce_xor.
Using template $paramod$constmap:94b9974ba8013702cda1dd8393bda8152e2178b2$paramod$ff145ab5cff172af3501d876dc8173492f955637\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using template $paramod$constmap:5dd8c1cbed5cc9bd4c401f5797385a7969c5b098$paramod$9b5b6b650cb6fd0adf16d4609c8978394e53cd07\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=12\Y_WIDTH=12 for cells of type $alu.
Using extmapper simplemap for cells of type $xnor.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=15\Y_WIDTH=15 for cells of type $alu.
Using template $paramod$constmap:fc738276fd3155fdb0dc66ebc9fb8a2213a926ac$paramod$939ef05eaeb3c953515dd26b5d2bd630eafcd1a3\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=9\Y_WIDTH=9 for cells of type $alu.
Using template $paramod$constmap:b8b74be06d7523dbe48e56002d57086626280366$paramod$f4911b181e0e3f9e4a73201e1d3c38bd73f16093\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:25cc566d8daa3a48482bd1dc157eaa59e36cabfd$paramod$e719a36c21145c11152062d9f98daafaeb127e0e\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=18\Y_WIDTH=18 for cells of type $alu.
Using template $paramod$constmap:5378cb479e1fc658b1da3339eb5f88e32b3c02cc$paramod$8d954fc9bd4997f3ad49e96187688357f2114a6b\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod$constmap:a67c6d13c6b308cc66517d1133afae31d166e2f6$paramod$257850ae5c9805f59b08767a9f71dbfb71e53680\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:990335307493dcd5df99900ceece5449454920cb$paramod$21cb3cb34656c6298e0003de8f0907da30e05f98\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:b4d7724df476207e05731b0d3c9043db6db541b5$paramod$f1f1454c578cd141d2500173d6e2738e1da62b31\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:8c6ec9e359b1e5bafade45c6efee3e7496768ebe$paramod$f524e6d4d50d1e05e77c8c59c8b6d4b6bbe58ab7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod$constmap:1b791ffa0b62b164836bff2f15c425d6a0cf72ea$paramod$f80acfdb7bf0426b54d944ab25a41cf0b2f94d15\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:4c1fb1cecab2a71b163c3321c59064f6fb666cba$paramod$8fc602bd029f37b45923fd6164317d2bfd248242\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod$constmap:005b19d88ddbbb54c60cf1384ce2c5b332ff1905$paramod$fe9a337bb255048162fd04b25c488083db0fa3bb\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:5e937be60e6ea86027139d6284f8b70b2ed48bd9$paramod$cbfbd58f4814f57d443b3fb3c9ea1d3ae9d7ea22\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:4defa4b50c3cb177d8c250202fe0ff731c3e0d28$paramod$a9e5fe8e87d952bdb246de81884ac49b52899975\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=13\Y_WIDTH=13 for cells of type $alu.
Using template $paramod$constmap:ec5f8ce056e9aa4caad9c36e3be15ce07cca460b$paramod$29f4b0374d4694477ecbdaa1782e101d3d4d8b62\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:04379ab251143443c14028916e70ca46c667e95d$paramod$5179edc157dfde110539b78558c8bffc3f5094c2\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod$constmap:d52c3b772808ceda443eb8b6f6bcef79a22445fd$paramod$9bef70a5e47cba9d10ee6ac75f91c302c8f9a30c\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=15\Y_WIDTH=15 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=1\Y_WIDTH=2 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=12\Y_WIDTH=12 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=12\B_WIDTH=14\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=14\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=21\Y_WIDTH=21 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=12\Y_WIDTH=12 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=1\Y_WIDTH=12 for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=2\B_WIDTH=12\Y_WIDTH=12 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
  add \wire1 [10:0] * \reg13 (11x7 bits, signed)
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_90_fa\WIDTH=19 for cells of type $fa.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=19\B_WIDTH=19\Y_WIDTH=19 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=12 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=15 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=9 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=18 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=13 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=2 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=16 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=8 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=5 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=7 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=14 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=4 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=21 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=11 for cells of type $fa.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=11\B_WIDTH=11\Y_WIDTH=11 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=19 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=11 for cells of type $lcu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=15\Y_WIDTH=19 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=15\B_WIDTH=15\Y_WIDTH=15 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=1\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=13\Y_WIDTH=13 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=15\Y_WIDTH=16 for cells of type $alu.
Using template $paramod$constmap:2a00c8217117f3fd713414a8ec33ca7ed9a257e4$paramod$ece24d46bedb12dabfc1c5e84f5c6318224c046c\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:47f7441a7fd52578a79a93d25fccd80e2b1c2895$paramod$7ac377a21bfc7dd0bdf2ebc5455cea35cf191e15\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:77b85ec504ae5268abb5b5638e2f24087e57b8f1$paramod$ba3d577d007c368559f58044d06116da1df2e405\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod$constmap:88eef4503fff98a3ffe54dddad06a87c9658a744$paramod$3a0b3bef8a057cc700af5d4410671cfec62d42a0\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:59f1bd0582e7c4c8997df07743098126be50f6ab$paramod$98f1571451031b4c087b7fe640e43502b2e6630b\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:a67c6d13c6b308cc66517d1133afae31d166e2f6$paramod$75cff5c54b550337a9cc2a1498c3e73d032fe194\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:b23d743cf629a7c9958f50c3a0b5a854bf2d562b$paramod$420a7ea6b63b8dbbf12d5563e66e0d49690ce96f\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:94b9974ba8013702cda1dd8393bda8152e2178b2$paramod$e1f66a689f6f02140c807c016f58d851b8aacdbc\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:11ceb806c5190d5145f5ea5c8960ce1d4cd2a163$paramod$b82c90b904815889d839e0adaae7f9df1955a795\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
  add $ternary$rtl.v:446$465_Y * \wire39 (19x16 bits, signed)
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=15\Y_WIDTH=15 for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=6 for cells of type $fa.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=6\Y_WIDTH=6 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=6 for cells of type $lcu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=2\Y_WIDTH=2 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=3\Y_WIDTH=20 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=13\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=2\Y_WIDTH=19 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=2\Y_WIDTH=12 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=9\Y_WIDTH=17 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=2\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
Using template $paramod$constmap:a8674d50aa8b734944f8c7381e6afe0429581467$paramod$56e92c406ba24acfc745fa53d674b9594eb3d7d1\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=18\Y_WIDTH=18 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=11\B_WIDTH=11\Y_WIDTH=11 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=14\B_WIDTH=17\Y_WIDTH=17 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=8\Y_WIDTH=9 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=14\B_WIDTH=14\Y_WIDTH=15 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=2\B_WIDTH=12\Y_WIDTH=12 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=19\Y_WIDTH=19 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=20\Y_WIDTH=20 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=14\B_WIDTH=30\Y_WIDTH=30 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=14\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod$constmap:731cbabde82de22736ec1a3f813bdd8b7eaf60e0$paramod$02d01114cf4183bb3bf12ea484f270c80523f094\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=11\B_WIDTH=20\Y_WIDTH=20 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=18\B_WIDTH=18\Y_WIDTH=18 for cells of type $alu.
Using template $paramod$constmap:f84e422a41c2f822d3139436bced750d5486d326$paramod$9cfd002ef76aae358335e1a3e828cf6c983a42a8\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
  add \reg97 * \wire86 (12x3 bits, unsigned)
Using template $paramod$constmap:5bd4609a8ae7ae48c8a8f27a938a5f91313a033d$paramod$0ec67c82a2fa0e58d93aa7d0d120d5e79efd572a\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:815cc7485588a64bc62599a9bada5e51195aa96d$paramod$8c5b939012f826bf825049f8021f9bdb104c58b0\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:52d787672b49455d427a2882367ee1a2d621b662$paramod$575a50140ecc0a1f25095d274ea4a79283c4b6dd\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:316eab4ade7b0abc7129a78b7b7a8162b14253a0$paramod$1a91208f85b37250c28dcf0f62de0d25ac385154\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=9\B_WIDTH=14\Y_WIDTH=14 for cells of type $alu.
Using template $paramod$constmap:e985ce84209515bedace4a5ee825d753140e0369$paramod$efbf7763bc9131e2815a3ac166fd1788324b9992\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
  add { 1'0 \reg93 [7] 1'0 \reg93 [5:4] 1'0 \reg93 [2] 2'00 } * 1'0 (9x1 bits, unsigned)
Using template $paramod$constmap:88cf6128471a66289cc95d740c178e7ac70e0020$paramod$f640f6fae6a6e45de67835b8a22ac1e367415407\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:a284e09454d15157ac40e313f79e6408894c1f43$paramod$efbffd55066f52780abc0c3fb57c80ab62985d5d\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:7fa131f2d06181f08a8e0918b7fb56482d7213e7$paramod$1439951128e682594d17d2890645cc8782632f67\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:ed4fd64d5369c594dc3e20b732e95a5dfd8be209$paramod$fe5715e896608afe6ec80368a161ff81ee806b54\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:fd4237542afc8b42ba8284fe850d5274433fa64a$paramod$5109369edd47734142e33146341584b104808753\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:a135069d11271bb23f3f335c1cd78c52c47b1556$paramod$3288ed06b6d1093012a5b403784c58f0ff2c4562\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=18\Y_WIDTH=18 for cells of type $alu.
Using template $paramod$constmap:f8ca20d3d73f0c2490e12e0eb1831eb57af2378c$paramod$73f1eff68ac4867cf7b93881077259bf81d6a0b8\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=15\B_WIDTH=19\Y_WIDTH=19 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=1\Y_WIDTH=1 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=3 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=20 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=17 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=30 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=15 for cells of type $fa.
Using template $paramod\_90_lcu\WIDTH=1 for cells of type $lcu.
  add \wire57 [0] * $reduce_or$rtl.v:995$1009_Y (1x1 bits, unsigned)
Using template $paramod$constmap:e2c33e436d7846c627cbc3fb540af0e57915c4fe$paramod$ee1306959ec5d76715eedc43b4c40b0a105ab796\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=1\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=12\B_WIDTH=13\Y_WIDTH=13 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=6\Y_WIDTH=17 for cells of type $alu.
No more expansions possible.
<suppressed ~16240 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module156.
<suppressed ~164 debug messages>
Optimizing module module35.
<suppressed ~737 debug messages>
Optimizing module module56.
<suppressed ~137 debug messages>
Optimizing module module85.
<suppressed ~2006 debug messages>
Optimizing module top.
<suppressed ~2350 debug messages>

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module156'.
<suppressed ~96 debug messages>
Finding identical cells in module `\module35'.
<suppressed ~624 debug messages>
Finding identical cells in module `\module56'.
<suppressed ~87 debug messages>
Finding identical cells in module `\module85'.
<suppressed ~1491 debug messages>
Finding identical cells in module `\top'.
<suppressed ~1071 debug messages>
Removed a total of 1123 cells.

2.22.3. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$simplemap.cc:420:simplemap_dff$24104 ($_DFF_P_) from module module85.
Removing $auto$simplemap.cc:420:simplemap_dff$7361 ($_DFF_P_) from module top.
Replaced 2 DFF cells.

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module156..
Finding unused cells or wires in module \module35..
Finding unused cells or wires in module \module56..
Finding unused cells or wires in module \module85..
Finding unused cells or wires in module \top..
Removed 1160 unused cells and 4281 unused wires.
<suppressed ~1165 debug messages>

2.22.5. Rerunning OPT passes. (Removed registers in this run.)

2.22.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module module156.
Optimizing module module35.
<suppressed ~11 debug messages>
Optimizing module module56.
<suppressed ~6 debug messages>
Optimizing module module85.
<suppressed ~46 debug messages>
Optimizing module top.
<suppressed ~16 debug messages>

2.22.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module156'.
Finding identical cells in module `\module35'.
Finding identical cells in module `\module56'.
Finding identical cells in module `\module85'.
<suppressed ~3 debug messages>
Finding identical cells in module `\top'.
Removed a total of 1 cells.

2.22.8. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$simplemap.cc:420:simplemap_dff$7342 ($_DFF_P_) from module top.
Replaced 1 DFF cells.

2.22.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module156..
Finding unused cells or wires in module \module35..
Finding unused cells or wires in module \module56..
Finding unused cells or wires in module \module85..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 21 unused wires.
<suppressed ~3 debug messages>

2.22.10. Rerunning OPT passes. (Removed registers in this run.)

2.22.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module module156.
Optimizing module module35.
Optimizing module module56.
Optimizing module module85.
Optimizing module top.
<suppressed ~2 debug messages>

2.22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module156'.
Finding identical cells in module `\module35'.
Finding identical cells in module `\module56'.
Finding identical cells in module `\module85'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.22.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module156..
Finding unused cells or wires in module \module35..
Finding unused cells or wires in module \module56..
Finding unused cells or wires in module \module85..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.22.15. Finished fast OPT passes.

2.23. Executing ABC pass (technology mapping using ABC).

2.23.1. Extracting gate netlist of module `\module156' to `<abc-temp-dir>/input.blif'..
Extracted 142 gates and 177 wires to a netlist network with 33 inputs and 33 outputs.

2.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.1.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:       18
ABC RESULTS:              AOI3 cells:       11
ABC RESULTS:              AOI4 cells:        1
ABC RESULTS:               BUF cells:        1
ABC RESULTS:               MUX cells:        4
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               NOR cells:        3
ABC RESULTS:               NOT cells:       18
ABC RESULTS:              OAI3 cells:        5
ABC RESULTS:                OR cells:       20
ABC RESULTS:             ORNOT cells:        7
ABC RESULTS:              XNOR cells:       10
ABC RESULTS:               XOR cells:       15
ABC RESULTS:        internal signals:      111
ABC RESULTS:           input signals:       33
ABC RESULTS:          output signals:       33
Removing temp directory.

2.23.2. Extracting gate netlist of module `\module35' to `<abc-temp-dir>/input.blif'..
Extracted 2359 gates and 2648 wires to a netlist network with 287 inputs and 225 outputs.

2.23.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       35
ABC RESULTS:            ANDNOT cells:      271
ABC RESULTS:              AOI3 cells:       92
ABC RESULTS:               MUX cells:      620
ABC RESULTS:              NAND cells:       66
ABC RESULTS:               NOR cells:       56
ABC RESULTS:               NOT cells:      145
ABC RESULTS:              OAI3 cells:       28
ABC RESULTS:                OR cells:      557
ABC RESULTS:             ORNOT cells:       74
ABC RESULTS:              XNOR cells:       34
ABC RESULTS:               XOR cells:      158
ABC RESULTS:        internal signals:     2136
ABC RESULTS:           input signals:      287
ABC RESULTS:          output signals:      225
Removing temp directory.

2.23.3. Extracting gate netlist of module `\module56' to `<abc-temp-dir>/input.blif'..
Extracted 170 gates and 212 wires to a netlist network with 40 inputs and 48 outputs.

2.23.3.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:       40
ABC RESULTS:              AOI3 cells:        2
ABC RESULTS:               MUX cells:        4
ABC RESULTS:              NAND cells:       10
ABC RESULTS:               NOR cells:        4
ABC RESULTS:               NOT cells:       16
ABC RESULTS:              OAI3 cells:        3
ABC RESULTS:                OR cells:       63
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:        2
ABC RESULTS:        internal signals:      124
ABC RESULTS:           input signals:       40
ABC RESULTS:          output signals:       48
Removing temp directory.

2.23.4. Extracting gate netlist of module `\module85' to `<abc-temp-dir>/input.blif'..
Extracted 4214 gates and 4650 wires to a netlist network with 434 inputs and 421 outputs.

2.23.4.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       97
ABC RESULTS:            ANDNOT cells:      618
ABC RESULTS:              AOI3 cells:      155
ABC RESULTS:              AOI4 cells:        3
ABC RESULTS:               MUX cells:      665
ABC RESULTS:              NAND cells:      132
ABC RESULTS:               NOR cells:      182
ABC RESULTS:               NOT cells:      241
ABC RESULTS:              OAI3 cells:      120
ABC RESULTS:              OAI4 cells:        3
ABC RESULTS:                OR cells:      801
ABC RESULTS:             ORNOT cells:      116
ABC RESULTS:              XNOR cells:       91
ABC RESULTS:               XOR cells:      305
ABC RESULTS:        internal signals:     3795
ABC RESULTS:           input signals:      434
ABC RESULTS:          output signals:      421
Removing temp directory.

2.23.5. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 3556 gates and 3976 wires to a netlist network with 418 inputs and 320 outputs.

2.23.5.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.5.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:      139
ABC RESULTS:            ANDNOT cells:      597
ABC RESULTS:              AOI3 cells:      137
ABC RESULTS:              AOI4 cells:        2
ABC RESULTS:               MUX cells:      584
ABC RESULTS:              NAND cells:      115
ABC RESULTS:               NOR cells:      120
ABC RESULTS:               NOT cells:      184
ABC RESULTS:              OAI3 cells:       65
ABC RESULTS:              OAI4 cells:        3
ABC RESULTS:                OR cells:      657
ABC RESULTS:             ORNOT cells:       64
ABC RESULTS:              XNOR cells:      149
ABC RESULTS:               XOR cells:      341
ABC RESULTS:        internal signals:     3238
ABC RESULTS:           input signals:      418
ABC RESULTS:          output signals:      320
Removing temp directory.

2.24. Executing OPT pass (performing simple optimizations).

2.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module156.
<suppressed ~2 debug messages>
Optimizing module module35.
<suppressed ~126 debug messages>
Optimizing module module56.
Optimizing module module85.
<suppressed ~136 debug messages>
Optimizing module top.
<suppressed ~59 debug messages>

2.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module156'.
<suppressed ~3 debug messages>
Finding identical cells in module `\module35'.
<suppressed ~9 debug messages>
Finding identical cells in module `\module56'.
Finding identical cells in module `\module85'.
<suppressed ~12 debug messages>
Finding identical cells in module `\top'.
<suppressed ~18 debug messages>
Removed a total of 14 cells.

2.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module156..
Finding unused cells or wires in module \module35..
Finding unused cells or wires in module \module56..
Finding unused cells or wires in module \module85..
Finding unused cells or wires in module \top..
Removed 14 unused cells and 4854 unused wires.
<suppressed ~19 debug messages>

2.24.5. Finished fast OPT passes.

2.25. Executing HIERARCHY pass (managing design hierarchy).

2.26. Printing statistics.

=== module156 ===

   Number of wires:                 97
   Number of wire bits:            291
   Number of public wires:          15
   Number of public wire bits:     209
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                123
     $_ANDNOT_                      18
     $_AOI3_                        11
     $_AOI4_                         1
     $_DFF_P_                       10
     $_MUX_                          4
     $_NAND_                         3
     $_NOR_                          3
     $_NOT_                         16
     $_OAI3_                         5
     $_ORNOT_                        7
     $_OR_                          20
     $_XNOR_                        10
     $_XOR_                         15

=== module35 ===

   Number of wires:               1949
   Number of wire bits:           3797
   Number of public wires:          29
   Number of public wire bits:     644
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2341
     $_ANDNOT_                     270
     $_AND_                         34
     $_AOI3_                        92
     $_DFF_P_                      211
     $_MUX_                        620
     $_NAND_                        66
     $_NOR_                         56
     $_NOT_                        139
     $_OAI3_                        28
     $_ORNOT_                       74
     $_OR_                         556
     $_XNOR_                        34
     $_XOR_                        158
     module156                       1
     module56                        1
     module85                        1

=== module56 ===

   Number of wires:                128
   Number of wire bits:            567
   Number of public wires:          27
   Number of public wire bits:     466
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                149
     $_ANDNOT_                      40
     $_AND_                          2
     $_AOI3_                         2
     $_MUX_                          4
     $_NAND_                        10
     $_NOR_                          4
     $_NOT_                         16
     $_OAI3_                         3
     $_ORNOT_                        2
     $_OR_                          63
     $_XNOR_                         1
     $_XOR_                          2

=== module85 ===

   Number of wires:               3202
   Number of wire bits:           4911
   Number of public wires:          64
   Number of public wire bits:    1410
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3912
     $_ANDNOT_                     618
     $_AND_                         97
     $_AOI3_                       155
     $_AOI4_                         3
     $_DFF_P_                      391
     $_MUX_                        665
     $_NAND_                       132
     $_NOR_                        182
     $_NOT_                        237
     $_OAI3_                       120
     $_OAI4_                         3
     $_ORNOT_                      116
     $_OR_                         797
     $_XNOR_                        91
     $_XOR_                        305

=== top ===

   Number of wires:               2923
   Number of wire bits:           4521
   Number of public wires:          58
   Number of public wire bits:    1074
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3471
     $_ANDNOT_                     597
     $_AND_                        139
     $_AOI3_                       137
     $_AOI4_                         2
     $_DFF_P_                      321
     $_MUX_                        584
     $_NAND_                       115
     $_NOR_                        118
     $_NOT_                        181
     $_OAI3_                        65
     $_OAI4_                         3
     $_ORNOT_                       64
     $_OR_                         654
     $_XNOR_                       149
     $_XOR_                        341
     module35                        1

2.27. Executing CHECK pass (checking for obvious problems).
checking module module156..
checking module module35..
checking module module56..
checking module module85..
checking module top..
found and reported 0 problems.

3. Executing Verilog backend.
Dumping module `\module156'.
Dumping module `\module35'.
Dumping module `\module56'.
Dumping module `\module85'.
Dumping module `\top'.

Warnings: 13 unique messages, 13 total
End of script. Logfile hash: dd7cdcbd18
CPU: user 13.21s system 0.04s, MEM: 98.17 MB total, 86.86 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 24% 65x proc (3 sec), 16% 2x techmap (2 sec), ...
