
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_verilog rtl.v; synth; write_verilog -noattr syn_yosys.v' --

1. Executing Verilog-2005 frontend: rtl.v
Parsing Verilog input from `rtl.v' to AST representation.
Generating RTLIL representation for module `\top'.
Generating RTLIL representation for module `\module40'.
Generating RTLIL representation for module `\module9'.
Generating RTLIL representation for module `\module46'.
Successfully finished Verilog frontend.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).
Warning: Resizing cell port module40.modinst84.y from 3 bits to 367 bits.
Warning: Resizing cell port module40.modinst84.wire47 from 16 bits to 6 bits.
Warning: Resizing cell port module40.modinst84.wire50 from 18 bits to 17 bits.
Warning: Resizing cell port module40.modinst84.wire48 from 14 bits to 11 bits.
Warning: Resizing cell port top.modinst107.y from 18 bits to 275 bits.
Warning: Resizing cell port top.modinst107.wire42 from 15 bits to 11 bits.
Warning: Resizing cell port top.modinst39.wire11 from 19 bits to 8 bits.
Warning: Resizing cell port top.modinst39.wire13 from 15 bits to 7 bits.
Warning: Resizing cell port top.modinst39.y from 22 bits to 263 bits.
Warning: Resizing cell port top.modinst39.wire10 from 11 bits to 5 bits.
Warning: Resizing cell port top.modinst39.wire14 from 22 bits to 20 bits.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$rtl.v:413$345 in module module46.
Marked 1 switch rules as full_case in process $proc$rtl.v:265$206 in module module9.
Marked 3 switch rules as full_case in process $proc$rtl.v:116$37 in module module40.
Removed a total of 0 dead cases.

2.2.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\module46.$proc$rtl.v:337$404'.
  Set init value: \reg52 = 7'0000000
Found init rule in `\module46.$proc$rtl.v:323$403'.
  Set init value: \reg66 = 18'000000000000000000
Found init rule in `\module46.$proc$rtl.v:322$402'.
  Set init value: \reg67 = 17'00000000000000000
Found init rule in `\module46.$proc$rtl.v:319$401'.
  Set init value: \reg70 = 14'00000000000000
Found init rule in `\module46.$proc$rtl.v:318$400'.
  Set init value: \reg71 = 3'000
Found init rule in `\module46.$proc$rtl.v:317$399'.
  Set init value: \reg72 = 11'00000000000
Found init rule in `\module46.$proc$rtl.v:316$398'.
  Set init value: \reg73 = 21'000000000000000000000
Found init rule in `\module46.$proc$rtl.v:315$397'.
  Set init value: \reg74 = 20'00000000000000000000
Found init rule in `\module46.$proc$rtl.v:314$396'.
  Set init value: \reg75 = 9'000000000
Found init rule in `\module46.$proc$rtl.v:313$395'.
  Set init value: \reg76 = 22'0000000000000000000000
Found init rule in `\module46.$proc$rtl.v:312$394'.
  Set init value: \reg77 = 10'0000000000
Found init rule in `\module46.$proc$rtl.v:311$393'.
  Set init value: \reg78 = 22'0000000000000000000000
Found init rule in `\module46.$proc$rtl.v:310$392'.
  Set init value: \reg79 = 22'0000000000000000000000
Found init rule in `\module46.$proc$rtl.v:309$391'.
  Set init value: \reg80 = 12'000000000000
Found init rule in `\module9.$proc$rtl.v:210$253'.
  Set init value: \reg20 = 19'0000000000000000000
Found init rule in `\module9.$proc$rtl.v:209$252'.
  Set init value: \reg21 = 8'00000000
Found init rule in `\module9.$proc$rtl.v:202$251'.
  Set init value: \reg28 = 16'0000000000000000
Found init rule in `\module9.$proc$rtl.v:201$250'.
  Set init value: \reg29 = 15'000000000000000
Found init rule in `\module9.$proc$rtl.v:200$249'.
  Set init value: \reg30 = 11'00000000000
Found init rule in `\module9.$proc$rtl.v:199$248'.
  Set init value: \reg31 = 17'00000000000000000
Found init rule in `\module9.$proc$rtl.v:198$247'.
  Set init value: \reg32 = 4'0000
Found init rule in `\module9.$proc$rtl.v:197$246'.
  Set init value: \reg33 = 4'0000
Found init rule in `\module40.$proc$rtl.v:68$166'.
  Set init value: \reg88 = 12'000000000000
Found init rule in `\module40.$proc$rtl.v:66$165'.
  Set init value: \reg90 = 10'0000000000
Found init rule in `\module40.$proc$rtl.v:65$164'.
  Set init value: \reg91 = 21'000000000000000000000
Found init rule in `\module40.$proc$rtl.v:64$163'.
  Set init value: \reg92 = 16'0000000000000000
Found init rule in `\module40.$proc$rtl.v:63$162'.
  Set init value: \reg93 = 6'000000
Found init rule in `\module40.$proc$rtl.v:62$161'.
  Set init value: \reg94 = 21'000000000000000000000
Found init rule in `\module40.$proc$rtl.v:61$160'.
  Set init value: \reg95 = 8'00000000
Found init rule in `\module40.$proc$rtl.v:60$159'.
  Set init value: \reg96 = 5'00000
Found init rule in `\module40.$proc$rtl.v:59$158'.
  Set init value: \reg97 = 16'0000000000000000
Found init rule in `\module40.$proc$rtl.v:58$157'.
  Set init value: \reg98 = 12'000000000000
Found init rule in `\module40.$proc$rtl.v:57$156'.
  Set init value: \reg99 = 21'000000000000000000000
Found init rule in `\module40.$proc$rtl.v:56$155'.
  Set init value: \reg100 = 11'00000000000
Found init rule in `\module40.$proc$rtl.v:55$154'.
  Set init value: \reg101 = 20'00000000000000000000
Found init rule in `\top.$proc$rtl.v:11$11'.
  Set init value: \reg109 = 11'00000000000

2.2.4. Executing PROC_ARST pass (detect async resets in processes).

2.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\module46.$proc$rtl.v:337$404'.
     1/1: $1\reg52[6:0]
Creating decoders for process `\module46.$proc$rtl.v:323$403'.
     1/1: $1\reg66[17:0]
Creating decoders for process `\module46.$proc$rtl.v:322$402'.
     1/1: $1\reg67[16:0]
Creating decoders for process `\module46.$proc$rtl.v:319$401'.
     1/1: $1\reg70[13:0]
Creating decoders for process `\module46.$proc$rtl.v:318$400'.
     1/1: $1\reg71[2:0]
Creating decoders for process `\module46.$proc$rtl.v:317$399'.
     1/1: $1\reg72[10:0]
Creating decoders for process `\module46.$proc$rtl.v:316$398'.
     1/1: $1\reg73[20:0]
Creating decoders for process `\module46.$proc$rtl.v:315$397'.
     1/1: $1\reg74[19:0]
Creating decoders for process `\module46.$proc$rtl.v:314$396'.
     1/1: $1\reg75[8:0]
Creating decoders for process `\module46.$proc$rtl.v:313$395'.
     1/1: $1\reg76[21:0]
Creating decoders for process `\module46.$proc$rtl.v:312$394'.
     1/1: $1\reg77[9:0]
Creating decoders for process `\module46.$proc$rtl.v:311$393'.
     1/1: $1\reg78[21:0]
Creating decoders for process `\module46.$proc$rtl.v:310$392'.
     1/1: $1\reg79[21:0]
Creating decoders for process `\module46.$proc$rtl.v:309$391'.
     1/1: $1\reg80[11:0]
Creating decoders for process `\module46.$proc$rtl.v:449$373'.
     1/5: $0\reg80[11:0]
     2/5: $0\reg79[21:0]
     3/5: $0\reg78[21:0]
     4/5: $0\reg77[9:0]
     5/5: $0\reg76[21:0]
Creating decoders for process `\module46.$proc$rtl.v:413$345'.
     1/6: $0\reg70[13:0]
     2/6: $0\reg71[2:0]
     3/6: $0\reg72[10:0]
     4/6: $0\reg73[20:0]
     5/6: $0\reg75[8:0]
     6/6: $0\reg74[19:0]
Creating decoders for process `\module46.$proc$rtl.v:403$330'.
     1/2: $0\reg67[16:0]
     2/2: $0\reg66[17:0]
Creating decoders for process `\module46.$proc$rtl.v:368$254'.
     1/1: $0\reg52[6:0]
Creating decoders for process `\module9.$proc$rtl.v:210$253'.
     1/1: $1\reg20[18:0]
Creating decoders for process `\module9.$proc$rtl.v:209$252'.
     1/1: $1\reg21[7:0]
Creating decoders for process `\module9.$proc$rtl.v:202$251'.
     1/1: $1\reg28[15:0]
Creating decoders for process `\module9.$proc$rtl.v:201$250'.
     1/1: $1\reg29[14:0]
Creating decoders for process `\module9.$proc$rtl.v:200$249'.
     1/1: $1\reg30[10:0]
Creating decoders for process `\module9.$proc$rtl.v:199$248'.
     1/1: $1\reg31[16:0]
Creating decoders for process `\module9.$proc$rtl.v:198$247'.
     1/1: $1\reg32[3:0]
Creating decoders for process `\module9.$proc$rtl.v:197$246'.
     1/1: $1\reg33[3:0]
Creating decoders for process `\module9.$proc$rtl.v:265$206'.
     1/6: $0\reg30[10:0]
     2/6: $0\reg29[14:0]
     3/6: $0\reg28[15:0]
     4/6: $0\reg31[16:0]
     5/6: $0\reg32[3:0]
     6/6: $0\reg33[3:0]
Creating decoders for process `\module9.$proc$rtl.v:254$197'.
     1/2: $0\reg21[7:0]
     2/2: $0\reg20[18:0]
Creating decoders for process `\module40.$proc$rtl.v:68$166'.
     1/1: $1\reg88[11:0]
Creating decoders for process `\module40.$proc$rtl.v:66$165'.
     1/1: $1\reg90[9:0]
Creating decoders for process `\module40.$proc$rtl.v:65$164'.
     1/1: $1\reg91[20:0]
Creating decoders for process `\module40.$proc$rtl.v:64$163'.
     1/1: $1\reg92[15:0]
Creating decoders for process `\module40.$proc$rtl.v:63$162'.
     1/1: $1\reg93[5:0]
Creating decoders for process `\module40.$proc$rtl.v:62$161'.
     1/1: $1\reg94[20:0]
Creating decoders for process `\module40.$proc$rtl.v:61$160'.
     1/1: $1\reg95[7:0]
Creating decoders for process `\module40.$proc$rtl.v:60$159'.
     1/1: $1\reg96[4:0]
Creating decoders for process `\module40.$proc$rtl.v:59$158'.
     1/1: $1\reg97[15:0]
Creating decoders for process `\module40.$proc$rtl.v:58$157'.
     1/1: $1\reg98[11:0]
Creating decoders for process `\module40.$proc$rtl.v:57$156'.
     1/1: $1\reg99[20:0]
Creating decoders for process `\module40.$proc$rtl.v:56$155'.
     1/1: $1\reg100[10:0]
Creating decoders for process `\module40.$proc$rtl.v:55$154'.
     1/1: $1\reg101[19:0]
Creating decoders for process `\module40.$proc$rtl.v:164$105'.
     1/3: $0\reg101[19:0]
     2/3: $0\reg100[10:0]
     3/3: $0\reg99[20:0]
Creating decoders for process `\module40.$proc$rtl.v:116$37'.
     1/9: $0\reg98[11:0]
     2/9: $0\reg90[9:0]
     3/9: $0\reg91[20:0]
     4/9: $0\reg92[15:0]
     5/9: $0\reg93[5:0]
     6/9: $0\reg94[20:0]
     7/9: $0\reg95[7:0]
     8/9: $0\reg97[15:0]
     9/9: $0\reg96[4:0]
Creating decoders for process `\module40.$proc$rtl.v:109$33'.
     1/1: $0\reg88[11:0]
Creating decoders for process `\top.$proc$rtl.v:11$11'.
     1/1: $1\reg109[10:0]
Creating decoders for process `\top.$proc$rtl.v:37$10'.
     1/1: $0\reg109[10:0]

2.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\module46.\reg76' using process `\module46.$proc$rtl.v:449$373'.
  created $dff cell `$procdff$480' with positive edge clock.
Creating register for signal `\module46.\reg80' using process `\module46.$proc$rtl.v:449$373'.
  created $dff cell `$procdff$481' with positive edge clock.
Creating register for signal `\module46.\reg79' using process `\module46.$proc$rtl.v:449$373'.
  created $dff cell `$procdff$482' with positive edge clock.
Creating register for signal `\module46.\reg78' using process `\module46.$proc$rtl.v:449$373'.
  created $dff cell `$procdff$483' with positive edge clock.
Creating register for signal `\module46.\reg77' using process `\module46.$proc$rtl.v:449$373'.
  created $dff cell `$procdff$484' with positive edge clock.
Creating register for signal `\module46.\reg74' using process `\module46.$proc$rtl.v:413$345'.
  created $dff cell `$procdff$485' with positive edge clock.
Creating register for signal `\module46.\reg75' using process `\module46.$proc$rtl.v:413$345'.
  created $dff cell `$procdff$486' with positive edge clock.
Creating register for signal `\module46.\reg73' using process `\module46.$proc$rtl.v:413$345'.
  created $dff cell `$procdff$487' with positive edge clock.
Creating register for signal `\module46.\reg72' using process `\module46.$proc$rtl.v:413$345'.
  created $dff cell `$procdff$488' with positive edge clock.
Creating register for signal `\module46.\reg71' using process `\module46.$proc$rtl.v:413$345'.
  created $dff cell `$procdff$489' with positive edge clock.
Creating register for signal `\module46.\reg70' using process `\module46.$proc$rtl.v:413$345'.
  created $dff cell `$procdff$490' with positive edge clock.
Creating register for signal `\module46.\reg67' using process `\module46.$proc$rtl.v:403$330'.
  created $dff cell `$procdff$491' with positive edge clock.
Creating register for signal `\module46.\reg66' using process `\module46.$proc$rtl.v:403$330'.
  created $dff cell `$procdff$492' with positive edge clock.
Creating register for signal `\module46.\reg52' using process `\module46.$proc$rtl.v:368$254'.
  created $dff cell `$procdff$493' with positive edge clock.
Creating register for signal `\module9.\reg33' using process `\module9.$proc$rtl.v:265$206'.
  created $dff cell `$procdff$494' with positive edge clock.
Creating register for signal `\module9.\reg32' using process `\module9.$proc$rtl.v:265$206'.
  created $dff cell `$procdff$495' with positive edge clock.
Creating register for signal `\module9.\reg31' using process `\module9.$proc$rtl.v:265$206'.
  created $dff cell `$procdff$496' with positive edge clock.
Creating register for signal `\module9.\reg30' using process `\module9.$proc$rtl.v:265$206'.
  created $dff cell `$procdff$497' with positive edge clock.
Creating register for signal `\module9.\reg29' using process `\module9.$proc$rtl.v:265$206'.
  created $dff cell `$procdff$498' with positive edge clock.
Creating register for signal `\module9.\reg28' using process `\module9.$proc$rtl.v:265$206'.
  created $dff cell `$procdff$499' with positive edge clock.
Creating register for signal `\module9.\reg21' using process `\module9.$proc$rtl.v:254$197'.
  created $dff cell `$procdff$500' with positive edge clock.
Creating register for signal `\module9.\reg20' using process `\module9.$proc$rtl.v:254$197'.
  created $dff cell `$procdff$501' with positive edge clock.
Creating register for signal `\module40.\reg100' using process `\module40.$proc$rtl.v:164$105'.
  created $dff cell `$procdff$502' with positive edge clock.
Creating register for signal `\module40.\reg99' using process `\module40.$proc$rtl.v:164$105'.
  created $dff cell `$procdff$503' with positive edge clock.
Creating register for signal `\module40.\reg101' using process `\module40.$proc$rtl.v:164$105'.
  created $dff cell `$procdff$504' with positive edge clock.
Creating register for signal `\module40.\reg98' using process `\module40.$proc$rtl.v:116$37'.
  created $dff cell `$procdff$505' with positive edge clock.
Creating register for signal `\module40.\reg96' using process `\module40.$proc$rtl.v:116$37'.
  created $dff cell `$procdff$506' with positive edge clock.
Creating register for signal `\module40.\reg97' using process `\module40.$proc$rtl.v:116$37'.
  created $dff cell `$procdff$507' with positive edge clock.
Creating register for signal `\module40.\reg95' using process `\module40.$proc$rtl.v:116$37'.
  created $dff cell `$procdff$508' with positive edge clock.
Creating register for signal `\module40.\reg94' using process `\module40.$proc$rtl.v:116$37'.
  created $dff cell `$procdff$509' with positive edge clock.
Creating register for signal `\module40.\reg93' using process `\module40.$proc$rtl.v:116$37'.
  created $dff cell `$procdff$510' with positive edge clock.
Creating register for signal `\module40.\reg92' using process `\module40.$proc$rtl.v:116$37'.
  created $dff cell `$procdff$511' with positive edge clock.
Creating register for signal `\module40.\reg91' using process `\module40.$proc$rtl.v:116$37'.
  created $dff cell `$procdff$512' with positive edge clock.
Creating register for signal `\module40.\reg90' using process `\module40.$proc$rtl.v:116$37'.
  created $dff cell `$procdff$513' with positive edge clock.
Creating register for signal `\module40.\reg88' using process `\module40.$proc$rtl.v:109$33'.
  created $dff cell `$procdff$514' with positive edge clock.
Creating register for signal `\top.\reg109' using process `\top.$proc$rtl.v:37$10'.
  created $dff cell `$procdff$515' with positive edge clock.

2.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `module46.$proc$rtl.v:337$404'.
Removing empty process `module46.$proc$rtl.v:323$403'.
Removing empty process `module46.$proc$rtl.v:322$402'.
Removing empty process `module46.$proc$rtl.v:319$401'.
Removing empty process `module46.$proc$rtl.v:318$400'.
Removing empty process `module46.$proc$rtl.v:317$399'.
Removing empty process `module46.$proc$rtl.v:316$398'.
Removing empty process `module46.$proc$rtl.v:315$397'.
Removing empty process `module46.$proc$rtl.v:314$396'.
Removing empty process `module46.$proc$rtl.v:313$395'.
Removing empty process `module46.$proc$rtl.v:312$394'.
Removing empty process `module46.$proc$rtl.v:311$393'.
Removing empty process `module46.$proc$rtl.v:310$392'.
Removing empty process `module46.$proc$rtl.v:309$391'.
Removing empty process `module46.$proc$rtl.v:449$373'.
Found and cleaned up 3 empty switches in `\module46.$proc$rtl.v:413$345'.
Removing empty process `module46.$proc$rtl.v:413$345'.
Removing empty process `module46.$proc$rtl.v:403$330'.
Removing empty process `module46.$proc$rtl.v:368$254'.
Removing empty process `module9.$proc$rtl.v:210$253'.
Removing empty process `module9.$proc$rtl.v:209$252'.
Removing empty process `module9.$proc$rtl.v:202$251'.
Removing empty process `module9.$proc$rtl.v:201$250'.
Removing empty process `module9.$proc$rtl.v:200$249'.
Removing empty process `module9.$proc$rtl.v:199$248'.
Removing empty process `module9.$proc$rtl.v:198$247'.
Removing empty process `module9.$proc$rtl.v:197$246'.
Found and cleaned up 1 empty switch in `\module9.$proc$rtl.v:265$206'.
Removing empty process `module9.$proc$rtl.v:265$206'.
Removing empty process `module9.$proc$rtl.v:254$197'.
Removing empty process `module40.$proc$rtl.v:68$166'.
Removing empty process `module40.$proc$rtl.v:66$165'.
Removing empty process `module40.$proc$rtl.v:65$164'.
Removing empty process `module40.$proc$rtl.v:64$163'.
Removing empty process `module40.$proc$rtl.v:63$162'.
Removing empty process `module40.$proc$rtl.v:62$161'.
Removing empty process `module40.$proc$rtl.v:61$160'.
Removing empty process `module40.$proc$rtl.v:60$159'.
Removing empty process `module40.$proc$rtl.v:59$158'.
Removing empty process `module40.$proc$rtl.v:58$157'.
Removing empty process `module40.$proc$rtl.v:57$156'.
Removing empty process `module40.$proc$rtl.v:56$155'.
Removing empty process `module40.$proc$rtl.v:55$154'.
Removing empty process `module40.$proc$rtl.v:164$105'.
Found and cleaned up 3 empty switches in `\module40.$proc$rtl.v:116$37'.
Removing empty process `module40.$proc$rtl.v:116$37'.
Removing empty process `module40.$proc$rtl.v:109$33'.
Removing empty process `top.$proc$rtl.v:11$11'.
Removing empty process `top.$proc$rtl.v:37$10'.
Cleaned up 7 empty switches.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module module46.
<suppressed ~15 debug messages>
Optimizing module module9.
<suppressed ~11 debug messages>
Optimizing module module40.
<suppressed ~16 debug messages>
Optimizing module top.
<suppressed ~2 debug messages>

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \top..
Removed 31 unused cells and 207 unused wires.
<suppressed ~67 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
checking module module40..
checking module module46..
checking module module9..
checking module top..
found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module40.
Optimizing module module46.
Optimizing module module9.
Optimizing module top.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module40'.
<suppressed ~3 debug messages>
Finding identical cells in module `\module46'.
Finding identical cells in module `\module9'.
<suppressed ~3 debug messages>
Finding identical cells in module `\top'.
Removed a total of 2 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module40..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~58 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module40.
    New input vector for $reduce_or cell $reduce_or$rtl.v:172$126: { $ternary$rtl.v:172$125_Y [0] $ternary$rtl.v:172$125_Y [1] $ternary$rtl.v:172$125_Y [2] $ternary$rtl.v:172$125_Y [3] $ternary$rtl.v:172$125_Y [4] $ternary$rtl.v:172$125_Y [5] $ternary$rtl.v:172$125_Y [6] $ternary$rtl.v:172$125_Y [7] $ternary$rtl.v:172$125_Y [8] $ternary$rtl.v:172$125_Y [9] $ternary$rtl.v:172$125_Y [10] $ternary$rtl.v:172$125_Y [11] $ternary$rtl.v:172$125_Y [12] $ternary$rtl.v:172$125_Y [13] $ternary$rtl.v:172$125_Y [14] $ternary$rtl.v:172$125_Y [15] $ternary$rtl.v:172$125_Y [16] $ternary$rtl.v:172$125_Y [17] $ternary$rtl.v:172$125_Y [18] $ternary$rtl.v:172$125_Y [19] $ternary$rtl.v:172$125_Y [20] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:153$77: { \wire89 [0] \wire89 [1] \wire89 [2] \wire89 [3] \wire89 [4] \wire89 [5] \wire89 [6] \wire89 [7] \wire89 [8] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:133$47: { \wire83 [0] \wire83 [1] \wire83 [2] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:130$45: { \wire43 [2] \wire43 [3] \wire43 [4] \wire43 [5] \wire43 [6] \wire43 [7] \wire43 [8] \wire43 [9] \wire43 [10] \wire43 [11] \wire43 [12] \wire43 [13] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:176$137: { \wire83 [0] \wire83 [1] \wire83 [2] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:141$69: { \wire41 [0] \wire41 [1] \wire41 [2] \wire41 [3] \wire41 [4] \wire41 [5] \wire41 [6] \wire41 [7] \wire41 [8] \wire41 [9] \wire41 [10] \wire41 [11] \wire41 [12] \wire41 [13] \wire41 [14] \wire41 [15] \wire41 [16] \wire41 [17] \wire41 [18] \wire41 [19] }
  Optimizing cells in module \module40.
  Optimizing cells in module \module46.
    New input vector for $reduce_or cell $reduce_or$rtl.v:412$342: { $neg$rtl.v:412$341_Y [0] $neg$rtl.v:412$341_Y [1] $neg$rtl.v:412$341_Y [2] $neg$rtl.v:412$341_Y [3] $neg$rtl.v:412$341_Y [4] $neg$rtl.v:412$341_Y [5] $neg$rtl.v:412$341_Y [6] $neg$rtl.v:412$341_Y [7] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:400$324: { \wire56 [0] \wire56 [1] \wire56 [2] \wire56 [3] \wire56 [4] \wire56 [5] \wire56 [6] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:388$298: { $add$rtl.v:388$297_Y [0] $add$rtl.v:388$297_Y [1] $add$rtl.v:388$297_Y [2] $add$rtl.v:388$297_Y [3] $add$rtl.v:388$297_Y [4] $add$rtl.v:388$297_Y [5] $add$rtl.v:388$297_Y [6] $add$rtl.v:388$297_Y [7] $add$rtl.v:388$297_Y [8] $add$rtl.v:388$297_Y [9] $add$rtl.v:388$297_Y [10] $add$rtl.v:388$297_Y [11] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:402$328: { \wire63 [4] \wire63 [5] \wire63 [6] \wire63 [7] \wire63 [8] \wire63 [9] \wire63 [10] \wire63 [11] \wire63 [12] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:385$286: { \wire47 [0] \wire47 [1] \wire47 [2] \wire47 [3] \wire47 [4] \wire47 [5] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:379$272: { $ternary$rtl.v:379$271_Y [0] $ternary$rtl.v:379$271_Y [1] $ternary$rtl.v:379$271_Y [2] $ternary$rtl.v:379$271_Y [3] $ternary$rtl.v:379$271_Y [4] $ternary$rtl.v:379$271_Y [5] $ternary$rtl.v:379$271_Y [6] $ternary$rtl.v:379$271_Y [7] $ternary$rtl.v:379$271_Y [8] $ternary$rtl.v:379$271_Y [9] $ternary$rtl.v:379$271_Y [10] }
  Optimizing cells in module \module46.
  Optimizing cells in module \module9.
    New input vector for $reduce_or cell $reduce_or$rtl.v:288$233: { \wire10 [0] \wire10 [1] \wire10 [2] \wire10 [3] \wire10 [4] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:276$220: { \wire10 [0] \wire10 [1] \wire10 [2] \wire10 [3] \wire10 [4] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:257$202: { \wire14 [0] \wire14 [1] \wire14 [2] \wire14 [3] \wire14 [4] \wire14 [5] \wire14 [6] \wire14 [7] \wire14 [8] \wire14 [9] \wire14 [10] \wire14 [11] \wire14 [12] \wire14 [13] \wire14 [14] \wire14 [15] \wire14 [16] \wire14 [17] \wire14 [18] \wire14 [19] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:251$190: { \wire11 [0] \wire11 [1] \wire11 [2] \wire11 [3] \wire11 [4] \wire11 [5] \wire11 [6] \wire11 [7] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:294$242: { \wire18 [0] \wire18 [1] \wire18 [2] \wire18 [3] \wire18 [4] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:257$201: { \wire12 [0] \wire12 [1] \wire12 [2] \wire12 [3] \wire12 [4] \wire12 [5] \wire12 [6] \wire12 [7] \wire12 [8] \wire12 [9] \wire12 [10] \wire12 [11] \wire12 [12] \wire12 [13] \wire12 [14] \wire12 [15] \wire12 [16] \wire12 [17] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:251$191: { \wire12 [0] \wire12 [1] \wire12 [2] \wire12 [3] \wire12 [4] \wire12 [5] \wire12 [6] \wire12 [7] \wire12 [8] \wire12 [9] \wire12 [10] }
  Optimizing cells in module \module9.
  Optimizing cells in module \top.
Performed a total of 19 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module40'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module9'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.6. Executing OPT_RMDFF pass (remove dff with constant values).
Promoting init spec \reg80 = 12'000000000000 to constant driver in module module46.
Removing $procdff$494 ($dff) from module module9.
Removing $procdff$499 ($dff) from module module9.
Removing $procdff$515 ($dff) from module top.
Promoted 1 init specs to constant drivers.
Replaced 3 DFF cells.

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..
Removed 1 unused cells and 3 unused wires.
<suppressed ~3 debug messages>

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module40.
Optimizing module module46.
Optimizing module module9.
<suppressed ~6 debug messages>
Optimizing module top.

2.6.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module40..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $ternary$rtl.v:290$239.
    dead port 2/2 on $mux $ternary$rtl.v:290$239.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 2 multiplexer ports.
<suppressed ~55 debug messages>

2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module40.
  Optimizing cells in module \module46.
  Optimizing cells in module \module9.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module40'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module9'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..
Removed 12 unused cells and 17 unused wires.
<suppressed ~14 debug messages>

2.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module40.
Optimizing module module46.
Optimizing module module9.
Optimizing module top.

2.6.16. Rerunning OPT passes. (Maybe there is more to do..)

2.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module40..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~53 debug messages>

2.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module40.
  Optimizing cells in module \module46.
  Optimizing cells in module \module9.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module40'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module9'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..

2.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module module40.
Optimizing module module46.
Optimizing module module9.
Optimizing module top.

2.6.23. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 9 bits (of 16) from port A of cell module40.$le$rtl.v:99$15 ($le).
Removed top 6 bits (of 20) from mux cell module40.$ternary$rtl.v:103$28 ($mux).
Removed top 8 bits (of 17) from mux cell module40.$ternary$rtl.v:106$31 ($mux).
Removed top 16 bits (of 25) from port Y of cell module40.$xnor$rtl.v:115$36 ($xnor).
Removed top 7 bits (of 8) from port A of cell module40.$ne$rtl.v:133$53 ($ne).
Removed top 11 bits (of 21) from port Y of cell module40.$not$rtl.v:121$41 ($not).
Removed top 11 bits (of 21) from port A of cell module40.$not$rtl.v:121$41 ($not).
Removed top 30 bits (of 32) from port A of cell module40.$sub$rtl.v:123$42 ($sub).
Removed top 6 bits (of 20) from port A of cell module40.$lt$rtl.v:140$63 ($lt).
Removed top 17 bits (of 21) from mux cell module40.$ternary$rtl.v:140$68 ($mux).
Removed top 15 bits (of 16) from port A of cell module40.$xor$rtl.v:141$70 ($xor).
Removed top 13 bits (of 16) from port Y of cell module40.$xor$rtl.v:141$70 ($xor).
Removed top 6 bits (of 7) from mux cell module40.$ternary$rtl.v:153$79 ($mux).
Removed top 6 bits (of 7) from port A of cell module40.$le$rtl.v:153$81 ($le).
Removed top 13 bits (of 21) from mux cell module40.$ternary$rtl.v:153$83 ($mux).
Removed top 10 bits (of 21) from port A of cell module40.$sub$rtl.v:158$95 ($sub).
Removed top 5 bits (of 21) from port Y of cell module40.$sub$rtl.v:158$95 ($sub).
Removed top 5 bits (of 21) from port B of cell module40.$sub$rtl.v:158$95 ($sub).
Removed top 4 bits (of 16) from mux cell module40.$ternary$rtl.v:162$104 ($mux).
Removed top 9 bits (of 21) from port B of cell module40.$xnor$rtl.v:167$109 ($xnor).
Removed top 6 bits (of 16) from port A of cell module40.$or$rtl.v:169$115 ($or).
Removed top 6 bits (of 16) from port Y of cell module40.$or$rtl.v:169$115 ($or).
Removed top 14 bits (of 21) from mux cell module40.$ternary$rtl.v:170$120 ($mux).
Removed top 14 bits (of 21) from mux cell module40.$ternary$rtl.v:170$122 ($mux).
Removed top 19 bits (of 30) from mux cell module40.$ternary$rtl.v:174$136 ($mux).
Removed top 19 bits (of 20) from mux cell module40.$ternary$rtl.v:176$145 ($mux).
Removed top 17 bits (of 21) from mux cell module40.$procmux$451 ($mux).
Removed top 13 bits (of 16) from mux cell module40.$procmux$457 ($mux).
Removed top 13 bits (of 21) from mux cell module40.$procmux$469 ($mux).
Removed top 14 bits (of 21) from FF cell module40.$procdff$503 ($dff).
Removed top 19 bits (of 20) from FF cell module40.$procdff$504 ($dff).
Removed top 13 bits (of 21) from FF cell module40.$procdff$509 ($dff).
Removed top 11 bits (of 12) from FF cell module40.$procdff$514 ($dff).
Removed top 6 bits (of 20) from mux cell module40.$ternary$rtl.v:103$25 ($mux).
Removed top 11 bits (of 12) from port B of cell module40.$sshr$rtl.v:157$85 ($sshr).
Removed top 5 bits (of 21) from port Y of cell module40.$neg$rtl.v:158$94 ($neg).
Removed top 5 bits (of 21) from port A of cell module40.$neg$rtl.v:158$94 ($neg).
Removed top 11 bits (of 21) from mux cell module40.$ternary$rtl.v:172$125 ($mux).
Removed top 19 bits (of 30) from mux cell module40.$ternary$rtl.v:174$135 ($mux).
Removed top 19 bits (of 20) from wire module40.$0\reg101[19:0].
Removed top 11 bits (of 12) from wire module40.$0\reg88[11:0].
Removed top 13 bits (of 21) from wire module40.$0\reg94[20:0].
Removed top 14 bits (of 21) from wire module40.$0\reg99[20:0].
Removed top 15 bits (of 16) from wire module40.$gt$rtl.v:102$20_Y.
Removed top 20 bits (of 21) from wire module40.$logic_and$rtl.v:169$116_Y.
Removed top 20 bits (of 21) from wire module40.$logic_not$rtl.v:123$43_Y.
Removed top 20 bits (of 21) from wire module40.$logic_not$rtl.v:140$65_Y.
Removed top 6 bits (of 7) from wire module40.$logic_not$rtl.v:153$76_Y.
Removed top 6 bits (of 7) from wire module40.$logic_not$rtl.v:153$78_Y.
Removed top 19 bits (of 20) from wire module40.$logic_not$rtl.v:176$142_Y.
Removed top 16 bits (of 17) from wire module40.$logic_or$rtl.v:106$29_Y.
Removed top 5 bits (of 21) from wire module40.$neg$rtl.v:158$94_Y.
Removed top 11 bits (of 21) from wire module40.$not$rtl.v:121$41_Y.
Removed top 6 bits (of 16) from wire module40.$or$rtl.v:169$115_Y.
Removed top 17 bits (of 21) from wire module40.$procmux$451_Y.
Removed top 13 bits (of 16) from wire module40.$procmux$457_Y.
Removed top 15 bits (of 16) from wire module40.$reduce_and$rtl.v:141$69_Y.
Removed top 19 bits (of 20) from wire module40.$reduce_xnor$rtl.v:103$23_Y.
Removed top 7 bits (of 8) from wire module40.$reduce_xnor$rtl.v:154$84_Y.
Removed top 10 bits (of 11) from wire module40.$reduce_xnor$rtl.v:157$86_Y.
Removed top 5 bits (of 21) from wire module40.$sub$rtl.v:158$95_Y.
Removed top 6 bits (of 20) from wire module40.$ternary$rtl.v:103$25_Y.
Removed top 17 bits (of 21) from wire module40.$ternary$rtl.v:140$68_Y.
Removed top 13 bits (of 21) from wire module40.$ternary$rtl.v:153$83_Y.
Removed top 19 bits (of 30) from wire module40.$ternary$rtl.v:174$135_Y.
Removed top 13 bits (of 16) from wire module40.$xor$rtl.v:141$70_Y.
Removed top 19 bits (of 20) from wire module40.wire102.
Removed top 13 bits (of 14) from mux cell module46.$procmux$409 ($mux).
Removed top 20 bits (of 31) from mux cell module46.$ternary$rtl.v:374$264 ($mux).
Removed top 20 bits (of 31) from port A of cell module46.$add$rtl.v:374$265 ($add).
Removed top 29 bits (of 31) from port B of cell module46.$add$rtl.v:374$265 ($add).
Removed top 19 bits (of 31) from port Y of cell module46.$add$rtl.v:374$265 ($add).
Removed top 19 bits (of 31) from port B of cell module46.$gt$rtl.v:374$266 ($gt).
Removed top 4 bits (of 16) from port A of cell module46.$lt$rtl.v:378$267 ($lt).
Removed top 2 bits (of 6) from port A of cell module46.$xnor$rtl.v:379$274 ($xnor).
Removed top 6 bits (of 7) from port B of cell module46.$xnor$rtl.v:379$274 ($xnor).
Removed top 6 bits (of 14) from port A of cell module46.$sshl$rtl.v:385$290 ($sshl).
Removed top 7 bits (of 12) from port A of cell module46.$xor$rtl.v:388$294 ($xor).
Removed top 1 bits (of 2) from port B of cell module46.$xor$rtl.v:388$294 ($xor).
Removed top 7 bits (of 12) from port Y of cell module46.$xor$rtl.v:388$294 ($xor).
Removed top 7 bits (of 14) from port A of cell module46.$sshr$rtl.v:388$295 ($sshr).
Removed top 6 bits (of 12) from port A of cell module46.$add$rtl.v:388$297 ($add).
Removed top 11 bits (of 12) from port B of cell module46.$add$rtl.v:388$297 ($add).
Removed top 5 bits (of 12) from port Y of cell module46.$add$rtl.v:388$297 ($add).
Removed top 20 bits (of 21) from port A of cell module46.$xor$rtl.v:391$300 ($xor).
Removed top 20 bits (of 21) from port B of cell module46.$xor$rtl.v:391$300 ($xor).
Removed top 20 bits (of 21) from port Y of cell module46.$xor$rtl.v:391$300 ($xor).
Removed top 20 bits (of 21) from port A of cell module46.$xnor$rtl.v:391$301 ($xnor).
Removed top 14 bits (of 21) from port B of cell module46.$xnor$rtl.v:391$301 ($xnor).
Removed top 21 bits (of 22) from port B of cell module46.$le$rtl.v:393$305 ($le).
Removed top 17 bits (of 18) from port A of cell module46.$and$rtl.v:395$311 ($and).
Removed top 12 bits (of 18) from port B of cell module46.$and$rtl.v:395$311 ($and).
Removed top 12 bits (of 18) from port Y of cell module46.$and$rtl.v:395$311 ($and).
Removed top 11 bits (of 18) from mux cell module46.$ternary$rtl.v:395$314 ($mux).
Removed top 7 bits (of 11) from mux cell module46.$ternary$rtl.v:396$318 ($mux).
Removed top 6 bits (of 14) from mux cell module46.$ternary$rtl.v:400$327 ($mux).
Removed top 10 bits (of 11) from port A of cell module46.$le$rtl.v:410$335 ($le).
Removed top 18 bits (of 19) from port B of cell module46.$le$rtl.v:410$335 ($le).
Removed top 1 bits (of 2) from mux cell module46.$ternary$rtl.v:410$337 ($mux).
Removed top 7 bits (of 8) from port A of cell module46.$neg$rtl.v:412$341 ($neg).
Removed top 8 bits (of 14) from port A of cell module46.$not$rtl.v:415$347 ($not).
Removed top 7 bits (of 14) from port A of cell module46.$add$rtl.v:415$348 ($add).
Removed top 8 bits (of 12) from mux cell module46.$ternary$rtl.v:427$363 ($mux).
Removed top 8 bits (of 12) from port A of cell module46.$sshr$rtl.v:428$367 ($sshr).
Removed top 9 bits (of 12) from port Y of cell module46.$sshr$rtl.v:428$367 ($sshr).
Removed top 10 bits (of 11) from port A of cell module46.$gt$rtl.v:435$372 ($gt).
Removed top 7 bits (of 11) from port B of cell module46.$gt$rtl.v:435$372 ($gt).
Removed top 13 bits (of 20) from port B of cell module46.$sub$rtl.v:453$379 ($sub).
Removed cell module46.$procmux$421 ($mux).
Removed top 21 bits (of 22) from FF cell module46.$procdff$480 ($dff).
Removed top 16 bits (of 22) from FF cell module46.$procdff$482 ($dff).
Removed top 15 bits (of 22) from FF cell module46.$procdff$483 ($dff).
Removed top 9 bits (of 10) from FF cell module46.$procdff$484 ($dff).
Removed top 13 bits (of 14) from FF cell module46.$procdff$490 ($dff).
Removed top 16 bits (of 17) from FF cell module46.$procdff$491 ($dff).
Removed top 12 bits (of 18) from FF cell module46.$procdff$492 ($dff).
Removed top 6 bits (of 7) from FF cell module46.$procdff$493 ($dff).
Removed top 13 bits (of 14) from port A of cell module46.$sub$rtl.v:453$379 ($sub).
Removed top 12 bits (of 18) from mux cell module46.$ternary$rtl.v:458$390 ($mux).
Removed top 12 bits (of 18) from mux cell module46.$ternary$rtl.v:458$387 ($mux).
Removed top 13 bits (of 14) from wire module46.$0\reg70[13:0].
Removed top 21 bits (of 22) from wire module46.$0\reg76[21:0].
Removed top 9 bits (of 10) from wire module46.$0\reg77[9:0].
Removed top 16 bits (of 22) from wire module46.$0\reg79[21:0].
Removed top 19 bits (of 31) from wire module46.$add$rtl.v:374$265_Y.
Removed top 12 bits (of 18) from wire module46.$and$rtl.v:395$311_Y.
Removed top 1 bits (of 2) from wire module46.$le$rtl.v:410$335_Y.
Removed top 17 bits (of 18) from wire module46.$logic_and$rtl.v:458$388_Y.
Removed top 6 bits (of 7) from wire module46.$logic_not$rtl.v:379$273_Y.
Removed top 6 bits (of 7) from wire module46.$logic_not$rtl.v:385$287_Y.
Removed top 10 bits (of 11) from wire module46.$logic_not$rtl.v:435$371_Y.
Removed top 3 bits (of 17) from wire module46.$not$rtl.v:435$370_Y.
Removed top 13 bits (of 14) from wire module46.$reduce_or$rtl.v:400$324_Y.
Removed top 17 bits (of 18) from wire module46.$reduce_xnor$rtl.v:458$385_Y.
Removed top 13 bits (of 14) from wire module46.$reduce_xor$rtl.v:418$355_Y.
Removed top 9 bits (of 12) from wire module46.$sshr$rtl.v:428$367_Y.
Removed top 20 bits (of 31) from wire module46.$ternary$rtl.v:374$264_Y.
Removed top 1 bits (of 11) from wire module46.$ternary$rtl.v:394$310_Y.
Removed top 11 bits (of 18) from wire module46.$ternary$rtl.v:395$314_Y.
Removed top 1 bits (of 2) from wire module46.$ternary$rtl.v:410$337_Y.
Removed top 8 bits (of 12) from wire module46.$ternary$rtl.v:427$363_Y.
Removed top 1 bits (of 20) from wire module46.$ternary$rtl.v:454$383_Y.
Removed top 12 bits (of 18) from wire module46.$ternary$rtl.v:458$387_Y.
Removed top 7 bits (of 12) from wire module46.$xor$rtl.v:388$294_Y.
Removed top 7 bits (of 14) from wire module46.wire56.
Removed top 7 bits (of 12) from wire module46.wire57.
Removed top 21 bits (of 22) from wire module46.wire59.
Removed top 18 bits (of 19) from wire module46.wire62.
Removed top 6 bits (of 14) from wire module46.wire63.
Removed top 10 bits (of 11) from wire module46.wire65.
Removed top 7 bits (of 8) from wire module46.wire68.
Removed top 12 bits (of 13) from wire module46.wire69.
Removed top 12 bits (of 20) from port A of cell module9.$not$rtl.v:249$185 ($not).
Removed top 10 bits (of 11) from port A of cell module9.$mul$rtl.v:251$192 ($mul).
Removed top 10 bits (of 11) from port B of cell module9.$mul$rtl.v:251$192 ($mul).
Removed top 9 bits (of 11) from port Y of cell module9.$mul$rtl.v:251$192 ($mul).
Removed top 15 bits (of 20) from mux cell module9.$ternary$rtl.v:252$196 ($mux).
Removed top 10 bits (of 11) from port A of cell module9.$or$rtl.v:257$205 ($or).
Removed top 3 bits (of 11) from port Y of cell module9.$or$rtl.v:257$205 ($or).
Removed top 3 bits (of 11) from port B of cell module9.$or$rtl.v:257$205 ($or).
Removed top 18 bits (of 19) from port A of cell module9.$neg$rtl.v:256$200 ($neg).
Removed top 10 bits (of 11) from port B of cell module9.$or$rtl.v:257$204 ($or).
Removed top 3 bits (of 11) from port Y of cell module9.$or$rtl.v:257$204 ($or).
Removed top 3 bits (of 11) from port A of cell module9.$or$rtl.v:257$204 ($or).
Removed top 17 bits (of 18) from port A of cell module9.$lt$rtl.v:271$211 ($lt).
Removed top 16 bits (of 17) from mux cell module9.$ternary$rtl.v:272$213 ($mux).
Removed top 10 bits (of 17) from mux cell module9.$ternary$rtl.v:272$215 ($mux).
Removed top 16 bits (of 17) from port A of cell module9.$xnor$rtl.v:276$222 ($xnor).
Removed top 16 bits (of 17) from port B of cell module9.$xnor$rtl.v:276$222 ($xnor).
Removed top 1 bits (of 5) from port Y of cell module9.$not$rtl.v:277$224 ($not).
Removed top 1 bits (of 5) from port A of cell module9.$not$rtl.v:277$224 ($not).
Removed top 4 bits (of 11) from FF cell module9.$procdff$497 ($dff).
Removed top 4 bits (of 11) from wire module9.$0\reg30[10:0].
Removed top 10 bits (of 11) from wire module9.$logic_not$rtl.v:257$203_Y.
Removed top 16 bits (of 17) from wire module9.$logic_not$rtl.v:276$221_Y.
Removed top 9 bits (of 11) from wire module9.$mul$rtl.v:251$192_Y.
Removed top 3 bits (of 11) from wire module9.$or$rtl.v:257$204_Y.
Removed top 10 bits (of 11) from wire module9.$reduce_and$rtl.v:251$191_Y.
Removed top 10 bits (of 11) from wire module9.$reduce_and$rtl.v:257$201_Y.
Removed top 10 bits (of 11) from wire module9.$reduce_or$rtl.v:251$190_Y.
Removed top 16 bits (of 17) from wire module9.$reduce_xor$rtl.v:276$219_Y.
Removed top 16 bits (of 17) from wire module9.$ternary$rtl.v:272$213_Y.
Removed top 8 bits (of 10) from wire module9.wire15.
Removed top 9 bits (of 10) from wire module9.wire17.
Removed top 15 bits (of 16) from wire module9.wire27.
Removed top 20 bits (of 21) from wire module9.wire35.
Removed top 14 bits (of 15) from port B of cell top.$ge$rtl.v:28$2 ($ge).
Removed top 19 bits (of 22) from mux cell top.$ternary$rtl.v:36$9 ($mux).
Removed top 16 bits (of 22) from port A of cell top.$add$rtl.v:34$6 ($add).
Removed top 21 bits (of 22) from port B of cell top.$add$rtl.v:34$6 ($add).
Removed top 15 bits (of 22) from port Y of cell top.$add$rtl.v:34$6 ($add).
Removed top 2 bits (of 5) from port Y of cell top.$sshl$rtl.v:36$7 ($sshl).
Removed top 15 bits (of 22) from wire top.$add$rtl.v:34$6_Y.
Removed top 21 bits (of 22) from wire top.$ne$rtl.v:34$5_Y.
Removed top 10 bits (of 11) from wire top.wire5.
Removed top 21 bits (of 22) from wire top.wire6.
Removed top 16 bits (of 22) from wire top.wire8.

2.8. Executing PEEPOPT pass (run peephole optimizers).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 91 unused wires.
<suppressed ~4 debug messages>

2.10. Executing TECHMAP pass (map to technology primitives).

2.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~400 debug messages>

2.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module module40:
  creating $macc model for $add$rtl.v:133$52 ($add).
  creating $macc model for $neg$rtl.v:158$94 ($neg).
  creating $macc model for $sub$rtl.v:123$42 ($sub).
  creating $macc model for $sub$rtl.v:158$95 ($sub).
  merging $macc model for $neg$rtl.v:158$94 into $sub$rtl.v:158$95.
  creating $alu model for $macc $sub$rtl.v:123$42.
  creating $alu model for $macc $sub$rtl.v:158$95.
  creating $alu model for $macc $add$rtl.v:133$52.
  creating $alu model for $ge$rtl.v:111$34 ($ge): new $alu
  creating $alu model for $gt$rtl.v:102$20 ($gt): new $alu
  creating $alu model for $gt$rtl.v:176$139 ($gt): new $alu
  creating $alu model for $le$rtl.v:153$81 ($le): new $alu
  creating $alu model for $le$rtl.v:160$100 ($le): new $alu
  creating $alu model for $le$rtl.v:99$15 ($le): new $alu
  creating $alu model for $lt$rtl.v:140$63 ($lt): new $alu
  creating $alu cell for $lt$rtl.v:140$63: $auto$alumacc.cc:474:replace_alu$602
  creating $alu cell for $le$rtl.v:99$15: $auto$alumacc.cc:474:replace_alu$609
  creating $alu cell for $le$rtl.v:160$100: $auto$alumacc.cc:474:replace_alu$620
  creating $alu cell for $le$rtl.v:153$81: $auto$alumacc.cc:474:replace_alu$629
  creating $alu cell for $gt$rtl.v:176$139: $auto$alumacc.cc:474:replace_alu$638
  creating $alu cell for $gt$rtl.v:102$20: $auto$alumacc.cc:474:replace_alu$643
  creating $alu cell for $ge$rtl.v:111$34: $auto$alumacc.cc:474:replace_alu$656
  creating $alu cell for $add$rtl.v:133$52: $auto$alumacc.cc:474:replace_alu$669
  creating $alu cell for $sub$rtl.v:158$95: $auto$alumacc.cc:474:replace_alu$672
  creating $alu cell for $sub$rtl.v:123$42: $auto$alumacc.cc:474:replace_alu$675
  created 10 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module module46:
  creating $macc model for $add$rtl.v:374$265 ($add).
  creating $macc model for $add$rtl.v:382$283 ($add).
  creating $macc model for $add$rtl.v:388$297 ($add).
  creating $macc model for $add$rtl.v:415$348 ($add).
  creating $macc model for $neg$rtl.v:412$341 ($neg).
  creating $macc model for $neg$rtl.v:417$350 ($neg).
  creating $macc model for $neg$rtl.v:432$368 ($neg).
  creating $macc model for $sub$rtl.v:453$379 ($sub).
  creating $alu model for $macc $sub$rtl.v:453$379.
  creating $alu model for $macc $neg$rtl.v:432$368.
  creating $alu model for $macc $neg$rtl.v:417$350.
  creating $alu model for $macc $neg$rtl.v:412$341.
  creating $alu model for $macc $add$rtl.v:415$348.
  creating $alu model for $macc $add$rtl.v:388$297.
  creating $alu model for $macc $add$rtl.v:382$283.
  creating $alu model for $macc $add$rtl.v:374$265.
  creating $alu model for $ge$rtl.v:454$384 ($ge): new $alu
  creating $alu model for $gt$rtl.v:374$266 ($gt): new $alu
  creating $alu model for $gt$rtl.v:388$296 ($gt): new $alu
  creating $alu model for $gt$rtl.v:393$308 ($gt): new $alu
  creating $alu model for $gt$rtl.v:435$372 ($gt): new $alu
  creating $alu model for $le$rtl.v:393$305 ($le): new $alu
  creating $alu model for $le$rtl.v:410$335 ($le): new $alu
  creating $alu model for $lt$rtl.v:378$267 ($lt): new $alu
  creating $alu model for $lt$rtl.v:381$275 ($lt): new $alu
  creating $alu cell for $lt$rtl.v:381$275: $auto$alumacc.cc:474:replace_alu$687
  creating $alu cell for $lt$rtl.v:378$267: $auto$alumacc.cc:474:replace_alu$698
  creating $alu cell for $le$rtl.v:410$335: $auto$alumacc.cc:474:replace_alu$711
  creating $alu cell for $le$rtl.v:393$305: $auto$alumacc.cc:474:replace_alu$724
  creating $alu cell for $gt$rtl.v:435$372: $auto$alumacc.cc:474:replace_alu$737
  creating $alu cell for $gt$rtl.v:393$308: $auto$alumacc.cc:474:replace_alu$748
  creating $alu cell for $gt$rtl.v:388$296: $auto$alumacc.cc:474:replace_alu$759
  creating $alu cell for $gt$rtl.v:374$266: $auto$alumacc.cc:474:replace_alu$764
  creating $alu cell for $ge$rtl.v:454$384: $auto$alumacc.cc:474:replace_alu$769
  creating $alu cell for $add$rtl.v:374$265: $auto$alumacc.cc:474:replace_alu$782
  creating $alu cell for $add$rtl.v:382$283: $auto$alumacc.cc:474:replace_alu$785
  creating $alu cell for $add$rtl.v:388$297: $auto$alumacc.cc:474:replace_alu$788
  creating $alu cell for $add$rtl.v:415$348: $auto$alumacc.cc:474:replace_alu$791
  creating $alu cell for $neg$rtl.v:412$341: $auto$alumacc.cc:474:replace_alu$794
  creating $alu cell for $neg$rtl.v:417$350: $auto$alumacc.cc:474:replace_alu$797
  creating $alu cell for $neg$rtl.v:432$368: $auto$alumacc.cc:474:replace_alu$800
  creating $alu cell for $sub$rtl.v:453$379: $auto$alumacc.cc:474:replace_alu$803
  created 17 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module module9:
  creating $macc model for $mul$rtl.v:251$192 ($mul).
  creating $macc model for $neg$rtl.v:256$200 ($neg).
  creating $macc cell for $neg$rtl.v:256$200: $auto$alumacc.cc:354:replace_macc$806
  creating $macc cell for $mul$rtl.v:251$192: $auto$alumacc.cc:354:replace_macc$807
  creating $alu model for $lt$rtl.v:249$186 ($lt): new $alu
  creating $alu model for $lt$rtl.v:271$211 ($lt): new $alu
  creating $alu cell for $lt$rtl.v:271$211: $auto$alumacc.cc:474:replace_alu$810
  creating $alu cell for $lt$rtl.v:249$186: $auto$alumacc.cc:474:replace_alu$815
  created 2 $alu and 2 $macc cells.
Extracting $alu and $macc cells in module top:
  creating $macc model for $add$rtl.v:34$6 ($add).
  creating $alu model for $macc $add$rtl.v:34$6.
  creating $alu model for $ge$rtl.v:28$2 ($ge): new $alu
  creating $alu cell for $ge$rtl.v:28$2: $auto$alumacc.cc:474:replace_alu$821
  creating $alu cell for $add$rtl.v:34$6: $auto$alumacc.cc:474:replace_alu$830
  created 2 $alu and 0 $macc cells.

2.12. Executing SHARE pass (SAT-based resource sharing).
Found 2 cells in module module40 that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$rtl.v:157$85 ($sshr):
    Found 1 activation_patterns using ctrl signal { $procmux$470_CMP $reduce_bool$rtl.v:158$92_Y }.
    No candidates found.
  Analyzing resource sharing options for $sshl$rtl.v:168$110 ($sshl):
    Found 1 activation_patterns using ctrl signal $reduce_bool$rtl.v:170$121_Y.
    No candidates found.
Found 2 cells in module module46 that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$rtl.v:371$256 ($sshr):
    Found 1 activation_patterns using ctrl signal $reduce_xnor$rtl.v:370$255_Y.
    No candidates found.
  Analyzing resource sharing options for $sshl$rtl.v:394$309 ($sshl):
    Found 1 activation_patterns using ctrl signal { $reduce_bool$rtl.v:395$315_Y $auto$rtlil.cc:1832:Not$758 }.
    No candidates found.

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module40.
Optimizing module module46.
<suppressed ~10 debug messages>
Optimizing module module9.
<suppressed ~2 debug messages>
Optimizing module top.
<suppressed ~1 debug messages>

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module40'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module9'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module40..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~52 debug messages>

2.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module40.
    New input vector for $reduce_or cell $reduce_or$rtl.v:172$126: { $ternary$rtl.v:172$125_Y [0] $ternary$rtl.v:172$125_Y [1] $ternary$rtl.v:172$125_Y [2] $ternary$rtl.v:172$125_Y [3] $ternary$rtl.v:172$125_Y [4] $ternary$rtl.v:172$125_Y [5] $ternary$rtl.v:172$125_Y [6] $ternary$rtl.v:172$125_Y [7] $ternary$rtl.v:172$125_Y [8] $ternary$rtl.v:172$125_Y [9] }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$627: { $auto$rtlil.cc:1832:Not$624 $auto$rtlil.cc:1835:ReduceAnd$626 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$616: { $auto$alumacc.cc:490:replace_alu$610 [0] $auto$alumacc.cc:490:replace_alu$610 [1] $auto$alumacc.cc:490:replace_alu$610 [2] $auto$alumacc.cc:490:replace_alu$610 [3] $auto$alumacc.cc:490:replace_alu$610 [4] $auto$alumacc.cc:490:replace_alu$610 [5] $auto$alumacc.cc:490:replace_alu$610 [6] $auto$alumacc.cc:490:replace_alu$610 [7] $auto$alumacc.cc:490:replace_alu$610 [8] $auto$alumacc.cc:490:replace_alu$610 [9] $auto$alumacc.cc:490:replace_alu$610 [10] $auto$alumacc.cc:490:replace_alu$610 [11] $auto$alumacc.cc:490:replace_alu$610 [12] $auto$alumacc.cc:490:replace_alu$610 [13] $auto$alumacc.cc:490:replace_alu$610 [14] $auto$alumacc.cc:490:replace_alu$610 [15] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$625: { $auto$alumacc.cc:490:replace_alu$621 [0] $auto$alumacc.cc:490:replace_alu$621 [1] $auto$alumacc.cc:490:replace_alu$621 [2] $auto$alumacc.cc:490:replace_alu$621 [3] $auto$alumacc.cc:490:replace_alu$621 [4] $auto$alumacc.cc:490:replace_alu$621 [5] $auto$alumacc.cc:490:replace_alu$621 [6] $auto$alumacc.cc:490:replace_alu$621 [7] $auto$alumacc.cc:490:replace_alu$621 [8] $auto$alumacc.cc:490:replace_alu$621 [9] $auto$alumacc.cc:490:replace_alu$621 [10] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$634: { $auto$alumacc.cc:490:replace_alu$630 [0] $auto$alumacc.cc:490:replace_alu$630 [1] $auto$alumacc.cc:490:replace_alu$630 [2] $auto$alumacc.cc:490:replace_alu$630 [3] $auto$alumacc.cc:490:replace_alu$630 [4] $auto$alumacc.cc:490:replace_alu$630 [5] $auto$alumacc.cc:490:replace_alu$630 [6] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$646: { $auto$alumacc.cc:490:replace_alu$644 [0] $auto$alumacc.cc:490:replace_alu$644 [1] $auto$alumacc.cc:490:replace_alu$644 [2] $auto$alumacc.cc:490:replace_alu$644 [3] $auto$alumacc.cc:490:replace_alu$644 [4] $auto$alumacc.cc:490:replace_alu$644 [5] $auto$alumacc.cc:490:replace_alu$644 [6] $auto$alumacc.cc:490:replace_alu$644 [7] $auto$alumacc.cc:490:replace_alu$644 [8] $auto$alumacc.cc:490:replace_alu$644 [9] $auto$alumacc.cc:490:replace_alu$644 [10] $auto$alumacc.cc:490:replace_alu$644 [11] $auto$alumacc.cc:490:replace_alu$644 [12] $auto$alumacc.cc:490:replace_alu$644 [13] $auto$alumacc.cc:490:replace_alu$644 [14] $auto$alumacc.cc:490:replace_alu$644 [15] $auto$alumacc.cc:490:replace_alu$644 [16] $auto$alumacc.cc:490:replace_alu$644 [17] $auto$alumacc.cc:490:replace_alu$644 [18] $auto$alumacc.cc:490:replace_alu$644 [19] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$659: { $auto$alumacc.cc:490:replace_alu$657 [0] $auto$alumacc.cc:490:replace_alu$657 [1] $auto$alumacc.cc:490:replace_alu$657 [2] $auto$alumacc.cc:490:replace_alu$657 [3] $auto$alumacc.cc:490:replace_alu$657 [4] $auto$alumacc.cc:490:replace_alu$657 [5] $auto$alumacc.cc:490:replace_alu$657 [6] $auto$alumacc.cc:490:replace_alu$657 [7] }
  Optimizing cells in module \module40.
  Optimizing cells in module \module46.
    New input vector for $reduce_or cell $reduce_or$rtl.v:388$298: { $add$rtl.v:388$297_Y [0] $add$rtl.v:388$297_Y [1] $add$rtl.v:388$297_Y [2] $add$rtl.v:388$297_Y [3] $add$rtl.v:388$297_Y [4] $add$rtl.v:388$297_Y [5] $add$rtl.v:388$297_Y [11] }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$722: { $auto$rtlil.cc:1832:Not$721 $auto$alumacc.cc:490:replace_alu$712 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$735: { $auto$rtlil.cc:1832:Not$734 $auto$rtlil.cc:1835:ReduceAnd$728 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$780: { $auto$rtlil.cc:1832:Not$779 $auto$rtlil.cc:1835:ReduceAnd$773 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$772: { $auto$alumacc.cc:490:replace_alu$770 [0] $auto$alumacc.cc:490:replace_alu$770 [1] $auto$alumacc.cc:490:replace_alu$770 [2] $auto$alumacc.cc:490:replace_alu$770 [3] $auto$alumacc.cc:490:replace_alu$770 [4] $auto$alumacc.cc:490:replace_alu$770 [5] $auto$alumacc.cc:490:replace_alu$770 [6] $auto$alumacc.cc:490:replace_alu$770 [7] $auto$alumacc.cc:490:replace_alu$770 [8] $auto$alumacc.cc:490:replace_alu$770 [9] $auto$alumacc.cc:490:replace_alu$770 [10] $auto$alumacc.cc:490:replace_alu$770 [11] $auto$alumacc.cc:490:replace_alu$770 [12] $auto$alumacc.cc:490:replace_alu$770 [13] $auto$alumacc.cc:490:replace_alu$770 [14] $auto$alumacc.cc:490:replace_alu$770 [15] $auto$alumacc.cc:490:replace_alu$770 [16] $auto$alumacc.cc:490:replace_alu$770 [17] $auto$alumacc.cc:490:replace_alu$770 [18] $auto$alumacc.cc:490:replace_alu$770 [19] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$690: { $auto$alumacc.cc:490:replace_alu$688 [0] $auto$alumacc.cc:490:replace_alu$688 [1] $auto$alumacc.cc:490:replace_alu$688 [2] $auto$alumacc.cc:490:replace_alu$688 [3] $auto$alumacc.cc:490:replace_alu$688 [4] $auto$alumacc.cc:490:replace_alu$688 [5] $auto$alumacc.cc:490:replace_alu$688 [6] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$701: { $auto$alumacc.cc:490:replace_alu$699 [0] $auto$alumacc.cc:490:replace_alu$699 [1] $auto$alumacc.cc:490:replace_alu$699 [2] $auto$alumacc.cc:490:replace_alu$699 [3] $auto$alumacc.cc:490:replace_alu$699 [4] $auto$alumacc.cc:490:replace_alu$699 [5] $auto$alumacc.cc:490:replace_alu$699 [6] $auto$alumacc.cc:490:replace_alu$699 [7] $auto$alumacc.cc:490:replace_alu$699 [8] $auto$alumacc.cc:490:replace_alu$699 [9] $auto$alumacc.cc:490:replace_alu$699 [10] $auto$alumacc.cc:490:replace_alu$699 [11] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$727: { $auto$alumacc.cc:490:replace_alu$725 [0] $auto$alumacc.cc:490:replace_alu$725 [1] $auto$alumacc.cc:490:replace_alu$725 [2] $auto$alumacc.cc:490:replace_alu$725 [3] $auto$alumacc.cc:490:replace_alu$725 [4] $auto$alumacc.cc:490:replace_alu$725 [5] $auto$alumacc.cc:490:replace_alu$725 [6] $auto$alumacc.cc:490:replace_alu$725 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$740: { $auto$alumacc.cc:490:replace_alu$738 [0] $auto$alumacc.cc:490:replace_alu$738 [1] $auto$alumacc.cc:490:replace_alu$738 [2] $auto$alumacc.cc:490:replace_alu$738 [3] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$751: { $auto$alumacc.cc:490:replace_alu$749 [0] $auto$alumacc.cc:490:replace_alu$749 [1] $auto$alumacc.cc:490:replace_alu$749 [2] $auto$alumacc.cc:490:replace_alu$749 [3] $auto$alumacc.cc:490:replace_alu$749 [4] $auto$alumacc.cc:490:replace_alu$749 [5] $auto$alumacc.cc:490:replace_alu$749 [6] $auto$alumacc.cc:490:replace_alu$749 [7] }
  Optimizing cells in module \module46.
  Optimizing cells in module \module9.
  Optimizing cells in module \top.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$828: { $auto$rtlil.cc:1832:Not$825 $auto$rtlil.cc:1835:ReduceAnd$827 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$826: { $auto$alumacc.cc:490:replace_alu$822 [0] $auto$alumacc.cc:490:replace_alu$822 [1] $auto$alumacc.cc:490:replace_alu$822 [2] $auto$alumacc.cc:490:replace_alu$822 [3] $auto$alumacc.cc:490:replace_alu$822 [4] $auto$alumacc.cc:490:replace_alu$822 [5] $auto$alumacc.cc:490:replace_alu$822 [6] $auto$alumacc.cc:490:replace_alu$822 [7] $auto$alumacc.cc:490:replace_alu$822 [8] $auto$alumacc.cc:490:replace_alu$822 [9] $auto$alumacc.cc:490:replace_alu$822 [10] $auto$alumacc.cc:490:replace_alu$822 [11] $auto$alumacc.cc:490:replace_alu$822 [12] $auto$alumacc.cc:490:replace_alu$822 [13] $auto$alumacc.cc:490:replace_alu$822 [14] }
  Optimizing cells in module \top.
Performed a total of 19 changes.

2.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module40'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module9'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$487 ($dff) from module module46.
Promoting init spec \reg79 [17:6] = 12'xxxxxxxxxxxx to constant driver in module module46.
Promoted 1 init specs to constant drivers.
Replaced 1 DFF cells.

2.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..
Removed 7 unused cells and 31 unused wires.
<suppressed ~11 debug messages>

2.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module40.
Optimizing module module46.
Optimizing module module9.
Optimizing module top.

2.13.9. Rerunning OPT passes. (Maybe there is more to do..)

2.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module40..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~51 debug messages>

2.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module40.
  Optimizing cells in module \module46.
  Optimizing cells in module \module9.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module40'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module9'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..

2.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module40.
Optimizing module module46.
Optimizing module module9.
Optimizing module top.

2.13.16. Finished OPT passes. (There is nothing left to do.)

2.14. Executing FSM pass (extract and optimize FSM).

2.14.1. Executing FSM_DETECT pass (finding FSMs in design).

2.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..

2.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module40.
Optimizing module module46.
Optimizing module module9.
Optimizing module top.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module40'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module9'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..

2.15.5. Finished fast OPT passes.

2.16. Executing MEMORY pass.

2.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..

2.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..

2.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module40.
<suppressed ~78 debug messages>
Optimizing module module46.
<suppressed ~61 debug messages>
Optimizing module module9.
<suppressed ~25 debug messages>
Optimizing module top.
<suppressed ~1 debug messages>

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module40'.
Finding identical cells in module `\module46'.
<suppressed ~3 debug messages>
Finding identical cells in module `\module9'.
Finding identical cells in module `\top'.
Removed a total of 1 cells.

2.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 46 unused wires.
<suppressed ~6 debug messages>

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module40.
<suppressed ~1 debug messages>
Optimizing module module46.
Optimizing module module9.
Optimizing module top.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module40'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module9'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module40..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~50 debug messages>

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module40.
    Consolidated identical input bits for $mux cell $procmux$454:
      Old ports: A={ 17'00000000000000000 $auto$wreduce.cc:455:run$531 [3:0] }, B={ 20'00000000000000000000 $auto$wreduce.cc:455:run$522 [0] }, Y=$0\reg91[20:0]
      New ports: A=$auto$wreduce.cc:455:run$531 [3:0], B={ 3'000 $auto$wreduce.cc:455:run$522 [0] }, Y=$0\reg91[20:0] [3:0]
      New connections: $0\reg91[20:0] [20:4] = 17'00000000000000000
    Consolidated identical input bits for $mux cell $procmux$472:
      Old ports: A={ 7'0000000 $auto$wreduce.cc:455:run$535 [0] }, B=8'10111011, Y=$0\reg95[7:0]
      New ports: A={ 1'0 $auto$wreduce.cc:455:run$535 [0] }, B=2'11, Y=$0\reg95[7:0] [1:0]
      New connections: $0\reg95[7:0] [7:2] = { $0\reg95[7:0] [1] 1'0 $0\reg95[7:0] [1] $0\reg95[7:0] [1] $0\reg95[7:0] [1] 1'0 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:153$83:
      Old ports: A={ 7'0000000 $auto$rtlil.cc:1836:ReduceOr$637 }, B=8'10011110, Y=$auto$wreduce.cc:455:run$540 [7:0]
      New ports: A={ 1'0 $auto$rtlil.cc:1836:ReduceOr$637 }, B=2'10, Y=$auto$wreduce.cc:455:run$540 [1:0]
      New connections: $auto$wreduce.cc:455:run$540 [7:2] = { $auto$wreduce.cc:455:run$540 [1] 2'00 $auto$wreduce.cc:455:run$540 [1] $auto$wreduce.cc:455:run$540 [1] $auto$wreduce.cc:455:run$540 [1] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:161$99:
      Old ports: A={ 7'0000000 \reg93 }, B={ \reg96 8'10110111 }, Y=$ternary$rtl.v:161$99_Y
      New ports: A={ 6'000000 \reg93 }, B={ \reg96 7'1110111 }, Y={ $ternary$rtl.v:161$99_Y [12:7] $ternary$rtl.v:161$99_Y [5:0] }
      New connections: $ternary$rtl.v:161$99_Y [6] = 1'0
    Consolidated identical input bits for $mux cell $ternary$rtl.v:170$120:
      Old ports: A={ 6'000000 $reduce_xnor$rtl.v:170$118_Y }, B=7'1000011, Y=$ternary$rtl.v:170$120_Y [6:0]
      New ports: A={ 1'0 $reduce_xnor$rtl.v:170$118_Y }, B=2'11, Y=$ternary$rtl.v:170$120_Y [1:0]
      New connections: $ternary$rtl.v:170$120_Y [6:2] = { $ternary$rtl.v:170$120_Y [1] 4'0000 }
  Optimizing cells in module \module40.
    Consolidated identical input bits for $mux cell $procmux$469:
      Old ports: A=$auto$wreduce.cc:455:run$540 [7:0], B=8'10110010, Y=$0\reg94[20:0]
      New ports: A={ 1'0 $auto$wreduce.cc:455:run$540 [1] $auto$wreduce.cc:455:run$540 [1:0] }, B=4'1010, Y={ $0\reg94[20:0] [5] $0\reg94[20:0] [2:0] }
      New connections: { $0\reg94[20:0] [7:6] $0\reg94[20:0] [4:3] } = { $0\reg94[20:0] [1] 1'0 $0\reg94[20:0] [1] $0\reg94[20:0] [2] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:170$122:
      Old ports: A=$ternary$rtl.v:170$120_Y [6:0], B={ 6'000000 $auto$wreduce.cc:455:run$521 [0] }, Y=$0\reg99[20:0]
      New ports: A=$ternary$rtl.v:170$120_Y [1:0], B={ 1'0 $auto$wreduce.cc:455:run$521 [0] }, Y=$0\reg99[20:0] [1:0]
      New connections: $0\reg99[20:0] [6:2] = { $0\reg99[20:0] [1] 4'0000 }
  Optimizing cells in module \module40.
  Optimizing cells in module \module46.
    Consolidated identical input bits for $mux cell $procmux$427:
      Old ports: A=9'110111011, B={ 8'00000000 \reg52 [0] }, Y=$procmux$427_Y
      New ports: A=2'11, B={ 1'0 \reg52 [0] }, Y=$procmux$427_Y [1:0]
      New connections: $procmux$427_Y [8:2] = { $procmux$427_Y [1] $procmux$427_Y [1] 1'0 $procmux$427_Y [1] $procmux$427_Y [1] $procmux$427_Y [1] 1'0 }
    Consolidated identical input bits for $mux cell $procmux$433:
      Old ports: A={ \wire47 [5] \wire47 [5] \wire47 [5] \wire47 [5] \wire47 [5] \wire47 [5] \wire47 [5] \wire47 [5] \wire47 [5] \wire47 [5] \wire47 [5] \wire47 [5] \wire47 [5] \wire47 [5] \wire47 }, B={ \wire49 [10] \wire49 [10] \wire49 [10] \wire49 [10] \wire49 [10] \wire49 [10] \wire49 [10] \wire49 [10] \wire49 [10] \wire49 }, Y=$procmux$433_Y
      New ports: A={ \wire47 [5] \wire47 [5] \wire47 [5] \wire47 [5] \wire47 [5] \wire47 }, B=\wire49, Y=$procmux$433_Y [10:0]
      New connections: $procmux$433_Y [19:11] = { $procmux$433_Y [10] $procmux$433_Y [10] $procmux$433_Y [10] $procmux$433_Y [10] $procmux$433_Y [10] $procmux$433_Y [10] $procmux$433_Y [10] $procmux$433_Y [10] $procmux$433_Y [10] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:382$281:
      Old ports: A={ 11'00000000000 \wire47 }, B={ 13'1111111111111 \wire54 [3:0] }, Y=$ternary$rtl.v:382$281_Y
      New ports: A={ 1'0 \wire47 }, B={ 3'111 \wire54 [3:0] }, Y=$ternary$rtl.v:382$281_Y [6:0]
      New connections: $ternary$rtl.v:382$281_Y [16:7] = { $ternary$rtl.v:382$281_Y [6] $ternary$rtl.v:382$281_Y [6] $ternary$rtl.v:382$281_Y [6] $ternary$rtl.v:382$281_Y [6] $ternary$rtl.v:382$281_Y [6] $ternary$rtl.v:382$281_Y [6] $ternary$rtl.v:382$281_Y [6] $ternary$rtl.v:382$281_Y [6] $ternary$rtl.v:382$281_Y [6] $ternary$rtl.v:382$281_Y [6] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:383$285:
      Old ports: A={ \reg52 [0] \reg52 [0] \reg52 [0] \reg52 [0] \reg52 [0] \reg52 [0] \reg52 [0] }, B={ 5'00000 \wire47 [5:4] }, Y=\wire56
      New ports: A={ \reg52 [0] \reg52 [0] \reg52 [0] }, B={ 1'0 \wire47 [5:4] }, Y=\wire56 [2:0]
      New connections: \wire56 [6:3] = { \wire56 [2] \wire56 [2] \wire56 [2] \wire56 [2] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:385$289:
      Old ports: A={ 6'000000 $auto$wreduce.cc:455:run$553 [0] }, B={ \reg52 [0] \reg52 [0] \reg52 [0] \reg52 [0] \reg52 [0] \reg52 [0] \reg52 [0] }, Y=$ternary$rtl.v:385$289_Y
      New ports: A={ 1'0 $auto$wreduce.cc:455:run$553 [0] }, B={ \reg52 [0] \reg52 [0] }, Y=$ternary$rtl.v:385$289_Y [1:0]
      New connections: $ternary$rtl.v:385$289_Y [6:2] = { $ternary$rtl.v:385$289_Y [1] $ternary$rtl.v:385$289_Y [1] $ternary$rtl.v:385$289_Y [1] $ternary$rtl.v:385$289_Y [1] $ternary$rtl.v:385$289_Y [1] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:392$304:
      Old ports: A={ \wire48 [10] \wire48 [10] \wire48 [10] \wire48 [10] \wire48 [10] \wire48 }, B={ 5'00000 \wire49 }, Y=$ternary$rtl.v:392$304_Y
      New ports: A={ \wire48 [10] \wire48 }, B={ 1'0 \wire49 }, Y=$ternary$rtl.v:392$304_Y [11:0]
      New connections: $ternary$rtl.v:392$304_Y [15:12] = { $ternary$rtl.v:392$304_Y [11] $ternary$rtl.v:392$304_Y [11] $ternary$rtl.v:392$304_Y [11] $ternary$rtl.v:392$304_Y [11] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:393$307:
      Old ports: A={ 13'1111111111111 \wire54 [3:0] $auto$rtlil.cc:1836:ReduceOr$736 }, B={ 2'00 $ternary$rtl.v:392$304_Y }, Y=$ternary$rtl.v:393$307_Y
      New ports: A={ 12'111111111111 \wire54 [3:0] $auto$rtlil.cc:1836:ReduceOr$736 }, B={ 1'0 $ternary$rtl.v:392$304_Y }, Y=$ternary$rtl.v:393$307_Y [16:0]
      New connections: $ternary$rtl.v:393$307_Y [17] = $ternary$rtl.v:393$307_Y [16]
    Consolidated identical input bits for $mux cell $ternary$rtl.v:395$314:
      Old ports: A={ 6'000000 $and$rtl.v:395$311_Y [0] }, B=7'1000011, Y=$auto$wreduce.cc:455:run$562 [6:0]
      New ports: A={ 1'0 $and$rtl.v:395$311_Y [0] }, B=2'11, Y=$auto$wreduce.cc:455:run$562 [1:0]
      New connections: $auto$wreduce.cc:455:run$562 [6:2] = { $auto$wreduce.cc:455:run$562 [1] 4'0000 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:400$327:
      Old ports: A={ 7'0000000 $auto$wreduce.cc:455:run$556 [0] }, B=8'10111001, Y=\wire63
      New ports: A={ 1'0 $auto$wreduce.cc:455:run$556 [0] }, B=2'11, Y={ \wire63 [3] \wire63 [0] }
      New connections: { \wire63 [7:4] \wire63 [2:1] } = { \wire63 [3] 1'0 \wire63 [3] \wire63 [3] 2'00 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:428$366:
      Old ports: A={ 34'0000000000000000000000000000000000 \wire61 }, B={ $auto$opt_expr.cc:189:group_cell_inputs$891 [19:0] $auto$opt_expr.cc:189:group_cell_inputs$891 [25] $auto$opt_expr.cc:189:group_cell_inputs$891 [25] $auto$opt_expr.cc:189:group_cell_inputs$891 [25] $auto$opt_expr.cc:189:group_cell_inputs$891 [25] $auto$opt_expr.cc:189:group_cell_inputs$891 [25] $auto$opt_expr.cc:189:group_cell_inputs$891 [25] $auto$opt_expr.cc:189:group_cell_inputs$891 [25] $auto$opt_expr.cc:189:group_cell_inputs$891 [25] $auto$opt_expr.cc:189:group_cell_inputs$891 [25] $auto$opt_expr.cc:189:group_cell_inputs$891 [25] $auto$opt_expr.cc:189:group_cell_inputs$891 [25] $auto$opt_expr.cc:189:group_cell_inputs$891 [25] $auto$opt_expr.cc:189:group_cell_inputs$891 [25:20] }, Y=$ternary$rtl.v:428$366_Y
      New ports: A={ 22'0000000000000000000000 \wire61 }, B={ $auto$opt_expr.cc:189:group_cell_inputs$891 [19:0] $auto$opt_expr.cc:189:group_cell_inputs$891 [25:20] }, Y={ $ternary$rtl.v:428$366_Y [37:18] $ternary$rtl.v:428$366_Y [5:0] }
      New connections: $ternary$rtl.v:428$366_Y [17:6] = { $ternary$rtl.v:428$366_Y [5] $ternary$rtl.v:428$366_Y [5] $ternary$rtl.v:428$366_Y [5] $ternary$rtl.v:428$366_Y [5] $ternary$rtl.v:428$366_Y [5] $ternary$rtl.v:428$366_Y [5] $ternary$rtl.v:428$366_Y [5] $ternary$rtl.v:428$366_Y [5] $ternary$rtl.v:428$366_Y [5] $ternary$rtl.v:428$366_Y [5] $ternary$rtl.v:428$366_Y [5] $ternary$rtl.v:428$366_Y [5] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:453$381:
      Old ports: A=14'11111110011110, B={ 13'0000000000000 \reg70 [0] }, Y=$ternary$rtl.v:453$381_Y
      New ports: A=2'10, B={ 1'0 \reg70 [0] }, Y=$ternary$rtl.v:453$381_Y [1:0]
      New connections: $ternary$rtl.v:453$381_Y [13:2] = { $ternary$rtl.v:453$381_Y [1] $ternary$rtl.v:453$381_Y [1] $ternary$rtl.v:453$381_Y [1] $ternary$rtl.v:453$381_Y [1] $ternary$rtl.v:453$381_Y [1] $ternary$rtl.v:453$381_Y [1] $ternary$rtl.v:453$381_Y [1] 2'00 $ternary$rtl.v:453$381_Y [1] $ternary$rtl.v:453$381_Y [1] $ternary$rtl.v:453$381_Y [1] }
  Optimizing cells in module \module46.
    New input vector for $reduce_or cell $reduce_or$rtl.v:400$324: { \wire56 [0] \wire56 [1] \wire56 [2] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:393$307:
      Old ports: A={ 12'111111111111 \wire54 [3:0] $auto$rtlil.cc:1836:ReduceOr$736 }, B={ 1'0 $ternary$rtl.v:392$304_Y }, Y=$ternary$rtl.v:393$307_Y [16:0]
      New ports: A={ 8'11111111 \wire54 [3:0] $auto$rtlil.cc:1836:ReduceOr$736 }, B={ 1'0 $ternary$rtl.v:392$304_Y [11:0] }, Y={ $ternary$rtl.v:393$307_Y [16] $ternary$rtl.v:393$307_Y [11:0] }
      New connections: $ternary$rtl.v:393$307_Y [15:12] = { $ternary$rtl.v:393$307_Y [11] $ternary$rtl.v:393$307_Y [11] $ternary$rtl.v:393$307_Y [11] $ternary$rtl.v:393$307_Y [11] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:395$316:
      Old ports: A={ 11'00000000000 $auto$wreduce.cc:455:run$562 [6:0] }, B=$ternary$rtl.v:393$307_Y, Y=$ternary$rtl.v:395$316_Y
      New ports: A={ 10'0000000000 $auto$wreduce.cc:455:run$562 [1] 4'0000 $auto$wreduce.cc:455:run$562 [1:0] }, B=$ternary$rtl.v:393$307_Y [16:0], Y=$ternary$rtl.v:395$316_Y [16:0]
      New connections: $ternary$rtl.v:395$316_Y [17] = $ternary$rtl.v:395$316_Y [16]
  Optimizing cells in module \module46.
    Consolidated identical input bits for $mux cell $ternary$rtl.v:395$316:
      Old ports: A={ 10'0000000000 $auto$wreduce.cc:455:run$562 [1] 4'0000 $auto$wreduce.cc:455:run$562 [1:0] }, B=$ternary$rtl.v:393$307_Y [16:0], Y=$ternary$rtl.v:395$316_Y [16:0]
      New ports: A={ 6'000000 $auto$wreduce.cc:455:run$562 [1] 4'0000 $auto$wreduce.cc:455:run$562 [1:0] }, B={ $ternary$rtl.v:393$307_Y [16] $ternary$rtl.v:393$307_Y [11:0] }, Y={ $ternary$rtl.v:395$316_Y [16] $ternary$rtl.v:395$316_Y [11:0] }
      New connections: $ternary$rtl.v:395$316_Y [15:12] = { $ternary$rtl.v:395$316_Y [11] $ternary$rtl.v:395$316_Y [11] $ternary$rtl.v:395$316_Y [11] $ternary$rtl.v:395$316_Y [11] }
  Optimizing cells in module \module46.
  Optimizing cells in module \module9.
  Optimizing cells in module \top.
Performed a total of 22 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module40'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module9'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..

2.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module40.
<suppressed ~1 debug messages>
Optimizing module module46.
<suppressed ~1 debug messages>
Optimizing module module9.
Optimizing module top.

2.20.9. Rerunning OPT passes. (Maybe there is more to do..)

2.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module40..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~50 debug messages>

2.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module40.
  Optimizing cells in module \module46.
  Optimizing cells in module \module9.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module40'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module9'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..

2.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module40.
Optimizing module module46.
Optimizing module module9.
Optimizing module top.

2.20.16. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$constmap:9fe8f0418ca1d6661961c1855b0fd3cd6779e1dc$paramod$98de85a8a3f88aac1ec21e5a2f9cf114cf1c9090\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=15\Y_WIDTH=15 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=6\Y_WIDTH=7 for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=15 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=7 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xnor.
Using extmapper maccmap for cells of type $macc.
  add $auto$wreduce.cc:455:run$583 [0] * $auto$wreduce.cc:455:run$581 [0] (1x1 bits, unsigned)
  sub $logic_not$rtl.v:256$199_Y (1 bits, signed)
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=20\B_WIDTH=20\Y_WIDTH=20 for cells of type $alu.
Using template $paramod$constmap:fb7c3eb0521511607198c50d9e665a0cca823c94$paramod$c6ab472d954101999f0c1479659c98ff9876ffc5\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_xnor.
Using extmapper simplemap for cells of type $reduce_xor.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=18\Y_WIDTH=18 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=19\B_WIDTH=19\Y_WIDTH=19 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=20 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=18 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=19 for cells of type $lcu.
Using template $paramod$constmap:e48153c6912dc4474a054fa952e07b856d88df8a$paramod$d838390a810e5731bae9e922dae18ec1e256b14f\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=11\Y_WIDTH=11 for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$constmap:c0f0054dfc5cce5443e306a884d5dd4657d15d8f$paramod$80eb3a3071c4fd4f027439aa0fd741fc3da78d06\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:506ea77099f42fb51e0252f4e0d82f9b4f6d522e$paramod$652c074dac92cf2665e2d8755e83c0de8034ccb2\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod$constmap:815cc7485588a64bc62599a9bada5e51195aa96d$paramod$8c5b939012f826bf825049f8021f9bdb104c58b0\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=20\B_WIDTH=20\Y_WIDTH=20 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=11\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=7\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=2\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=14\B_WIDTH=20\Y_WIDTH=20 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=11 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=8 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=16 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32 for cells of type $lcu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=1\Y_WIDTH=1 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=2\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using template $paramod$constmap:5710f7e999fa8d7123a883b2f2b302ffff992410$paramod$904801f9dfd597ec00d6be45d3968f400b8dbeec\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=14\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=11\B_WIDTH=12\Y_WIDTH=12 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=20 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=1\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=14\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=1\B_WIDTH=6\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=2\B_WIDTH=11\Y_WIDTH=12 for cells of type $alu.
Using template $paramod$constmap:e69436a5cbf022414eb78ebb0dc9c9d1ced84872$paramod$ffeb9e347de9c44a469de679e2f70b4cbac1a68b\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:a18dbb46fc0d13e063bd2c6df0b07181679eca00$paramod$9c1efb99bd8144b496cadc233f3571d8e988d38a\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod$constmap:6d39df5ca7da62f03687df4f391f68e31eec5255$paramod$9f20810428df590ed917f258a0511475f299ec71\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod$constmap:5eae2b1667ec5f322e4dab9df4ee1b8980f2deb1$paramod$496421c62246567774141c419823a17751aebac1\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:421a4cf951d58f85395a0b41ea10507eb5a5699e$paramod$faddb5c116a1c049a67aa9e0d54bfcf081251dcc\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=12\B_WIDTH=31\Y_WIDTH=31 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=1 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=14 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=12 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=4 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=31 for cells of type $lcu.
No more expansions possible.
<suppressed ~6871 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module40.
<suppressed ~703 debug messages>
Optimizing module module46.
<suppressed ~1282 debug messages>
Optimizing module module9.
<suppressed ~324 debug messages>
Optimizing module top.
<suppressed ~119 debug messages>

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module40'.
<suppressed ~1011 debug messages>
Finding identical cells in module `\module46'.
<suppressed ~642 debug messages>
Finding identical cells in module `\module9'.
<suppressed ~159 debug messages>
Finding identical cells in module `\top'.
Removed a total of 604 cells.

2.22.3. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$simplemap.cc:420:simplemap_dff$4814 ($_DFF_P_) from module module40.
Replaced 1 DFF cells.

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..
Removed 534 unused cells and 2002 unused wires.
<suppressed ~538 debug messages>

2.22.5. Rerunning OPT passes. (Removed registers in this run.)

2.22.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module module40.
<suppressed ~64 debug messages>
Optimizing module module46.
<suppressed ~12 debug messages>
Optimizing module module9.
<suppressed ~17 debug messages>
Optimizing module top.

2.22.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module40'.
<suppressed ~96 debug messages>
Finding identical cells in module `\module46'.
<suppressed ~18 debug messages>
Finding identical cells in module `\module9'.
<suppressed ~102 debug messages>
Finding identical cells in module `\top'.
Removed a total of 72 cells.

2.22.8. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$simplemap.cc:420:simplemap_dff$4712 ($_DFF_P_) from module module40.
Replaced 1 DFF cells.

2.22.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 35 unused wires.
<suppressed ~3 debug messages>

2.22.10. Rerunning OPT passes. (Removed registers in this run.)

2.22.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module module40.
Optimizing module module46.
Optimizing module module9.
Optimizing module top.

2.22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module40'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module9'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.22.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..

2.22.15. Finished fast OPT passes.

2.23. Executing ABC pass (technology mapping using ABC).

2.23.1. Extracting gate netlist of module `\module40' to `<abc-temp-dir>/input.blif'..
Extracted 1295 gates and 1440 wires to a netlist network with 143 inputs and 111 outputs.

2.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       19
ABC RESULTS:            ANDNOT cells:      159
ABC RESULTS:              AOI3 cells:       46
ABC RESULTS:              AOI4 cells:        3
ABC RESULTS:               BUF cells:        1
ABC RESULTS:               MUX cells:      149
ABC RESULTS:              NAND cells:       49
ABC RESULTS:               NOR cells:       45
ABC RESULTS:               NOT cells:       84
ABC RESULTS:              OAI3 cells:       29
ABC RESULTS:              OAI4 cells:        1
ABC RESULTS:                OR cells:      279
ABC RESULTS:             ORNOT cells:       31
ABC RESULTS:              XNOR cells:       39
ABC RESULTS:               XOR cells:       90
ABC RESULTS:        internal signals:     1186
ABC RESULTS:           input signals:      143
ABC RESULTS:          output signals:      111
Removing temp directory.

2.23.2. Extracting gate netlist of module `\module46' to `<abc-temp-dir>/input.blif'..
Extracted 1249 gates and 1365 wires to a netlist network with 114 inputs and 76 outputs.

2.23.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        5
ABC RESULTS:            ANDNOT cells:      138
ABC RESULTS:              AOI3 cells:       31
ABC RESULTS:              AOI4 cells:        2
ABC RESULTS:               BUF cells:       43
ABC RESULTS:               MUX cells:      209
ABC RESULTS:              NAND cells:       35
ABC RESULTS:               NOR cells:       22
ABC RESULTS:               NOT cells:       65
ABC RESULTS:              OAI3 cells:       23
ABC RESULTS:                OR cells:      196
ABC RESULTS:             ORNOT cells:       24
ABC RESULTS:              XNOR cells:       31
ABC RESULTS:               XOR cells:       61
ABC RESULTS:        internal signals:     1175
ABC RESULTS:           input signals:      114
ABC RESULTS:          output signals:       76
Removing temp directory.

2.23.3. Extracting gate netlist of module `\module9' to `<abc-temp-dir>/input.blif'..
Extracted 280 gates and 340 wires to a netlist network with 58 inputs and 21 outputs.

2.23.3.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        8
ABC RESULTS:            ANDNOT cells:       28
ABC RESULTS:              AOI3 cells:       10
ABC RESULTS:               MUX cells:       35
ABC RESULTS:              NAND cells:       29
ABC RESULTS:               NOR cells:        6
ABC RESULTS:               NOT cells:        8
ABC RESULTS:              OAI3 cells:        8
ABC RESULTS:                OR cells:       89
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:              XNOR cells:        6
ABC RESULTS:               XOR cells:        4
ABC RESULTS:              ZERO cells:        1
ABC RESULTS:        internal signals:      261
ABC RESULTS:           input signals:       58
ABC RESULTS:          output signals:       21
Removing temp directory.

2.23.4. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 130 gates and 205 wires to a netlist network with 74 inputs and 5 outputs.

2.23.4.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.4.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:       13
ABC RESULTS:              AOI3 cells:        1
ABC RESULTS:               MUX cells:        6
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:        3
ABC RESULTS:               NOT cells:        3
ABC RESULTS:              OAI3 cells:        2
ABC RESULTS:                OR cells:       58
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:               XOR cells:       15
ABC RESULTS:        internal signals:      126
ABC RESULTS:           input signals:       74
ABC RESULTS:          output signals:        5
Removing temp directory.

2.24. Executing OPT pass (performing simple optimizations).

2.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module40.
<suppressed ~19 debug messages>
Optimizing module module46.
<suppressed ~4 debug messages>
Optimizing module module9.
Optimizing module top.

2.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module40'.
<suppressed ~15 debug messages>
Finding identical cells in module `\module46'.
<suppressed ~24 debug messages>
Finding identical cells in module `\module9'.
Finding identical cells in module `\top'.
Removed a total of 13 cells.

2.24.3. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$simplemap.cc:420:simplemap_dff$9299 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9300 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9301 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9302 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9303 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9304 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9305 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9306 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9307 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9308 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9309 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9310 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9311 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9269 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9270 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9271 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9272 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9273 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9274 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9275 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9276 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9277 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9278 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9279 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9280 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9281 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9282 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9283 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9284 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9285 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9286 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9287 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9288 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9289 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9290 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9291 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9292 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9293 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9294 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9295 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9296 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9297 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$9298 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$1874 ($_DFF_P_) from module module9.
Replaced 44 DFF cells.

2.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1421 unused wires.
<suppressed ~4 debug messages>

2.24.5. Rerunning OPT passes. (Removed registers in this run.)

2.24.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module module40.
Optimizing module module46.
<suppressed ~3 debug messages>
Optimizing module module9.
Optimizing module top.

2.24.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module40'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module9'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.24.8. Executing OPT_RMDFF pass (remove dff with constant values).

2.24.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.24.10. Finished fast OPT passes.

2.25. Executing HIERARCHY pass (managing design hierarchy).

2.26. Printing statistics.

=== module40 ===

   Number of wires:                949
   Number of wire bits:           1994
   Number of public wires:          27
   Number of public wire bits:     600
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1104
     $_ANDNOT_                     157
     $_AND_                         19
     $_AOI3_                        46
     $_AOI4_                         3
     $_DFF_P_                       85
     $_MUX_                        149
     $_NAND_                        49
     $_NOR_                         45
     $_NOT_                         84
     $_OAI3_                        29
     $_OAI4_                         1
     $_ORNOT_                       31
     $_OR_                         276
     $_XNOR_                        39
     $_XOR_                         90
     module46                        1

=== module46 ===

   Number of wires:                840
   Number of wire bits:           1571
   Number of public wires:          36
   Number of public wire bits:     739
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                849
     $_ANDNOT_                     136
     $_AND_                          5
     $_AOI3_                        31
     $_AOI4_                         2
     $_DFF_P_                       18
     $_MUX_                        208
     $_NAND_                        35
     $_NOR_                         22
     $_NOT_                         62
     $_OAI3_                        23
     $_ORNOT_                       20
     $_OR_                         195
     $_XNOR_                        31
     $_XOR_                         61

=== module9 ===

   Number of wires:                246
   Number of wire bits:            800
   Number of public wires:          28
   Number of public wire bits:     532
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                263
     $_ANDNOT_                      28
     $_AND_                          8
     $_AOI3_                        10
     $_DFF_P_                       30
     $_MUX_                         35
     $_NAND_                        29
     $_NOR_                          6
     $_NOT_                          8
     $_OAI3_                         8
     $_ORNOT_                        2
     $_OR_                          89
     $_XNOR_                         6
     $_XOR_                          4

=== top ===

   Number of wires:                122
   Number of wire bits:            885
   Number of public wires:          15
   Number of public wire bits:     282
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                112
     $_ANDNOT_                      13
     $_AOI3_                         1
     $_MUX_                          6
     $_NAND_                         2
     $_NOR_                          3
     $_NOT_                          3
     $_OAI3_                         2
     $_ORNOT_                        4
     $_OR_                          58
     $_XNOR_                         3
     $_XOR_                         15
     module40                        1
     module9                         1

2.27. Executing CHECK pass (checking for obvious problems).
checking module module40..
checking module module46..
checking module module9..
checking module top..
found and reported 0 problems.

3. Executing Verilog backend.
Dumping module `\module40'.
Dumping module `\module46'.
Dumping module `\module9'.
Dumping module `\top'.

Warnings: 11 unique messages, 11 total
End of script. Logfile hash: be02ba43f1
CPU: user 3.65s system 0.00s, MEM: 49.09 MB total, 42.38 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 18% 27x proc (0 sec), 16% 34x opt_clean (0 sec), ...
